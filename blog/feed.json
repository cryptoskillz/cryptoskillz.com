{
    "version": "https://jsonfeed.org/version/1",
    "title": "cryptoskillz",
    "description": "",
    "home_page_url": "https://cryptoskillz.com/blog",
    "feed_url": "https://cryptoskillz.com/blog/feed.json",
    "user_comment": "",
    "author": {
        "name": "cryptoskillz"
    },
    "items": [
        {
            "id": "https://cryptoskillz.com/blog/cyperhnode-vi-integrating-lightning-into-ecs.html",
            "url": "https://cryptoskillz.com/blog/cyperhnode-vi-integrating-lightning-into-ecs.html",
            "title": "Cyphernode VI integrating Lightning into ECS",
            "summary": "IntrodcutionThis guide aims to program a website to accept Bitcoin. In the previous tutorial, we started to play with \"Lightning\" support. This time we are going to integrate \"Lightning\" support via \"cyphernode\" into \"ECS\". We broke the code down into two sections which can be found in the&hellip;",
            "content_html": "<h2 id=\"mcetoc_1dqmj63au3\">Introdcution</h2>\n<p><span >This guide aims to program a website to accept Bitcoin. In the previous tutorial, we started to play with \"<strong><a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> support. This time we are going to integrate \"</span><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >Lightning</span></strong></a><strong><span >\"</span></strong><span > support via \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><strong><span >\" </span></strong><span >into</span><strong><span > \"</span></strong><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >ECS</span></strong></a><strong><span >\".</span></strong></p>\n<h2 id=\"mcetoc_1dqmj0jfl1\">The Code </h2>\n<p><span >We broke the code down into two sections which can be found in the following \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/cyphernode-lightning\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >branch</span></strong></a><strong><span >\"</span></strong><span >. The first section deals with how we can interface with the \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><strong><span >\"</span></strong><span > proxy and is contained in the file called \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/jwt.js\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >jwt.js</span></strong></a><strong><span >\" </span></strong><span >we have put this in an isolated file as it shows how the code works without having the added complexity of \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >ECS</span></strong></a><strong><span >\"</span></strong><span > in the mix. The second section shows the changes we made to \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >ECS</span></strong></a><strong><span >\"</span></strong><span > to integrate \"<strong><a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> support. </span></p>\n<p><span >It is worth noting that we have quite tightly integrated cyphernode into the core of \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >ECS</span></strong></a><strong><span >\"</span></strong><span >. This in itself is not a bad thing but we want to make \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >ECS</span></strong></a><strong><span >\"</span></strong><span > as agnostic as we possibly and as a result, we will be looking to decouple it somewhat in the future. </span></p>\n<p><span style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: calc(1.26562rem + (0.1582 * ((100vw - 20rem) / 80))); font-weight: 600; letter-spacing: -0.03rem;\">JWT Code</span></p>\n<p>To integrate into \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a>\"</strong> we are going to modify a lot of the code but lets first talk a little about how the gatekeeper works and how to access it. If we take a look at the \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong> API docs \"<strong><a href=\"https://github.com/SatoshiPortal/cyphernode/tree/master/doc\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>\" </strong>you will see the following example of how to use the gatekeeper to access the underlying functions of \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\" </strong></p>\n<div class=\"highlight highlight-source-shell\">\n<pre>id=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>003<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">;</span>h64=<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>echo -n <span class=\"pl-pds\">\"</span>{<span class=\"pl-cce\">\\\"</span>alg<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>HS256<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>typ<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>JWT<span class=\"pl-cce\">\\\"</span>}<span class=\"pl-pds\">\"</span> <span class=\"pl-k\">|</span> base64<span class=\"pl-pds\">)</span></span><span class=\"pl-k\">;</span>p64=<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>echo -n <span class=\"pl-pds\">\"</span>{<span class=\"pl-cce\">\\\"</span>id<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span><span class=\"pl-smi\">$id</span><span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>exp<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-pds\">$((</span>`date <span class=\"pl-k\">+</span>\"<span class=\"pl-k\">%</span>s\"`<span class=\"pl-k\">+</span><span class=\"pl-c1\">10</span><span class=\"pl-pds\">))</span>}<span class=\"pl-pds\">\"</span> <span class=\"pl-k\">|</span> base64<span class=\"pl-pds\">)</span></span><span class=\"pl-k\">;</span>k=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b9b8d527a1a27af2ad1697db3521f883760c342fc386dbc42c4efbb1a4d5e0af<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">;</span>s=<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>echo -n <span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$h64</span>.<span class=\"pl-smi\">$p64</span><span class=\"pl-pds\">\"</span> <span class=\"pl-k\">|</span> openssl dgst -hmac <span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$k</span><span class=\"pl-pds\">\"</span> -sha256 -r <span class=\"pl-k\">|</span> cut -sd <span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span> -f1<span class=\"pl-pds\">)</span></span><span class=\"pl-k\">;</span>token=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$h64</span>.<span class=\"pl-smi\">$p64</span>.<span class=\"pl-smi\">$s</span><span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">;</span>curl -v -H <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Content-Type: application/json<span class=\"pl-pds\">\"</span></span> -d <span class=\"pl-s\"><span class=\"pl-pds\">'</span>{\"hash\":\"123\",\"callbackUrl\":\"http://callback\"}<span class=\"pl-pds\">'</span></span> -H <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Authorization: Bearer <span class=\"pl-smi\">$token</span><span class=\"pl-pds\">\"</span></span> -k https://127.0.0.1:2009/v0/ots_stamp</pre>\n</div>\n<p id=\"mcetoc_1dqmi25250\">Wow, ok if we paste the in it works but how on earth do we use this in code. Let us start by doing what developers do and break this down and reverse engineer it. It is doing the following<br><br>1) creating an algorithm type of \"<strong><a href=\"https://en.wikipedia.org/wiki/JSON\">JSON</a>\"</strong> object and storing it in a var called h64<br>2) creating a payload \"<strong><a href=\"https://en.wikipedia.org/wiki/JSON\" target=\"_blank\" rel=\"noopener noreferrer\">JSON</a>\"</strong> object with ID and an expiry date in it and storing this in P64<br>3) setting the \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong> API key as the secret and storing it in a variable called k<br>4) creating an SH256 has from the above and storing it in a var called s<br>5) joining the h64,p64 and s vars together to create a \"<strong><a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">JWT token</a>\"</strong><br>6) sending this to \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong> proxy for processing</p>\n<p><br>Ok, now we know what it is doing let us see if we can break it down and move into a test file and see if we can recreate the functionality in code.</p>\n<p><br>The first thing we have to do is include the files that are important to us, in this case, it is \"<strong><a href=\"https://www.npmjs.com/package/dotenv\" target=\"_blank\" rel=\"noopener noreferrer\">dontenv</a>\"</strong> to store access to our env vars, the \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong> API key and \"<strong><a href=\"https://www.npmjs.com/package/crypto-js\">crypto js</a>\"</strong> to create a hash for our \"<strong><a href=\"https://jwt.io/\">JWT token</a>\"</strong>.</p>\n<p><code>//load dotenv to get accces to the vars in .env                </code><br><code>require('dotenv').config();                                    </code><br><code>//load request                                                 </code><br><code>//console.log(process.env.CYPHERNODE_API_KEY)                  </code><br><code>const request = require('request');                            </code><br><code>//load crytpo js                                               </code><br><code>const cryptojs = require(\"crypto-js\");                          <br><br></code></p>\n<p>Next, we require a couple of new ENV vars the first is for the \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong> API key which can be found in your \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong> installation in the following location cyphernode/gatekeeper/keys.properties.<br><br>Next, we require the URL of the \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong> server which should be the below (unless you have deviated for the tutorial in which case shame on you). <br><br>Finally, we have to disable the SSL errors so we can test without having SSL configured. Of course, if we were to use this in a production environment then we would not have this disabled and in fact, we will deal with this in the next article.</p>\n<p>These are the ENV vars we added.</p>\n<p><code>CYPHERNODE_API_KEY=''                                          </code><br><code>CYPHER_GATEWAY_URL=https://127.0.0.1:2009/v0/                  </code><br><code>NODE_TLS_REJECT_UNAUTHORIZED=0                                 </code></p>\n<p>Next, we have to build a \"<strong><a href=\"https://jwt.io/\">JWT token</a>\"</strong> and we do this as follows:</p>\n<p><code>id = \"003\";<br>//set the expiry time to a point in the future<br>exp = Math.round(new Date().getTime() / 1000) + expiryInSeconds;<br>//set the algo type we are going to use and base 64 it           <br>h64 = Buffer.from(JSON.stringify({                               <br> alg: \"HS256\",                                                    <br> typ: \"JWT\"                                                       <br>})).toString(\"base64\");                                          <br>//set the payload and set it to h64                              <br>p64 = Buffer.from(JSON.stringify({                               <br> id: id,                                                          <br> exp: exp                                                         <br>})).toString(\"base64\");                                          <br>//join them together                                             <br>msg = h64 + \".\" + p64;                                           <br>//get a sha256 has or the h64,p64 and the API key (which is the  secret in JWT world)                                             <br>const hash = cryptojs.HmacSHA256(msg, api_key);                  <br>//create the JWT token                                           <br>const token = h64 + \".\" + p64 + \".\" + hash                       <br>//output it                                                      <br>console.log(\"token - \" + token);require('dotenv').config();       </code></p>\n<p>Next, we have to make a call to the gatekeeper</p>\n<p><code>//set the menthod we want to call                              </code><br><code>const method = \"ln_getinfo\";                                   </code><br><code>//set the body we want to send, this is not required for every  method call but it does no harm to send it                      </code><br><code>const body = '{\"hash\":\"123\",\"callbackUrl\":\"http://callback\"}'; </code><br><code>//create the Bearer header                                     </code><br><code>const authheaader = \"Bearer \" + token;                         </code><br><code>const options = {                                              </code><br><code> url: cyphernodeurl + method,                                   </code><br><code> headers: {                                                     </code><br><code> 'Authorization': authheaader                                   </code><br><code> },                                                             </code><br><code> body: body                                                     </code><br><code>};                                                             </code><br><code>//create the call back                                         </code><br><code>function callback(error, response, body) {                     </code><br><code> if (!error &amp;&amp; response.statusCode == 200) {                    </code><br><code> const info = JSON.parse(body);                                 </code><br><code> //do stuff with the result                                     </code><br><code> console.log(body);                                             </code><br><code> } else {                                                       </code><br><code> //you done messed up boi                                       </code><br><code> console.log(body)                                              </code><br><code> console.log(error)                                             </code><br><code> }                                                              </code><br><code>}                                                              </code><br><code>//make the calls                                               </code><br><code>request.post(options, callback);                               </code></p>\n<p>now if we run this from the terminal we will get the following output:<br><br><img class=\"post__image\" style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\" src=\"https://cryptoskillz.com/blog/media/posts/31/civ1.png\" alt=\"\" width=\"2379\" height=\"817\"></p>\n<p><span >Great, we can now call our \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong> via the gatekeeper and get a response. You can find this file \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/jwt.js\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\"</span></strong><span > if you would like to play with it. </span></p>\n<h3 id=\"mcetoc_1dqmj6n2j4\">ECS Integration</h3>\n<p>As with previous tutorials, we stopped listing \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a>\"</strong> in its entirety some time ago and instead just list the core changes and the reason why we did what we did.</p>\n<h4 id=\"mcetoc_1drq6ikou2\">init function</h4>\n<p>We added a parameter to turn lightning on or off<br><br><code>Server vars you can pass set to \"\" to ignore                    <br>0 = server url                                                   <br> 1 = quantity                                                     <br> 2 = cdn url                                                      <br> 3 = uid                                                          <br> 4 = shipping address                                             <br> 5 = start country                                                <br> 6 = serverless                                                   <br> 7 = serverless btc address                                       <br> 8 = lightning support   </code><code>                                                                                                         <br>SR.init([\"http://127.0.0.1:3030/\",15,\"http://127.0.0.1:8080/demos/carts/default/\",\"3\",1,\"GB\",0,\"\",1]);                           </code></p>\n<h4 id=\"mcetoc_1drq6pbhc3\">Cart / sr.js</h4>\n<p><span style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\"><span >We added a toggle to the cart to allow us to toggle between \"<strong><a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" target=\"_blank\" rel=\"noopener noreferrer\">lightning</a>\"</strong> and BTC mode as shown in the screenshots below. We also added a bunch of small changes liking hiding the address, adding an icon, etc. You can view all the changes we made by looking at the commit \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/commits/cyphernode-lightning\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >history</span></strong></a><strong><span >\".</span></strong></span></p>\n<p><span >Note, if you are running it in serverless mode then you will not be able to use \"<strong><a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> as it has to generate an invoice. There are ways to deal with this using watch towers etc which we will deal with in a later tutorial but for now, this is the way it is. </span></p>\n<p><span >All of the logic to deal with this was added to the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/cyphernode-lightning/cdn\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >CDN</span></strong></a><strong><span >\"</span></strong><span > (\"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/cdn/js/sr.js\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >sr.js</span></strong></a><strong><span >\"</span></strong><span >) </span></p>\n<h4 id=\"mcetoc_1drq7fdpo5\">demos</h4>\n<p>We added a new demo to the demo directory to deal with LIghtning which can you can view \"<strong><a href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/demos/carts/default/6-cart-customer-address-lightning.html\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>\"</strong>.</p>\n<h4 id=\"mcetoc_1drq7tefq7\">.ENV</h4>\n<p><span >We added a few new parameters to the .ENV file (note these are the same as in \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/jwt.js\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >jwt.js</span></strong></a><strong><span >\" </span></strong><span >from earlier)</span></p>\n<p><code>CYPHERNODE_API_KEY=                                            </code><br><code>CYPHER_GATEWAY_URL=https://localhost:2009/v0/                  </code><br><code>NODE_TLS_REJECT_UNAUTHORIZED=0                                 </code></p>\n<p id=\"mcetoc_1drq7l7706\">CYPHERNODE_API_KEY, the value for this API key can be found in the following file </p>\n<p><code>/cyphernode/gatekepper/keys.properties                         </code></p>\n<p>Open this and copy the API that is next to kapi_id=\"003\";kapi_key=\"APIKEY\"<br>Note, it is important to keep this API key safe as it allows full access to cyphernode. Also, we used 003 as we were too lazy to see the permission level of each but it is highly likely you may only need the 001 API key. We will deal with this when we move it to production in the next tutorial.<br><br>CYPHER_GATEWAY_URL, this is the proxy URL for cyphernode.<br><br>NODE_TLS_REJECT_UNAUTHORIZED=0, this is to disable SSL and yes this is a hack but we were struggling to get the docker images working with let's encrypt. We will deal with this for sure in the next tutorial.</p>\n<h4 id=\"mcetoc_1drq83pa18\">Server</h4>\n<p>We added a couple of new functions to the server. </p>\n<p><strong>/api/lightningaddress</strong></p>\n<p><span >This calls a function called generateLightningAddress which generates a lightning address :]. This function is the same as the one in JWT more or less so I will not paste the whole thing again but you can see it \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/api/helpers/api.js#L258\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\" </span></strong><span >if you want to have a look at it in more detail.</span></p>\n<p><strong>/webhook/checklightningpayment</strong></p>\n<p><span >again this function is very similar to the JWT example except it checks a lightning label to check if a payment has been made and update the database according. You can view the code \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/api/helpers/webhook.js#L36\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\"</span></strong><span >. </span> </p>\n<h3 id=\"mcetoc_1drq9ao48a\">SQL</h3>\n<p>We made one small change to the sessions table to be able to deal with a \"<strong><a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> payment</p>\n<p><code>CREATE TABLE \"sessions\" (                                        `id` INTEGER PRIMARY KEY AUTOINCREMENT,                          <br> `address` TEXT, `processed` INTEGER DEFAULT 0,                   `swept` INTEGER DEFAULT 0,                                      <br> `userid` INTEGER,                                                <br>`net` INTEGER DEFAULT 1,                                         <br>`amount` TEXT DEFAULT 0,                                         <br> `addresstype` INTEGER DEFAULT 0,                                 <br> `sessioncountcheck` INTEGER DEFAULT 0,                           <br>`carttype` INTEGER DEFAULT 1,                                    <br> `lightningaddress` TEXT,                                         <br>`lightninglabel` TEXT )                                          <br></code> </p>\n<h2 id=\"mcetoc_1dqmj70eg5\">Conculsion</h2>\n<p><span >In this tutorial, we broke down exactly how to access cyphernode via gatekeeper and integrated it into \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a>\"</strong>. However, there is an excellent class called \"</span><a target=\"_blank\" href=\"https://github.com/gabidi/cyphernode-js-sdk\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode.sdk</span></strong></a><strong><span >\"</span></strong><span > that we will use next time to make things cleaner. We will also install an SSL certificate, deal with \"<strong><a href=\"https://blockonomi.com/lightning-network-inbound-capacity/\" target=\"_blank\" rel=\"noopener noreferrer\">inbound capacity</a>\"</strong> issues and host the whole thing on \"<strong><a href=\"https://www.digitalocean.com/\" target=\"_blank\" rel=\"noopener noreferrer\">digital ocean</a>\"</strong>. </span></p>\n<p> </p>\n<p> </p>\n<p> </p>",
            "image": "https://cryptoskillz.com/blog/media/posts/31/haik-ourfal-M4biGF0pN5s-unsplash.jpg",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-11-27T20:46:03+07:00",
            "date_modified": "2019-12-19T01:44:50+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/working-with-fullnodes-part-8-cyphernode-v.html",
            "url": "https://cryptoskillz.com/blog/working-with-fullnodes-part-8-cyphernode-v.html",
            "title": "Cyphernode V figuring out Lightning",
            "summary": "IntroductionThis guide aims to program a website to accept Bitcoin. In the previous tutorial, we made it easier for front end devs to work with the \"cart\" and added a serverless mode. This time we are going to add \"Lightning\" support via \"cyphernode\". We have covered the&hellip;",
            "content_html": "<h2 id=\"mcetoc_1dmo28s090\">Introduction</h2>\n<p>This guide aims to program a website to accept Bitcoin. In the previous tutorial, we made it easier for front end devs to work with the \"<strong><a href=\"https://github.com/cryptoskillz/ECS/tree/master/demos/carts/default\" target=\"_blank\" rel=\"noopener noreferrer\">cart</a>\"</strong> and added a serverless mode. This time we are going to add \"<strong><a href=\"https://lightning.network/\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> support via \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong>.  </p>\n<h2 id=\"mcetoc_1dpi8thrv0\">Setting up Cyphernode</h2>\n<p><span >We have covered the installation of \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><strong><span >\"</span></strong><span > in the past and refer you back to a previous \"</span><strong><span ><a href=\"https://cryptoskillz.com/blog/working-with-fullnodes-part-6-cyphernode-iii.html\">article</a></span></strong><strong><span >\"</span></strong><span >. This shows you to set up \"<strong><a href=\"https://cyphernode.io/\">cyphernode</a>\"</strong> with \"<strong><a href=\"https://lightning.network/\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> in test mode. You will need about 40gig of HD space to download the full \"</span><a target=\"_blank\" href=\"https://en.bitcoin.it/wiki/Testnet\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >testnet</span></strong></a><strong><span >\"</span></strong><span > and 350gig for BTC mainnet.</span></p>\n<h2 id=\"mcetoc_1dpi97p870\">Syncing up </h2>\n<p>Once you have installed and started \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cypernode</a>\"</strong> by typing in terminal (as usual) </p>\n<p><code>./start.sh</code></p>\n<p>Then we have to sync the blockchain.  You can see it the progress of it by going to the \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cypherode</a>\"</strong> \"<strong><a href=\"https://127.0.0.1/welcome\" target=\"_blank\" rel=\"noopener noreferrer\">dashboard</a>\"</strong> and logging in with your username and password you set during setup.</p>\n<p> </p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp.png\" alt=\"\" width=\"2362\" height=\"1244\"></p>\n<p><span >You also have to wait for \"<strong><a href=\"https://lightning.network/\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> to be in sync, now as we are very dumb this stumped us for a day or so and eventually figured out by the process of elimination which is the way devs find out most things. </span></p>\n<p><span >We also wrote a simple \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/light.js\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >script</span></strong></a><strong><span >\"</span></strong><span > that you can interact with \"<strong><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">docker</a>\"</strong> and shows you several useful things. You use it from the terminal and pass it and Test ID and the \"<strong><a href=\"https://www.docker.com/resources/what-container\" target=\"_blank\" rel=\"noopener noreferrer\">containers</a>\"</strong> that you want to interact with. Start by running the \"<strong><a href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/light.js\" target=\"_blank\" rel=\"noopener noreferrer\">light script</a>\"</strong> in the server/test directory of \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a>\"</strong></span></p>\n<p><code>cd server                                                    </code><code>cd tests                                                     </code><br><code>node light.js                                                </code></p>\n<p>This will return you the \"<strong><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">docker</a>\"</strong> \"<strong><a href=\"https://www.docker.com/resources/what-container\" target=\"_blank\" rel=\"noopener noreferrer\">containers</a>\"</strong> that are running as shown in the screenshot below.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp2.png\" alt=\"\" width=\"1406\" height=\"1747\"></p>\n<p>Look for the container id for <span class=\"s1\"><strong>cyphernode_lightning_1</strong> </span>and use this with the test id of 0</p>\n<p class=\"p1\"><code><span class=\"s1\">node light.js<span class=\"Apple-converted-space\">  </span>0 ded324549726                                   </span></code></p>\n<p>This will show you the current state of the \"<strong><a href=\"https://lightning.network/\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> sync as shown below.</p>\n<p><br><img class=\"post__image\" style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp3.png\" alt=\"\" width=\"1326\" height=\"935\"></p>\n<p><span >What we are looking for here is the </span><strong><span >block height </span></strong><span >to be the same as Bitcoin's block height this means it is fully synced. We will be honest with you we did not know this was the case and as it took several days longer for this to fully sync we thought we had broken something and spend a great deal of time reinstalling, \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong>, etc. This, however, is good, it is how we learn. It is knowledge earned. </span></p>\n<p><span >To stop you from following into this trap we added a test, number 11 in fact to the \"<strong><a href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/light.js\" target=\"_blank\" rel=\"noopener noreferrer\">light script</a>\"</strong> that shows you what percentage \"<strong><a href=\"https://lightning.network/\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> has synced. You run it by calling the command below, the first container id is the \"<strong><a href=\"https://lightning.network/\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> \"<strong><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">container</a>\"</strong> and the second is the proxy \"<strong><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">container</a>\"</strong>.</span></p>\n<p class=\"p1\"><code><span class=\"s1\">node light.js 11 ded324549726 ff3c81a590f7                      </span></code></p>\n<p>When you run the above you will get an output something like this. Note, of course, you are looking for it to at 100% (fully synced) before you move on.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp4.png\" alt=\"\" width=\"1283\" height=\"726\"></p>\n<h2 id=\"mcetoc_1dpk27vnp0\">Funding and channels </h2>\n<p><span >Now that we have a fully synced Bitcoin and \"<strong><a href=\"https://lightning.network/\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning</a>\"</strong> instance of \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><strong><span >\"</span></strong><span > we have to fund and open a channel. Full disclosure we found this \"</span><a target=\"_blank\" href=\"https://medium.com/@Jayvdb/setting-up-and-transacting-on-the-bitcoin-lightning-network-a9ada42ec305\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >article</span></strong></a><strong><span >\"</span></strong><span > a very good resource for this part and we suggest you give it a read.</span></p>\n<p><span >For testing purposes, we use 2 testnet wallets on our android phone. We just find this to be the easiest way to do it as you can use your camera to read QR codes etc. The 2 testnet BTC wallets we use are:</span></p>\n<p><strong>\"<a href=\"https://play.google.com/store/apps/details?id=de.schildbach.wallet_test&amp;hl=en\" target=\"_blank\" rel=\"noopener noreferrer\">Testnet</a>\"</strong></p>\n<p><strong>\"<a href=\"https://play.google.com/store/apps/details?id=com.mycelium.testnetwallet&amp;hl=en\" target=\"_blank\" rel=\"noopener noreferrer\">Mycelium</a>\"</strong></p>\n<p><span >As far as funding these wallets go we use this \"</span><a target=\"_blank\" href=\"https://coinfaucet.eu/en/btc-testnet/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >faucet</span></strong></a><strong><span >\"</span></strong><span > but there are many more out there so use whatever one you want/prefer.</span></p>\n<p><span >Note, at this stage we are going to skip using the \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><strong><span >\"</span></strong><span > \"</span><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Application_programming_interface\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >API</span></strong></a><strong><span >\"</span></strong><span > (which would be the correct way to do it) in favour of accessing the \"</span><a target=\"_blank\" href=\"https://www.docker.com/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >docker containers</span></strong></a><strong><span >\"</span></strong><span > via the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/light.js\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >light.js</span></strong></a><strong><span >\"</span></strong><span > script we coded, mainly for consistency and the fact we are going to be discussing the proxy and API in detail next time.</span></p>\n<h2 id=\"mcetoc_1dpv5ej0a3\">Generate a new address</h2>\n<p><span >The first thing we have to do is call the \"</span><a target=\"_blank\" href=\"https://lightning.readthedocs.io/lightning-newaddr.7.html\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >newaddr</span></strong></a><strong><span >\" method </span></strong><span >which generates a new address that we can use to fund our Lightning node. Run the command below (with 1 as the test ID) and your Lightning container ID as shown below.</span></p>\n<p class=\"p1\"><code><span class=\"s1\"> node light.js 1 ded324549726                                   </span></code></p>\n<p>You will get something like the following output:</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp5.png\" alt=\"\" width=\"1051\" height=\"170\"></p>\n<h3 id=\"mcetoc_1dpmuj7h90\">Send funds to the address</h3>\n<p>Copy the above address and send some BTC to this address via one of the android wallets as shown in the screenshot below</p>\n<p><img class=\"post__image\" style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\" src=\"https://cryptoskillz.com/blog/media/posts/30/Screenshot_20191115-141126.png\" alt=\"\" width=\"1080\" height=\"2160\"></p>\n<p><span >Now let's see it on the \"</span><a target=\"_blank\" href=\"https://www.blockchain.com/btctest/address/tb1qtvc3uu9ne65xxu8v6dakdymvpxk0pu30xlru7d\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >blockchain</span></strong></a><strong><span >\"</span></strong><span > and as soon as we have one \"<strong><a href=\"https://en.bitcoin.it/wiki/Confirmation\" target=\"_blank\" rel=\"noopener noreferrer\">confirmation</a>\"</strong> we can go ahead and fund a channel</span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp6.png\" alt=\"\" width=\"2514\" height=\"1361\"></p>\n<h2 id=\"mcetoc_1dpmv40fc1\">Check the funds</h2>\n<p><span >We check if the funds are ready to use by calling the \"</span><a target=\"_blank\" href=\"https://lightning.readthedocs.io/lightning-listfunds.7.html\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >listfunds</span></strong></a><strong><span >\"</span></strong><span > method, again we can do this by calling the \"<strong><a href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/light.js\" target=\"_blank\" rel=\"noopener noreferrer\">light script</a>\"</strong> this time with the test id of 2</span></p>\n<p class=\"p1\"><code><span class=\"s1\">node light.js 2 ded324549726                                   </span></code></p>\n<p>Thos will show the address we sent to in the output array as shown in the screen show below.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp7.png\" alt=\"\" width=\"1213\" height=\"426\"></p>\n<h2 id=\"mcetoc_1dpv5us275\">Set up our android Lightning wallet</h2>\n<p><span >Now, let us create an invoice and send some cash to us. Again we use an android as our Lightning testnet and you can get it from the link below </span></p>\n<p><strong><span >\"</span></strong><a target=\"_blank\" href=\"https://play.google.com/store/apps/details?id=com.lightning.wallet&amp;hl=en\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >testnet lightning wallet</span></strong></a><strong><span >\"</span></strong></p>\n<p><span >Open this wallet and send some funds to it by clicking the orange Bitcoin button (bottom right). As shown in the screen shown below. </span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/Screenshot_20191115-145315.png\" alt=\"\" width=\"1080\" height=\"2160\"></p>\n<p>Hit receive funds and finally Bitcoin Transaction from the modal that appears</p>\n<p><img class=\"post__image\" style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\" src=\"https://cryptoskillz.com/blog/media/posts/30/Screenshot_20191115-144443.png\" alt=\"\" width=\"1080\" height=\"2160\"></p>\n<p><span >Once it has 6 confirmations we can use this to fund a channel. </span></p>\n<h4 id=\"mcetoc_1dpv61ane6\"><span >Open and fund a channel on our node.</span></h4>\n<p><span >Now that the above was just to set up our wallet and add a channel so we can send data to it, we have to do the same on our node, so let us open a channel and fund it. We have chosen \"</span><a target=\"_blank\" href=\"https://demo1.lndexplorer.com/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >lndexplorer.com</span></strong></a><strong><span >\"</span></strong><span > as it is a pretty good size site with a lot of active channels. We want to use their node details that we find at the bottom of their homepage as shown in the screenshot below</span></p>\n<p><img class=\"post__image\" style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\" src=\"https://cryptoskillz.com/blog/media/posts/30/spartk.png\" alt=\"\" width=\"2827\" height=\"1305\"></p>\n<p id=\"mcetoc_1dpmvdph42\"><span >Next, we want to use the \"</span><a target=\"_blank\" href=\"https://lightning.readthedocs.io/lightning-connect.7.html\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >connect</span></strong></a><strong><span >\"</span></strong><span > method and we do this by calling test id 3 in our \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/light.js\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >light.js</span></strong></a><strong><span >\"</span></strong><span > script and passing in the node id, IP and port.</span></p>\n<p><code>node light.js 3 ded324549726                                     036b96e4713c5f84dcb8030592e1bd42a2d9a43d91fa2e535b9bfd05f2c5def9b9 38.87.54.163 9745                                            </code></p>\n<p>The screen show below shows the output.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp8.png\" alt=\"\" width=\"2133\" height=\"142\"></p>\n<p><span >After that, we want to fund this channel we do this by using the \"</span><a target=\"_blank\" href=\"https://lightning.readthedocs.io/lightning-fundchannel.7.html\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >fundchannel</span></strong></a><strong><span >\"</span></strong><span > method which can be accessed by calling the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/light.js\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >light js</span></strong></a><strong><span >\"</span></strong><span > script (again) this time with test id of 4 and passing in the node id and the number of satoshis we want to fund the channel with.</span></p>\n<p class=\"p1\"><code><span class=\"s1\">node light.js 4 ded324549726                                    036b96e4713c5f84dcb8030592e1bd42a2d9a43d91fa2e535b9bfd05f2c5def9b9 200000                                                        </span></code></p>\n<p>The output of this is shown in the screenshot below.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp9.png\" alt=\"\" width=\"2878\" height=\"310\"></p>\n<p>Finally, we can use the \"<strong><a href=\"https://lightning.readthedocs.io/lightning-listpeers.7.html\" target=\"_blank\" rel=\"noopener noreferrer\">listpeers</a>\"</strong> command by passing in test id 5 (into the \"<strong><a href=\"https://github.com/cryptoskillz/ECS/blob/cyphernode-lightning/server/tests/light.js\" target=\"_blank\" rel=\"noopener noreferrer\">light.js</a>\"</strong> script) as shown below which will show us the current state of the channel.</p>\n<p class=\"p1\"><code><span class=\"s1\"> node light.js 5 ded324549726                                    036b96e4713c5f84dcb8030592e1bd42a2d9a43d91fa2e535b9bfd05f2c5def9b9                                                               </span></code></p>\n<p>The output is shown in the screenshot below.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp10.png\" alt=\"\" width=\"2188\" height=\"1330\"></p>\n<h2 id=\"mcetoc_1dpv67bp37\"><span >Using Spark wallet GUI</span></h2>\n<p><span >We did all that by the command line which we feel was and is important as it is the best way to figure out what commands are being called and more importantly why but \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><strong><span >\"</span></strong><span > comes with \"</span><a target=\"_blank\" href=\"https://github.com/shesek/spark-wallet\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >sparkwallet</span></strong></a><strong><span >\"</span></strong><span > which a great \"</span><a target=\"_blank\" href=\"https://lightning.network/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >Lightning</span></strong></a><strong><span >\"</span></strong><span > \"</span><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Graphical_user_interface\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >GUI</span></strong></a><strong><span >\"</span></strong><span > that we can use to do most of these tasks much easier.</span></p>\n<p><span >Note we are not going to show how to do everything we did in the command line again in \"<strong><a href=\"https://github.com/shesek/spark-wallet\" target=\"_blank\" rel=\"noopener noreferrer\">sparkwallet</a>\"</strong> as it is pretty simple to understand \"<strong>pay</strong>\" pays someone, \"<strong>request</strong>\" creates an invoice to send funds to, etc. as an aside \"<strong><a href=\"https://github.com/shesek/spark-wallet\" target=\"_blank\" rel=\"noopener noreferrer\">spark</a>\"</strong> has an \"</span><a target=\"_blank\" href=\"https://play.google.com/store/apps/details?id=com.spark.wallet&amp;hl=en\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >android</span></strong></a><strong><span >\"</span></strong><span > (possibly IOS) app to control our lightning node so we are for sure going to look at this in a future article.</span></p>\n<p><span >We will show you the basics, like how to access \"</span><a target=\"_blank\" href=\"https://github.com/shesek/spark-wallet\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >spark</span></strong></a><strong><span >\"</span></strong><span >. To access it go the following \"</span><a target=\"_blank\" href=\"https://127.0.0.1/sparkwallet/#/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >URL</span></strong></a><strong><span >\"</span></strong><span > type in your \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><span >\" username and password (if requested) and you will see a screen show like the one below</span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/spark0.png\" alt=\"\" width=\"2791\" height=\"1347\"></p>\n<p>As you can see there is pay, a request button and the channel we just set up if you click the node (in the green bottom left) you will see our address as well as a QR code and a deposit button.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/spark1.png\" alt=\"\" width=\"2846\" height=\"1358\"></p>\n<p><span >If we go ahead and click on the \"</span><a target=\"_blank\" href=\"https://127.0.0.1/sparkwallet/#/channels\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >channels</span></strong></a><strong><span >\"</span></strong><span > button you will see that the channel is opening when it is moved to open then we will be able to pay an invoice</span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/spark3.png\" alt=\"\" width=\"2757\" height=\"1347\"></p>\n<p>Just so you know it can take up to an hour to open this channel so if you are playing along now may be a great time to go and get a refreshing beverage of your choice, we recommend Iced Peach Tea but get whatever you want. Once the channel is open you will see a screenshot like the one below and it is time to send some funds to it. </p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/spark4.png\" alt=\"\" width=\"2208\" height=\"1331\"></p>\n<h3 id=\"mcetoc_1dpq5utjk0\">Sending funds</h3>\n<p>Let's see if we can make a payment by going to \"<strong><a href=\"https://testnet.yalls.org/reactions/\" target=\"_blank\" rel=\"noopener noreferrer\">yalls</a>\"</strong> and buying a reaction.  Go the \"<strong><a href=\"https://testnet.yalls.org/reactions/\" target=\"_blank\" rel=\"noopener noreferrer\">url</a>\"</strong> and click a reaction you would like to purchase. </p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp14.png\" alt=\"\" width=\"1694\" height=\"1017\"></p>\n<p id=\"mcetoc_1dpv2ha601\"><span >We like skulls, we are going to buy that the skull by clicking on the \"</span><strong><span >$0.01 tusd\" </span></strong><span >button underneath it, once we do this we will be presented with a payment invoice address.</span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp15.png\" alt=\"\" width=\"1490\" height=\"998\"></p>\n<p>copy the address and go to the \"<strong><a href=\"https://127.0.0.1/sparkwallet/#/\" target=\"_blank\" rel=\"noopener noreferrer\">spark wallet</a>\"</strong> (we could also do this from the command line if we wanted to) as show below.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp13.png\" alt=\"\" width=\"2797\" height=\"526\"></p>\n<p id=\"mcetoc_1dpv2tgml2\">Click the \"<strong>pay</strong>\" button and paste in the address and then press the \"<strong>decode request</strong>\" button.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp16.png\" alt=\"\" width=\"2797\" height=\"1195\"></p>\n<p>When you do this you will see a payment confirmed screen like the one shown below.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp17.png\" alt=\"\" width=\"2462\" height=\"1341\"></p>\n<p id=\"mcetoc_1dpv3c9dj3\"><span >Finally, if we go back to \"</span><a target=\"_blank\" href=\"https://testnet.yalls.org/reactions/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >yalls</span></strong></a><strong><span >\"</span></strong><span > we will see that the reaction has now been purchased as shown in the screenshot below.</span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/30/cyp18.png\" alt=\"\" width=\"1548\" height=\"1094\"></p>\n<p><span >Just a quick takeaway here the speed this transaction happens is outstanding, I did not have time to click back on the page to see the purchase in realtime (it is that fast). That coupled with the fact it was for a very small amount of money is just amazing and yes I opened a channel directly to \"</span><a target=\"_blank\" href=\"https://testnet.yalls.org/reactions/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >yalls</span></strong></a><strong><span >\"</span></strong><span > but that is beside the point, this technology is a game-changer.</span></p>\n<h3 id=\"mcetoc_1dpv6p2438\"><span >Inbound payments and capacity</span></h3>\n<p><span >It is worth noting here that we only used this to make payments and receive them, now there is a good reason for this and that is the fact we are running this on a local machine and to get it to do this required opening of port 9735, exposing cyphernode to the network, etc. All of the above is network stuff that is out of scope for this article and we will be dealing with in the next article when we tie it into \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >ECS</span></strong></a><strong><span >\".  </span></strong><span >Here is a nice \"</span><a target=\"_blank\" href=\"https://medium.com/@pierre_rochard/bitcoin-and-lightning-nodes-port-forwarding-faq-f92ca5c50d5d\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >article</span></strong></a><strong><span >\"</span></strong><span > about port forwarding in case you want to read more</span></p>\n<p><span >Inbound capacity, however, is going to be an issue, you see as a peer to peer payment mechanism it works great. You open a channel to whomever you want to send funds to and close the channel when you are done. However when you are using it to power an e-commerce website it is online all the time and you want anybody on the network to be able to pay for your goods and services with minimum friction. There are several ways to solve this but they all appear to be incompatible with c-lightning. That said we are no experts (in fact we only found out about this issue whilst writing this article) and like every time, we have run into an issue like this we have studied our way out of it and we will do some once more. If you want to read more about inbound capacity click \"</span><a target=\"_blank\" href=\"https://medium.com/@crypto_coffee/how-to-get-inbound-lightning-network-channels-using-thor-from-bitrefill-ede45e7f51f0\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\",</span></strong><span > \"</span><a target=\"_blank\" href=\"https://medium.com/lightningto-me/practical-solutions-to-inbound-capacity-problem-in-lightning-network-60224aa13393\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\" </span></strong><span >and</span><strong><span > \"</span></strong><a target=\"_blank\" href=\"https://blog.muun.com/the-inbound-capacity-problem-in-the-lightning-network/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\" </span></strong></p>\n<h2 id=\"mcetoc_1dpv6pfd4a\"><span > </span><span >Conclusion</span></h2>\n<p><span >To say we learned a lot this article is an understatmement if this was a video game (and it may very well be) we leveled up several times. We have a good understanding of the fundamentals of \"</span><a target=\"_blank\" href=\"https://lightning.network/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >Lightning</span></strong></a><strong><span >\"</span></strong><span > (finally) as well as a deeper understanding of \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><strong><span >\"</span></strong><span > (finally figured out the proxy for instance). Next time we will do the work and integrate it into the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >ECS</span></strong></a><strong><span >\" </span></strong>codebase</p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>",
            "image": "https://cryptoskillz.com/blog/media/posts/30/light.png",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-11-18T19:24:12+07:00",
            "date_modified": "2019-12-11T16:49:08+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/cart-refactor-and-serverless-mode.html",
            "url": "https://cryptoskillz.com/blog/cart-refactor-and-serverless-mode.html",
            "title": "Cart refactor and serverless mode",
            "summary": " IntroductionThis guide aims to program a website to accept Bitcoin. In the previous tutorial, we showed you how we create a test environment. This time we are going to recode the cart so that a front end dev can easily skin up new cart designs. We&hellip;",
            "content_html": "<h2 id=\"mcetoc_1dmt0knbc0\"> </h2>\n<h2 id=\"mcetoc_1dmo28s090\">Introduction</h2>\n<p>This guide aims to program a website to accept Bitcoin. In the previous tutorial, we showed you how we create a test environment. This time we are going to recode the cart so that a front end dev can easily skin up new cart designs.  We are also going to add a serverless mode. </p>\n<p><span >We were going to integrate lightning fully into \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a>\"</strong> via \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><span >\" but we noticed some critical bugs that had to be fixed when we added donation mode and everything else we have done expanded from those initial bugs.  The Lightning updates have been pushed back until next time.</span></p>\n<h2 id=\"mcetoc_1do79vraf0\">Serverless mode</h2>\n<p>It is worth discussing the serverless mode. When we originally envisioned this we thought it would work without a full node but it occurred to us if we do not have a full node we may not even require a server and that is what we coded this time around. Of course, it has limited use mainly donation mode as there is no way to store shipping information or email as we are not utilising a server but it will mean you can run \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a>\"</strong> from any static hosting website, which we think is pretty cool. </p>\n<p>We envisage that when complete \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a>\"</strong> will have 3 modes of operation:<br><br>1) Full Node (\"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a>\"</strong> or whatever <strong><a href=\"https://bitcoin.org/en/bitcoin-core/\" target=\"_blank\" rel=\"noopener noreferrer\">full node</a></strong> you chose) \"<strong><a href=\"https://github.com/cryptoskillz/ECS/tree/master/server\" target=\"_blank\" rel=\"noopener noreferrer\">ECS Server</a>\"</strong> and \"<strong><a href=\"https://github.com/cryptoskillz/ECS/tree/master/cdn\" target=\"_blank\" rel=\"noopener noreferrer\">ECS CDN</a>\"</strong> (sr.js)<br>2) No \"<strong><a href=\"https://bitcoin.org/en/bitcoin-core/\" target=\"_blank\" rel=\"noopener noreferrer\">full node\" </a></strong>+ \"<strong><a href=\"https://github.com/cryptoskillz/ECS/tree/master/server\" target=\"_blank\" rel=\"noopener noreferrer\">ECS Server</a>\"</strong> and \"<strong><a href=\"https://github.com/cryptoskillz/ECS/tree/master/cdn\" target=\"_blank\" rel=\"noopener noreferrer\">ECS CDN</a>\"</strong> (sr.js)<br>3) No \"<strong><a href=\"https://bitcoin.org/en/bitcoin-core/\" target=\"_blank\" rel=\"noopener noreferrer\">full node</a>\"</strong>, no \"<strong><a href=\"https://github.com/cryptoskillz/ECS/tree/master/server\" target=\"_blank\" rel=\"noopener noreferrer\">ECS Server</a>\"</strong> and \"<strong><a href=\"https://github.com/cryptoskillz/ECS/tree/master/cdn\" target=\"_blank\" rel=\"noopener noreferrer\">ECS CDN</a>\"</strong> (sr.js)</p>\n<h2 id=\"mcetoc_1do7er7b60\">Cart refactor</h2>\n<p>The cart when you break it down consists of 6 screens and can be as little as 2 depending on what mode you have the cart. Below you will see a simple mockup of each of these screens.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/29/cartscreen1.png\" alt=\"\" width=\"1978\" height=\"1173\"></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/29/cartscreen2b.png\" alt=\"\" width=\"1933\" height=\"1019\"></p>\n<h3 id=\"mcetoc_1dogmkh3l0\">Cart Icon</h3>\n<p>This is the entry point into the cart. It appears on the bottom right with a counter that goes up every time an item is added to it. Clicking on this icon opens the cart pop up. </p>\n<h3 id=\"mcetoc_1dogmkm7u1\">Product Cart Screen</h3>\n<p>The product cart screen shows the product(s) you are purchasing, allowing you to edit the quantity and/or delete a product. Note this is an optional screen it is not used in donation mode. </p>\n<h3 id=\"mcetoc_1dogmkqcg2\">Customer Info</h3>\n<p>The customer info screen shows a form to collect customer information such as an email and shipping address. Note this is an optional screen it is not used in donation mode and if you enable shipping you will see the shipping details otherwise you will just be asked to enter an email.</p>\n<h3 id=\"mcetoc_1dogml25c3\"><span style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\">Payment Screen</span></h3>\n<p>The payment screen is not used at present but it will hold the different payment options which will be Bitcoin and Lightning.</p>\n<h3 id=\"mcetoc_1dogmlan34\">Bitcoin / Lightning Payment</h3>\n<p>This screen shows a BTC / Lightning QR code and payment address so you can make the payment. </p>\n<h3 id=\"mcetoc_1dogmlf6v5\">Payment Confirmed</h3>\n<p>This screen is showing when a payment has been confirmed. As this is Bitcoin this is entirely optional. It polls the \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a>\"</strong> server looking for payment confirmation. However, once the user has sent the Bitcoin they can close the site and move on as this is the way things work in our world. No middle man is authorising the transaction, yay.</p>\n<h2 id=\"mcetoc_1dogmvk7f7\">The SQL</h2>\n<p>We made a change in the sessions table by adding 2 new fields and change the way it sits in the repo. We removed the db.db file from GIT and added it to the ignore as it was causing issues when we deployed to our production servers. We replaced this with a SQL file that you can use to create the database via a simple import command.</p>\n<h3 id=\"mcetoc_1dogmvhhe6\">sessioncountcheck</h3>\n<p>This is used as a counter to check how many times we have checked for payment for this session item. At the moment we have it set so we check 10000 times which means we are looking for a payment for 24 hours or so. If we still have not received the payment them we stop looking for it automatically. Of course, it can still be done via the admin control panel using the sweep feature.</p>\n<h3 id=\"mcetoc_1doh6rrgm0\"><strong>carttype</strong></h3>\n<p>This holds the carttype 0 for normal, 1 for anon, 2 for donation.  </p>\n<h3 id=\"mcetoc_1dooc0k0t0\">schema</h3>\n<p>Below is the schema of the table.</p>\n<p><code>CREATE TABLE \"sessions\"                                        </code><br><code>( `id` INTEGER PRIMARY KEY AUTOINCREMENT,                       <br>   `address` TEXT, `processed` INTEGER DEFAULT 0,                <br>   `swept` INTEGER DEFAULT 0, `userid` INTEGER,                  <br>   `net` INTEGER DEFAULT 1, `amount` TEXT DEFAULT 0,                 `paymenttype` INTEGER DEFAULT 1,                              <br>   `sessioncountcheck` INTEGER DEFAULT 0,                        <br>   `carttype` INTEGER DEFAULT 1                                  <br>)                                                               </code></p>\n<h2 id=\"mcetoc_1dogo3kf08\"> The Code</h2>\n<p><span >The branch for this release can be found \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/cdn\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\"</span></strong><span >.</span></p>\n<p><span >We are not going to break down every code change as there were a lot of bug fixes etc if you want to look at all the code changes then click \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/commits/refactoringcart/cdn\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\"</span></strong><span >. What we will do is break down each section and summaries/justify the changes, which seems like a much better way of doing things.</span></p>\n<h3 id=\"mcetoc_1doi5hu2a0\">CDN (sr.js)</h3>\n<p><span >We updated the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/cdn\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >CDN</span></strong></a><strong><span >\"</span></strong><span > to be able to handle serverless mode as well as fix several bugs that we introduced when we added the donation mode. The major change is in the </span><strong><span >INIT</span></strong><span > function.</span></p>\n<pre class=\"ke kf kg kh ki dv ge df\">SR.init([<br>\"https://ecstest.cryptoskillz.com/\",<br>15,<br>\"https://cryptoskillz.com/srcrypto/prod/demos/carts/default/\",<br>\"3\",<br>1,<br>\"GB\",<br>0,<br>\"\"<br>]);</pre>\n<p>Break down of the parmaters</p>\n<table style=\"width: 770px;\">\n<tbody>\n<tr>\n<td style=\"width: 73px;\">ID</td>\n<td style=\"width: 188px;\">Name</td>\n<td style=\"width: 267px;\">Value</td>\n<td style=\"width: 377px;\">Description</td>\n</tr>\n<tr>\n<td style=\"width: 73px;\">1</td>\n<td style=\"width: 188px;\">Server URL</td>\n<td style=\"width: 267px;\">https://ecstest.cryptoskillz.com/</td>\n<td style=\"width: 377px;\">Hold the URL of the ECS server</td>\n</tr>\n<tr>\n<td style=\"width: 73px;\">2</td>\n<td style=\"width: 188px;\">Quantity</td>\n<td style=\"width: 267px;\">15</td>\n<td style=\"width: 377px;\">Holds the quantity for the quantity dropdown</td>\n</tr>\n<tr>\n<td style=\"width: 73px;\">3</td>\n<td style=\"width: 188px;\">CDN Url</td>\n<td style=\"width: 267px;\">\n<p><a href=\"https://cryptoskillz.com/srcrypto/prod/\">https://cryptoskillz.com/srcrypto/<br>prod/</a>demos/carts/default/</p>\n</td>\n<td style=\"width: 377px;\">Hold the URL for the Cart theme</td>\n</tr>\n<tr>\n<td style=\"width: 73px;\">4</td>\n<td style=\"width: 188px;\"> User id</td>\n<td style=\"width: 267px;\">3</td>\n<td style=\"width: 377px;\">The ID of the account</td>\n</tr>\n<tr>\n<td style=\"width: 73px;\">5</td>\n<td style=\"width: 188px;\">Shipping address</td>\n<td style=\"width: 267px;\">1/0</td>\n<td style=\"width: 377px;\">Boolean to turn on/off shipping address</td>\n</tr>\n<tr>\n<td style=\"width: 73px;\">6</td>\n<td style=\"width: 188px;\"> Start Country</td>\n<td style=\"width: 267px;\"> GB</td>\n<td style=\"width: 377px;\">The default country for shipping address</td>\n</tr>\n<tr>\n<td style=\"width: 73px;\">7</td>\n<td style=\"width: 188px;\">Serverless </td>\n<td style=\"width: 267px;\">1/0</td>\n<td style=\"width: 377px;\">Boolean to turn on/off serverless mode</td>\n</tr>\n<tr>\n<td style=\"width: 73px;\">8</td>\n<td style=\"width: 188px;\"> BTC address</td>\n<td style=\"width: 267px;\"> 2N677tdA2xcYfkfC6b2HWfqir7P8bmkrwo3</td>\n<td style=\"width: 377px;\">Hold the payment address for serverless mode</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"mcetoc_1doipdpm40\"><br>THEME</h3>\n<p><span >We recoded the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/cdn/theme\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >theme</span></strong></a><strong><span >\"</span></strong><span > from the ground up it was pretty \"hard-wired\" into the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/cdn\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >CDN</span></strong></a><strong><span >\"</span></strong><span > and we wanted to have it obfuscate for 2 reasons:</span></p>\n<p><span >1) A front end designer could easily modify the cart</span></p>\n<p><span >2) It could be loaded into the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/cdn\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >CDN</span></strong></a><strong><span >\"</span></strong><span > from anywhere.</span></p>\n<p><span >we achieved this by simply passing in the root URL in the SR Init function and having 2 files \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/refactoringcart/cdn/theme/cart.css\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cart.css</span></strong></a><strong><span >\"</span></strong><span > and \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/refactoringcart/cdn/theme/cart.html\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cart.html</span></strong></a><strong><span >\"</span></strong><span > which hold all the CSS and HTML respectively.</span></p>\n<p><span >You can see a demo of the cart running \"</span><a target=\"_blank\" href=\"https://cryptoskillz.com/srcrypto/prod/demos/carts/default/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\"</span></strong><span >. We will be adding a lot of different cart designs in the future. </span></p>\n<h3 id=\"mcetoc_1doipdud41\">ADMIN</h3>\n<p><span >We upgraded the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/admin\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >admin</span></strong></a><strong><span >\"</span></strong><span > to allow it to work in multi-user mode to support our recently launched \"</span><a target=\"_blank\" href=\"https://cryptoskillz.com/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >SAAS version</span></strong></a><strong><span >\"</span></strong><span > of \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >ECS</span></strong></a><strong><span >\"</span></strong><span > as well adding more functionality. The admin area is not required as we added autopayment last time. However, this is limited in its scope and if you require more then you can use the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/admin\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >admin</span></strong></a><strong><span >\"</span></strong><span > area.</span></p>\n<p><span >However this \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/admin\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >admin</span></strong></a><strong><span >\"</span></strong><span > area is pretty basic, we have taken the concept of just enough development, it works but you may want to integrate it into your admin (via webhooks / API, etc) or code the features directly into the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/admin\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >admin</span></strong></a><strong><span >\"</span></strong><span > area. This is intentional as this meant primarily as a teaching project we did not want to spend too much of our resources on the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/admin\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >admin</span></strong></a><strong><span >\"</span></strong><span > area.</span></p>\n<h3 id=\"mcetoc_1doipe2mv2\">DEMOS</h3>\n<p><span >We created a new area called \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/refactoringcart/demos\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >demos</span></strong></a><strong><span >\"</span></strong><span > which allows you to see the cart in all its variations. You can see a demo of it \"</span><a target=\"_blank\" href=\"https://cryptoskillz.com/srcrypto/prod/demos/carts/default/index.html\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >here</span></strong></a><strong><span >\".  </span></strong><span >It contains 5 demos as shown in the screenshot below and each demo explains its purpose. </span></p>\n<p><img class=\"post__image\" style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\" src=\"https://cryptoskillz.com/blog/media/posts/29/Untitled.png\" alt=\"\" width=\"854\" height=\"409\"></p>\n<h2 id=\"mcetoc_1doiphgls3\">Conclusion</h2>\n<p>There we have it we set out to do full Lightning support via cyphernode and ended up refactoring the cart and adding a serverless mode. Coding is cool. Next time Lightning support for sure, friends. </p>\n<p> </p>\n<p> </p>\n<p> </p>",
            "image": "https://cryptoskillz.com/blog/media/posts/29/goran-ivos-iacpoKgpBAM-unsplash.jpg",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-11-03T17:39:29+07:00",
            "date_modified": "2019-11-05T17:18:33+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/setting-up-a-test-environment.html",
            "url": "https://cryptoskillz.com/blog/setting-up-a-test-environment.html",
            "title": "Setting up a test environment",
            "summary": "IntroductionThis guide aims to program a website to accept Bitcoin. In the previous tutorial, we added the donation mode to the CDN. This time we are going to go through the exact test environment we use locally. If you are a seasoned developer you will&hellip;",
            "content_html": "<h2 id=\"mcetoc_1dmt0knbc0\">Introduction</h2>\n<p>This guide aims to program a website to accept Bitcoin. In the previous tutorial, we added the donation mode to the CDN. This time we are going to go through the exact test environment we use locally. If you are a seasoned developer you will no doubt have your processes, practices and as such, you can skip the tutorial altogether but if you have tried to follow along from home and run into an issue or two this may prove to be of use to you.</p>\n<h2 id=\"mcetoc_1dmo29c291\"><strong>Test Environment</strong></h2>\n<p><span >We develop on a MAC so all the software that we use reflects, however, there are equivalents of we use on every operating system so if you use Windows or something else then please swap as necessary.</span></p>\n<p><span >Also there several prerequisites that we are going to assume you are already familiar this is not a how-to \"</span><a target=\"_blank\" href=\"https://nodejs.org/en/download/package-manager/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >install node.js</span></strong></a><strong><span >\"</span></strong><span > on your computer tutorial.</span></p>\n<p><span >OK we have that out of the way now let’s begin</span></p>\n<h2 id=\"mcetoc_1dmqd0a5b0\"><span style=\"font-weight: 400;\">Step 1: Setup</span></h2>\n<h3 id=\"mcetoc_1dmqd0j1k1\">TERMINAL</h3>\n<p><span style=\"font-weight: 400;\">Open a Finder window and click on applications and then utilities and you will see a terminal window as shown in the screenshot below. </span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/1.png\" alt=\"\" width=\"1886\" height=\"675\"> </p>\n<p><span style=\"font-weight: 400;\">This will open a terminal window, like the below</span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/2.png\" alt=\"\" width=\"1405\" height=\"952\"></p>\n<p><span style=\"font-weight: 400;\">Next, we have to open a second terminal window, to do this click shell followed by a new tab with basic profile </span></p>\n<h4 id=\"mcetoc_1dmqd2trj4\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/3.png\" alt=\"\" width=\"1439\" height=\"1060\"></h4>\n<p>This will give us 2 terminal windows.  The first one contains \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a></strong>\" and the new one will contain \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a></strong>\"</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/4.png\" alt=\"\" width=\"1401\" height=\"945\"></p>\n<p>Repeat the above so we have 3 terminal windows </p>\n<p>1) cyphernode</p>\n<p>2) ECS server</p>\n<p>3) ECS HTTP SERVER</p>\n<p>the screenshot below shows how they are laid out</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/10.png\" alt=\"\" width=\"1406\" height=\"944\"></p>\n<h3 id=\"mcetoc_1dmqd1npj2\">CYPHERNODE</h3>\n<p><span style=\"font-weight: 400;\"><span >First, let us create a new directory for \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><span >\". Click on the first terminal window and type the following command.</span><br></span></p>\n<pre class=\"ke kf kg kh ki dv ge df\">cd Documents/ </pre>\n<p><span style=\"font-weight: 400;\">Next, we follow the tutorial on how to create \"<strong><a href=\"https://cyphernode.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cyphernode</a></strong>\" \"<strong><a href=\"https://cryptoskillz.com/blog/working-with-fullnodes-part-5-cyphernode-ii.html\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></strong>\"</span></p>\n<p>If you did not (and why not) it is in the tutorial start \"<strong><a href=\"https://cyphernode.io/\">cyphernode</a></strong>\" by typing the following</p>\n<pre class=\"ke kf kg kh ki dv ge df\">./start.sh</pre>\n<p>You know it has run correctly when you can see the cyphernode admin which can be accessed in the following URL:</p>\n<p><a href=\"https://127.0.0.1/welcome\">https://127.0.0.1/welcome</a></p>\n<p>and you will see the following once you have logged in with the username and password you added during setup.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/cn.png\" alt=\"\" width=\"2281\" height=\"1323\"></p>\n<h3 id=\"mcetoc_1dmqd1vt83\">ECS</h3>\n<p><span style=\"font-weight: 400;\">Next, we have to install \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a></strong>\" to do click on the second shell window and type the following commands.</span></p>\n<pre class=\"ke kf kg kh ki dv ge df\">cd ..<br>mkdir ecs <br>cd ecs<br>git init<br>git remote add github <a href=\"https://github.com/cryptoskillz/ECS\">https://github.com/cryptoskillz/ECS<br></a>git pull github master</pre>\n<p>once the code has been pulled you will see something like the screenshot below.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/6.png\" alt=\"\" width=\"1399\" height=\"397\"></p>\n<p>Next, we have to create the .env file and we do this using the following commands</p>\n<pre class=\"ke kf kg kh ki dv ge df\">cd server/<br>cp .env_copy .env<br>nano .env</pre>\n<p> </p>\n<p>Next, you will see a screen like the one below simply change the RPCUSERNAME and RPCPASSWORD and then press CTRL+X and Y (to save the changes) and we are good to go.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/7.png\" alt=\"\" width=\"1377\" height=\"819\"></p>\n<p>You can use the code below if you want to copy and paste this into the .env file.</p>\n<pre class=\"ke kf kg kh ki dv ge df\">EMAILSMTP = <br>EMAILUSERNAME =<br>EMAILPASSWORD =<br>WALLETPASSPHRASE = ''<br>WALLET = 'spending01.dat'<br>NETWORK = 1<br>RPCUSERNAME = admin<br>RPCPASSWORD = password<br>RPCHOST = 127.0.0.1<br>RPCPORT = 18332<br>PORT = 3030<br>CONFIRMATIONS=1<br>STRIKEENDPOINT=<br>STRIKEAPIKEY=<br>LIGHTNETWORK=0<br>AUTOPAYMENT=0<br>AUTOPAYMENTTICK=600000</pre>\n<p>The  next step is to run it and check it works  by typing the following command.</p>\n<pre class=\"ke kf kg kh ki dv ge df\">node app.js</pre>\n<p>If it works you will see some output in the terminal, as shown below.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/8.png\" alt=\"\" width=\"1404\" height=\"231\"></p>\n<p>Now, we can and test it by opening chrome and going to the following URL</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><a href=\"http://127.0.0.1:3030/\">http://127.0.0.1:3030/</a></pre>\n<p>You will see a response from the server as shown below</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/9.png\" alt=\"\" width=\"1187\" height=\"734\"></p>\n<h3 id=\"mcetoc_1dmqm8rcd0\">CDN </h3>\n<p><span >to get the CDN working we have to click on the third window and install l an \"</span><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Npm_(software)\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >NPM package</span></strong></a><span >\" called \"</span><a target=\"_blank\" href=\"https://www.npmjs.com/package/http-server\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >http-server</span></strong></a><span >\" you can do this by typing the following:</span></p>\n<pre><code> npm install http-server -g\n</code></pre>\n<p><span >Next, we want to install a \"<strong><a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\" rel=\"noopener noreferrer\">CORS</a></strong>\" plugin, we use Chrome if you want to use another browser then you will have to find an equivalent product. You can do this by going to this \"</span><a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >URL</span></strong></a><span >\"</span></p>\n<p><span >Next, we run a server so we can server sr.js, etc and we do this by first of all making sure we are in the root of the \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a></strong>\" directory we created earlier as shown below</span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/11.png\" alt=\"\" width=\"1399\" height=\"898\"></p>\n<p> </p>\n<p>and type the following command</p>\n<pre class=\"ke kf kg kh ki dv ge df\">http-server</pre>\n<p>this will start a server running on port 8080 as shown in the screenshot below</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/12.png\" alt=\"\" width=\"1409\" height=\"903\"> </p>\n<p>and if we go to a browser and enter the following URL</p>\n<p><a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a></p>\n<p>We will see the output as shown in the screenshot below.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/13.png\" alt=\"\" width=\"1016\" height=\"756\"></p>\n<p> </p>\n<h3 id=\"mcetoc_1dmqndhdp0\">DEMO</h3>\n<p>Now we are going to run a demo make sure it is all working as excepted.</p>\n<p>Go to the following URL</p>\n<p><a href=\"http://127.0.0.1:8080/demos/donation.html#0\">http://127.0.0.1:8080/demos/donation.html#0</a></p>\n<p>and click the donation button and you will see the following: </p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/28/14.png\" alt=\"\" width=\"2527\" height=\"1302\"></p>\n<p>This means it has worked as excepted and generated a Bitcoin address and a QR for payment. If you were to send a payment to this (this is on testnet so do not send real BTC) you would see the rest of the checkout flow. </p>\n<h2 id=\"mcetoc_1dmqneipt1\">Conclusion</h2>\n<p><span >In this tutorial, we have set up a local test environment that gives us \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><span >\" and \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a></strong>\" both fully configured and running locally and running the donation demo. Next time we are going to loop back using \"</span><a target=\"_blank\" href=\"https://cyphernode.io/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >cyphernode</span></strong></a><span >\", this time adding full lightning support and removing strike. </span></p>\n<p> </p>\n<p> </p>",
            "image": "https://cryptoskillz.com/blog/media/posts/28/chuttersnap-pgfWIStWIfs-unsplash.jpg",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-10-11T12:29:32+07:00",
            "date_modified": "2019-11-05T17:18:41+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/adding-a-donation-mode-and-launching-the-saas-product.html",
            "url": "https://cryptoskillz.com/blog/adding-a-donation-mode-and-launching-the-saas-product.html",
            "title": "Adding a donation mode and launching the SAAS product",
            "summary": "IntroductionThis guide aims to program a website to accept Bitcoin. In the previous tutorial, we integrated “cyphernode” into our “ECS” (with “Lightning”). This time we are going to add what we are calling a donation mode as well as going live with out SAAS offering. That is&hellip;",
            "content_html": "<h2 id=\"mcetoc_1dmt0knbc0\">Introduction</h2>\n<p class=\"graf graf--p\">This guide aims to program a website to accept Bitcoin. In the previous tutorial, we integrated “<a href=\"https://cyphernode.io/\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">cyphernode</strong></a><strong class=\"markup--strong markup--p-strong\">” </strong>into our “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” (with “<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">Lightning</strong></a>”). This time we are going to add what we are calling a donation mode as well as going live with out SAAS offering.</p>\n<h2 id=\"mcetoc_1dlmf84h20\">Note on the SAAS offering.</h2>\n<p><span >That is right we are offering \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a></strong>\" as a \"<a href=\"https://en.wikipedia.org/wiki/Software_as_a_service\" target=\"_blank\" rel=\"noopener noreferrer\">SAAS</a>\" (software as a service) that we will host. This appears to go against everything that we have been doing up until this point and you are right it does. However we have learned that going to a fully hosted Bitcoin powered e-commerce store is hard, it is a big commitment. So we decided (seeing as we are the authors of this software) to make your first steps as easy as possible. So we created this super simple offering that will allow you to get up and running in a few minutes, made it completely free (forever) allowing you to get comfortable with how everything works and allowing you to move to your self-sovereign solution on your timescales.</span></p>\n<p><span >It is very much a scaled back offering, there is no admin for instance and as soon as you sell something the money is released to the BTC address you entered during sign up. This is very much by design as we want you to leave this service and host everything yourself as soon as possible and if we gave you every feature then you would never leave. </span></p>\n<p><span >If you would like to sign up for the SAAS offering then click \"</span><strong><a target=\"_blank\" href=\"https://cryptoskillz.com/\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\">here</a></strong><span >\"</span></p>\n<h2 id=\"mcetoc_1dlmh3vlv0\">The SQL</h2>\n<p>No changes this time</p>\n<h2 id=\"mcetoc_1dlmh4igp1\">The .ENV file</h2>\n<p>We cleaned this up, removed a lot of the unused stuff and combined even more.  It now looks like this:</p>\n<pre class=\"ke kf kg kh ki dv ge df\">EMAILSMTP = <br>EMAILUSERNAME = <br>EMAILPASSWORD = <br>WALLETPASSPHRASE = <br>WALLET =<br>NETWORK = <br>RPCUSERNAME = <br>RPCPASSWORD = <br>RPCHOST = <br>RPCPORT = <br>PORT = <br>CONFIRMATIONS=<br>STRIKEENDPOINT=<br>STRIKEAPIKEY=<br>LIGHTNETWORK=<br>AUTOPAYMENT=0<br>AUTOPAYMENTTICK=600000 </pre>\n<p>You will notice the addition of 2 new entries AUTOPAYMENT &amp; AUTOPAYMENTTICK. These are used to allow the SAAS offering to send out payments as soon as they come into the system.</p>\n<h2 id=\"mcetoc_1dlmhc0pe0\">The Code</h2>\n<p>The branch for the code for this release can be found \"<a href=\"https://github.com/cryptoskillz/ECS/tree/strikeintegration\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"></a><strong class=\"lu mg\"><a href=\"https://github.com/cryptoskillz/ECS/tree/donationmode2\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></strong>\"</p>\n<p>We made a few small changes to the \"<strong><a href=\"https://github.com/cryptoskillz/ECS/tree/donationmode2/server\" target=\"_blank\" rel=\"noopener noreferrer\">server</a></strong>\" section.</p>\n<p><strong>SERVER</strong></p>\n<p><strong>\"<a href=\"https://github.com/cryptoskillz/ECS/commits/donationmode2/server/app.js\" target=\"_blank\" rel=\"noopener noreferrer\">app.js</a>\"</strong></p>\n<p>The first change we made was created a root endpoint which shows us what the version is and if we are running on testnet or mainnet.  This is useful as we now maintain separate servers for both.</p>\n<pre class=\"ke kf kg kh ki dv ge df\">app.get(\"/\", (req, res) =&gt; {<br> let output = module.exports.name + \": \" + module.exports.version;<br> if (process.env.NETWORK == 2) output = output + \" connected to BTC mainnet \";<br> if (process.env.NETWORK == 1) output = output + \" connected to BTC testnet\";<br><br> res.send(JSON.stringify({ status: output }));<br>});</pre>\n<p><span >The next thing we did was add a check for payment function. This is a timer that checks the confirmations and releases payments for any sale in the sessions table. Note this can be disabled from the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/blob/donationmode2/server/.env_copy\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >.ENV</span></strong></a><span >\" file as discussed above. </span></p>\n<pre class=\"ke kf kg kh ki dv ge df\">function checkforPayment() {<br> //set the headers<br> //res = generic.setHeaders(res);<br> //load the api helper<br> let apihelper = require(\"./api/helpers/api.js\").api;<br> let api = new apihelper();<br> //call the login function<br> //console.log('tick')<br> api.checksessionforpayment();<br>}<br>/*<br>check if we want to do auto payment, we use this to handle the payments in the SASS mode. <br><br>It is disabled at the moment in time as it is causing time out error and some DB errors between test and mainnet. <br><br><br>*/<br>if (process.env.AUTOPAYMENT == 1)<br> setInterval(checkforPayment, process.env.AUTOPAYMENTTICK);</pre>\n<p><span > We made the following changes to the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/commits/donationmode2/cdn\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >CDN</span></strong></a><span >\" section</span></p>\n<p><span style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\">\"</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\"><a href=\"https://github.com/cryptoskillz/ECS/blob/donationmode2/cdn/js/sr.js\" target=\"_blank\" rel=\"noopener noreferrer\">sr.js</a></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;\">\"</span></p>\n<p>We added a new global var to hold the new cart type to allow donations.</p>\n<pre class=\"ke kf kg kh ki dv ge df\">//hold the cart type<br>//0 = normal cart<br>//1 = anon cart (to implement)<br>//2 = donation cart type<br>var cartytype = 0;</pre>\n<p>Then, we updated the add to cart function (which is when the user clicks the add button) and we check to see what mode we should launch the cart in.</p>\n<pre class=\"ke kf kg kh ki dv ge df\">//check if cart type has been set and if so override default.<br>if (elproduct.getAttribute(\"cart-type\") != null) {<br> cartytype = elproduct.getAttribute(\"cart-type\");<br>}<br><br>/*<br> check the cart type.<br> note we can (and shall) refactor this as we this is not required for cart type and if we add more in the future we ]<br> want this to funciton slicker.<br> */<br>if (cartytype == 0) {<br> //will update when we use multipile products<br> var productid = 1;<br> //todo<br> var previewpic = \"\";<br> //increment count (quantity)<br> if (itemcount &lt;= quantity) {<br> itemcount = itemcount + 1;<br> carttotal(price);<br><br> //show it<br> showClass(document.querySelector(\".sr-cart-container\"));<br><br> //add item to cart<br> var productlist = document.getElementById(\"sr-cartlistitems\");<br> var itemlist = document.createElement(\"li\");<br> itemlist.className = \"sr-product \";<br><br> //build produt<br> var prodcuthtml = \"\";<br> //display default image or the one supplied<br> if (preview == \"\") {<br> var prodcuthtml =<br> prodcuthtml +<br> '&lt;div class=\"sr-product-image\"&gt;&lt;a href=\"#0\"&gt;&lt;img src=\"' +<br> cdnurl +<br> 'img/sr-product-preview.png\" alt=\"placeholder\"&gt;&lt;/a&gt;&lt;/div&gt;';<br> } else {<br> var prodcuthtml =<br> prodcuthtml +<br> '&lt;div class=\"sr-product-image\"&gt;&lt;a href=\"#0\"&gt;&lt;img src=\"' +<br> preview +<br> '\" alt=\"placeholder\"&gt;&lt;/a&gt;&lt;/div&gt;';<br> }<br> //product name<br> prodcuthtml =<br> prodcuthtml + '&lt;div class=\"\"&gt;&lt;h3&gt;&lt;a href=\"#0\"&gt;' + name + \"&lt;/a&gt;&lt;/h3&gt;\";<br> //product price<br> prodcuthtml = prodcuthtml + '&lt;div class=\"sr-price\"&gt;' + price + \" BTC&lt;/div&gt;\";<br> //actions div<br> prodcuthtml = prodcuthtml + '&lt;div class=\"sr-actions\"&gt;';<br><br> //delete option<br> prodcuthtml =<br> prodcuthtml +<br> '&lt;a href=\"javascript:SR.deleteitem()\" class=\"sr-delete-item\"&gt;Delete&lt;/a&gt;';<br> prodcuthtml = prodcuthtml + '&lt;div class=\"sr-quantity\"&gt;';<br> //quantity label<br> //quantity select<br> prodcuthtml =<br> prodcuthtml +<br> '&lt;span class=\"select\"&gt;&lt;select id=\"sr-productquantity\" name=\"sr-productquantity\" onchange=\"SR.changequantity()\"&gt;';<br> var i = 0;<br> for (i = 1; i &lt; quantity; i++) {<br> if (i == itemcount)<br> prodcuthtml =<br> prodcuthtml + '&lt;option value=\"' + i + '\" selected&gt;' + i + \"&lt;/option&gt;\";<br> else<br> prodcuthtml =<br> prodcuthtml + '&lt;option value=\"' + i + '\"&gt;' + i + \"&lt;/option&gt;\";<br> }<br> prodcuthtml = prodcuthtml + \"&lt;/select&gt;&lt;/span&gt;\";<br> //end of quantiy div<br> var prodcuthtml = prodcuthtml + \"&lt;/div&gt;\";<br> //end of actions div<br> var prodcuthtml = prodcuthtml + \"&lt;/div&gt;\";<br> //end of products details div<br> var prodcuthtml = prodcuthtml + \"&lt;/div&gt;\";<br> //end of product div<br> //add to the list<br> itemlist.innerHTML = prodcuthtml;<br> // append to the end of theParent<br> productlist.innerHTML = prodcuthtml;<br> //note we have to fix this when we add multipile products.<br> //productlist.appendChild(itemlist);<br> }<br>} else {<br> //increment the itemcount as this is a one time donation then let us just set it to 1 for now.<br> //we could make this an incemental thing later.<br> itemcount = 1;<br> //open the container;<br> showClass(document.querySelector(\".sr-cart-container\"));<br> //render the cart state<br> cartstate(8);<br>}</pre>\n<p>Next, we udpate the cart state check to work with the new cart state variable</p>\n<pre class=\"ke kf kg kh ki dv ge df\"> if (cartytype == 2) {<br> hideClass(document.getElementById(\"sr-cart-container\"));<br>} else {<br> //see if the cart is open and toggle it<br> var res = hasClass(document.querySelector(\".sr-cart-container\"), \"cart-open\");<br> if (res == 1) {<br> //stop payment check<br> stopPaymentCheck();<br> //close it<br> removeClass(document.querySelector(\".sr-cart-container\"), \"cart-open\");<br> } else {<br> cartstate(1);<br> }<br>}</pre>\n<p> </p>\n<p><span >Lastly, we added a new state the </span><strong><span >cartstate</span></strong><span > function which is the function we use to render the cart.</span></p>\n<pre class=\"ke kf kg kh ki dv ge df\">case 8: //donaton mode<br> stopPaymentCheck();<br> hideClass(document.getElementById('sr-paid'));<br> hideClass(document.getElementById('sr-billing'));<br> hideClass(document.getElementById('sr-shipping'));<br> hideClass(document.getElementById('sr-cart-header'));<br> //hide the customer details<br> hideClass(document.getElementById('sr-customerdetailswrapper'));<br> //hide back button<br> hideClass(document.getElementById('sr-back-button'));<br> //hide the product details<br> hideClass(document.getElementById('sr-cartlistitems'));<br> //hide the check out button<br> hideClass(document.getElementById('sr-checkout'));<br> //open it<br> addClass(document.querySelector('.sr-cart-container'),'cart-open');<br> //show btc stuff <br> showClass(document.getElementById('sr-bitcoinaddresswrapper')); </pre>\n<p><strong>ADMIN</strong></p>\n<p><span >We added a user support pain to the \"</span><a target=\"_blank\" href=\"https://github.com/cryptoskillz/ECS/tree/donationmode2/admin\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener noreferrer\"><strong><span >admin</span></strong></a><span >\" section. We have not added the code as it is pretty straightforward does not require breaking down, especially as this is only really being used in the SAAS offering.</span></p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/27/23.png\" alt=\"\" width=\"2076\" height=\"609\"></p>\n<p> </p>\n<p><strong>DEMOS</strong></p>\n<p>We renamed the WWW section to demos ans this is where all the examples will go going forward.</p>\n<h3 id=\"mcetoc_1dm8gr8u70\">Donation demo</h3>\n<p>This demo shows the new donation mode which removes the adding of an address etc and makes a payment about as streamlined as it can get.</p>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/27/donationdemo.png\" alt=\"\" width=\"2488\" height=\"1229\"></p>\n<p>As you can see from the code below this is a small change of changing the cart type to put \"<strong><a href=\"https://github.com/cryptoskillz/ECS\" target=\"_blank\" rel=\"noopener noreferrer\">ECS</a></strong>\" into donation mode.  </p>\n<pre class=\"ke kf kg kh ki dv ge df\"><code>&lt;a href=\"#0\"                                              </code><br><code>id=\"sr-add-to-cart\" </code><br><code>cart-type=\"2\" </code><br><code>class=\"sr-add-to-cart add-to-cart btn btn-primary\" </code><br><code> </code><br><code> </code><br><code>&gt;Donate&lt;/a&gt;</code></pre>\n<p id=\"mcetoc_1dm8joqdh0\">You can see the donation mode working at the following \"<strong><a href=\"https://cryptoskillz.com/demos/donation.html#0\" target=\"_blank\" rel=\"noopener noreferrer\">URL</a>\"</strong></p>\n<h2 id=\"mcetoc_1dm8h7mk01\">CONCLUSION</h2>\n<p>Now we have ECS running in a test and mainnet and launched a SAAS service to enourage people to accept payments on their websites in Bitcoin. Next time we are going to take a step back and review what it takes (revised) to get ECS up and running in your local enviorment</p>\n<p> </p>",
            "image": "https://cryptoskillz.com/blog/media/posts/27/alex-wong-2Ow2lfQQWY-unsplash.jpg",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-10-03T17:11:01+07:00",
            "date_modified": "2019-11-05T17:18:58+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/tronbet-switching-to-win.html",
            "url": "https://cryptoskillz.com/blog/tronbet-switching-to-win.html",
            "title": "Tronbet switching to WINK",
            "summary": "GIVE US YOUR BITCOIN ADVERTISEMENT STARTOnly joking, but not. We want your Bitcoin, any amount will do. We like Bitcoin and want more of it, so please give it to us. Click the button below to donate. Donate Wink have been true to their word&hellip;",
            "content_html": "<h2 id=\"mcetoc_1dmt0knbc0\">GIVE US YOUR BITCOIN ADVERTISEMENT START</h2>\n<p>Only joking, but not. We want your Bitcoin, any amount will do.  We like Bitcoin and want more of it, so please give it to us.  Click the button below to donate.</p>\n<p><a href=\"#0\" id=\"sr-add-to-cart\" cart-type=\"2\" class=\"sr-add-to-cart add-to-cart btn btn-primary\"    style=\"color: #000;\">Donate</a> </p>\n<h2 id=\"mcetoc_1dmt0knbc0\">GIVE US YOUR BITCOIN ADVERTISEMENT END</h2>\n<h2 id=\"mcetoc_1dler0rno0\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\">UPDATE </h2>\n<p><em>Wink have been true to their word and continued to deliver on their promises but unfortunately with Justin Sun seemingly massively involved and doing Justin Sun things, such as a 2 year (monthly airdrop) I fear this will have a long term negative impact on the whole project.  </em></p>\n<p><em>The team (although great technically) are horrible at marketing and a simple update leads to weeks of panic and speculation. They also have this odd methodology of releasing a press release, which is usually very ambiguous and requires clarification and instead of doing this they treat the press release as a work of Shakespearean art and refuse to give any more details (often these press releases are good news) resulting in them taking hell in their telegram channel for days or even weeks.</em></p>\n<p> </p>\n<p id=\"aa34\" >This quick article is an update to the “<a class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@cryptoskillz_58791/how-i-got-my-trx-for-free-using-tronbet-62f4b30f1ef7\"><strong class=\"mm nd\">how I got my tronbet for free</strong></a>” article I wrote some time ago. “<a href=\"https://www.tronbet.io/\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a>” is a gambling site with it’s own token that sits int he Tron network.</p>\n<p id=\"d7b2\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >They made a very important “<a class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@tronbethelp/ante-win-prepare-for-take-off-353d41b43401\"><strong class=\"mm nd\">announcement</strong></a><strong class=\"mm nd\">”</strong> yesterday which have rattled their community and rightly so.</p>\n<p id=\"2ed1\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >It is worth noting the last major change they made was moving to a platform so others could build upon their original dice game which lead to the live casino, slots, poker and soon sports betting. When they did this the plan was so ambitious that I did not think they could pull it off so I sold my ANTE (their token) for a decent profit and sat on the sidelines for a few months. Needless to say, hit every “<a href=\"https://cdn.tronbet.io/pdf/whitepaper_en.pdf\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">milestone</strong></a>” the price of ANTE rose and I bought back in. Sometime around then (I forgot the exact date) they built their own “<a href=\"https://trontrade.io/\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">exchange</strong></a>” as they were unhappy about the quality of the exchanges out there and this is now the default place to trade ANTE (this becomes important later) and (I believe) this is the largest ANTE trading exchange.</p>\n<h2 id=\"321b\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" ><strong class=\"cd\">So Skilz, the announcement what is it, why is the community going a little mental right now?</strong></h2>\n<p id=\"2d01\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Good question (me) basically it boils down the fact they are swapping their main token ANTE for one called WIN and then doing an AIRDROP for their LIVE (the casino token) with bonus WIN.</p>\n<p id=\"a862\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >In the crypto space, we are used to exit scams and I am in no way saying this is what Tronebt is doing. They have never seemed like this is their end goal but the fact remains we have been burned enough and there are enough deltas (things they have done) that as an ANTE holder you should rightly be nervous.</p>\n<h2 id=\"36fb\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Wow, this sounds great Skillz, is this just a case of the internet being scared of changing and yelling at it like they always do?</h2>\n<p id=\"ffae\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Yes and no. You see the switching to a new token (WIN) is smart for a number of reasons</p>\n<ol class=\"\">\n<li id=\"3329\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx si nz oa\" >They started with one DICE game and it gave you ANTE.</li>\n<li id=\"6d68\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >They then added a few more games RING etc which also gave you ANTE</li>\n<li id=\"9410\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >They then launched their first APP a casino which gave you LIVE for playing it</li>\n<li id=\"bc15\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >You earn a dividend for holding LIVE and a % of this dividend also goes to the ANTE pool.</li>\n<li id=\"e6f5\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >They Launched Poker in Alpha and this was supposed to charge a rake and payout dividends to ANTE holders.</li>\n<li id=\"6247\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >They announced sports betting as their second partner app presumably with a new token (it has not been announced yet)</li>\n</ol>\n<p id=\"9b15\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Around point 5 the poker release is where I think they started to have discussions about this change and it makes logical sense as ANTE is doing 2 things it is mining and being the primary token for receiving dividends from the partner apps and to me, this just felt wrong</p>\n<p id=\"2c87\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >It is worth noting that poker has stayed in alpha for a long time even though it is a great piece of software the reason I think they did this is that they were not sure how to monetise which eventually led to the WIN token creation.</p>\n<h2 id=\"686c\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >How is WIN different?</h2>\n<p id=\"f508\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >excellent questions (me) it basically comes down to this line from their announcement.</p>\n<blockquote class=\"sj sk sl\">\n<p id=\"f2f7\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" ><em class=\"ba\">WIN </em><strong class=\"mm nd\"><em class=\"ba\">cannot be mined</em></strong><em class=\"ba\"> and can only be </em><strong class=\"mm nd\"><em class=\"ba\">purchased on exchange</em></strong></p>\n</blockquote>\n<p id=\"ec62\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >This means it is a token created to be used on the base platform that is separate from every other token they launch on the platform and keeps things nice and clean. Of this, I approve. What I disapprove if is how they did it.</p>\n<h2 id=\"6949\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Ok, let us know how did they F this one up?</h2>\n<p id=\"2a07\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Basically, they launched it with the following article on “<a class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@tronbethelp/ante-win-prepare-for-take-off-353d41b43401\"><strong class=\"mm nd\">medium</strong></a>” and did a number of naughty things</p>\n<p id=\"3f94\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" ><strong class=\"mm nd\">1: Changing the freeze period</strong></p>\n<blockquote class=\"sj sk sl\">\n<p id=\"9fd4\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" >Beginning from this announcement, unfreezing ANTE will be <strong class=\"mm nd\">changed from 24 hours to 10 days.</strong></p>\n</blockquote>\n<p id=\"dba2\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >This basically said we are changing to the WIN token and anyone who has frozen ANTE can do nothing about it. You have to trust we know what we are doing it will all work out in the end.</p>\n<p id=\"8c3d\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Now, this sucks remember further up the article when I did not think they could hit their milestones sold my ANTE and sat on the sidelines. This was my decision and when they hit their milestones I bought back in around (15 TRX) and I had sold at 12 TRX and I was happy to do this as with all the milestones they crushed it was worth more (so I paid more). Now other people like the iron-willed Tommy Moustache (if you are ever in a war you want this man on your side, trust me) did not sell and made a greater return than me over that period again (and this is crucially important) this was his decision to make.</p>\n<p id=\"87b2\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >The reason I am in crypto (and also a lot of other people) is that we want to be in control of our money if we make a dumb decision it is on us. Tronbet took that decision away from us by moving the unfreeze period to 10 days.</p>\n<h2 id=\"3578\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >2: The haircut</h2>\n<blockquote class=\"sj sk sl\">\n<p id=\"3577\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" >ANTE frozen <strong class=\"mm nd\">before END STAGE will be rewarded 100% of the WIN exchange rate</strong>. ANTE frozen <strong class=\"mm nd\">after END STAGE will be rewarded 70% of the WIN exchange rate.</strong></p>\n</blockquote>\n<p id=\"9234\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >That’s right they announcement something with no notice on July 18th and if have unfrozen ANTE that you do not freeze (then they are locked up for 10 days remember) they are going to give you a 30% haircut on your investment. God forbid you have a life and went camping for a long weekend!</p>\n<h2 id=\"92a9\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >3: The exchange</h2>\n<p id=\"b4b9\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Remember Tronbet own the major exchange which no doubt makes them a decent profit and with the surge in demand for ANTE (created by them) is making them even more.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/26/1.png\" alt=\"\" width=\"2842\" height=\"925\"></p>\n<p id=\"03ab\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >As you can see ANTE is up (45%) in a day and someone is on the other side of the trade who could it be? it is not the loyal community who trusted Tronbet and froze their ante as you can see below those 74 million ANTE tokens that are frozen and belong to people who cannot unfreeze for the next 10 days.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/26/2.png\" alt=\"\" width=\"1698\" height=\"1146\"></p>\n<p id=\"6a46\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >So it is either the devs (nice payday for them) or the lucky few who simply trade and do not freeze (which is in the minority) but there are people on the other side of those ANTE buy orders.</p>\n<h2 id=\"90ca\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >4: Lack of clarity about the WIN token</h2>\n<p id=\"5d2f\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >We know very little about the WIN token. How many are there? What will the swap be, were will it be exchanged, how long before we can sell it?</p>\n<p id=\"bac1\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Again this is a case of “trust us guys we got you”</p>\n<h2 id=\"9b64\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >5: Is it a premine?</h2>\n<p id=\"3c29\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >One of the great things about the ANTE is the devs earned it as we mined but this vague line seems to state they will premine it this time (could be wrong) and requires further explanation.</p>\n<blockquote class=\"sj sk sl\">\n<p id=\"ffa3\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" >Developers will no longer freeze any tokens for dividends, and will instead be taken directly from WIN pool.</p>\n</blockquote>\n<h2 id=\"9cc0\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >6: step 2</h2>\n<blockquote class=\"sj sk sl\">\n<p id=\"7c7b\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" ><strong class=\"mm nd\"><em class=\"ba\">Mission Briefing (STEP 2) : Announcement on Twitter (TBA)</em></strong></p>\n</blockquote>\n<p id=\"868e\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Trust us guys we got you.</p>\n<h2 id=\"d1b2\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >7: step 3</h2>\n<blockquote class=\"sj sk sl\">\n<p id=\"829b\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" ><strong class=\"mm nd\"><em class=\"ba\">Engines On (STEP 3) : Houston! Get ready for take-off! (TBA)</em></strong></p>\n</blockquote>\n<p id=\"9f84\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Trust us guys we got you.</p>\n<h1 id=\"de04\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Conclusion</h1>\n<p id=\"77c3\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >I will leave it with the following conclusion in a question and answer format.</p>\n<h2 id=\"ef0f\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Do I think this is an exit scam?</h2>\n<p id=\"dce5\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >No (70% probability)</p>\n<h2 id=\"bb9a\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Do I think this has been done a way that could have been handled better?</h2>\n<p id=\"436a\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Yes</p>\n<h2 id=\"0584\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Will you sell your WIN when released?</h2>\n<p id=\"6729\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Depends on certain factors how much is it worth, did Tronbet earn back my trust but at this moment but if you pushed me for an answer it would be yes as I do not like anyone freezing my money EVER.</p>\n<h2 id=\"dbcb\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >What is your exposure?</h2>\n<p id=\"8cd7\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >1% of my portfolio.</p>",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-09-23T17:40:10+07:00",
            "date_modified": "2019-11-05T17:12:16+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/how-i-got-my-trx-for-free-using-tronbet.html",
            "url": "https://cryptoskillz.com/blog/how-i-got-my-trx-for-free-using-tronbet.html",
            "title": "How I got my TRX for free using Tronbet",
            "summary": " This is gambling, do not do use this site. We have no idea how fair their game is, we have no idea who is behind the game. It requires new players to constantly enter the ecosystem (and lose) to make the dividend payouts work.",
            "content_html": "<p> </p>\n<h1 id=\"7e71\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Disclaimer</h1>\n<p id=\"12c6\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >This is gambling, do not do use this site. We have no idea how fair their game is, we have no idea who is behind the game. It requires new players to constantly enter the ecosystem (and lose) to make the dividend payouts work.</p>\n<p id=\"14e3\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >I did it as I have a decent chunk invested in <strong class=\"mm nd\">TRX</strong> as one of my research projects and in this scenario, I am always looking for ways to get that initial investment out and freeroll it. I saw <a href=\"https://www.tronbet.io/?r=cryptoskillz\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a> as a way to do this and dedicated 10% of my <strong class=\"mm nd\">TRX</strong> investment to see if I could get my total investment back.</p>\n<p id=\"c5b3\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Really do not do this I started at stage 1 level 1, and it is now stage 1 level 6 it costs a lot more to mine the “<strong class=\"mm nd\">ante</strong>” and the payout will continue to decrease as the game goes on.</p>\n<p id=\"b58b\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >The link to <a href=\"https://www.tronbet.io/?r=cryptoskillz\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a> in this article is an affiliate link and if you do play (<strong class=\"mm nd\">do not play</strong>) I will get a % of your bets as a way of referral. If you would rather that I did not get this referral I understand simply go directly to the site <a href=\"https://www.tronbet.io/#/\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.tronbet.io/#/</a>.</p>\n<p > </p>\n<h1 id=\"9eca\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Update 1</h1>\n<p id=\"ad8d\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >My laptop died on me and of course, I had not backed up my private keys, well I had but my opsec was not good enough but that is another story. Anyway, I lost the ANTE. I was able to reload and earn the same ante back (though it was not as profitable as I was on stage 1:6 at the time)</p>\n<p > </p>\n<h1 id=\"cd66\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Update 2</h1>\n<p id=\"e13a\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >I got my original ante back so now I have twice as much ANTE :)</p>\n<p > </p>\n<h1 id=\"bdfc\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Update 3</h1>\n<p id=\"787f\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" ><span style=\"text-decoration: underline;\">After</span> the crypto price crash and the fact that tronbet changed their payout to frozen ante as well as 1.5x ante payout, it is not profitable to be mining ANTE again so I will be doing so for the next 24 hours.</p>\n<p > </p>\n<h1 id=\"bdfc\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Update 4</h1>\n<p>Ante is now called <a href=\"https://www.wink.org/#/\" target=\"_blank\" rel=\"noopener noreferrer\">wink</a> and what a lot of fun that changes was read about it <a href=\"https://cryptoskillz.com/blog/tronbet-switching-to-win.html\">here</a>. </p>\n<p> </p>\n<h1 id=\"8ba0\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >The Premise</h1>\n<p id=\"1242\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" ><a href=\"https://www.tronbet.io/?r=cryptoskillz\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a> is a simple dice rolling game that pays you an “<strong class=\"mm nd\">ante</strong>” for every time you play based on how much <strong class=\"mm nd\">TRX</strong> you wagered and the current rate of TRX to ante (which of writing it 1100 <strong class=\"mm nd\">TRX</strong> to one “<strong class=\"mm nd\">ante</strong>”).</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/1.png\" alt=\"\" width=\"1741\" height=\"721\"></p>\n<p id=\"b75b\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >As you can see from the screenshot above it pays out 153 per 100 presently or 1.5 per “<strong class=\"mm nd\">ante</strong>”. The screenshot below shows an estimated payout over time.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/2.png\" alt=\"\" width=\"1765\" height=\"1035\"></p>\n<p id=\"2264\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >There is 100 million total “<strong class=\"mm nd\">ante</strong>” to be mined which means the end price for 1 “<strong class=\"mm nd\">ante</strong>” is very very low (I won’t bore you with the mathematics of it). The developers are claiming more games that the same “<strong class=\"mm nd\">ante</strong>” is going to be used for ad revenue etc. I have discounted all of this and will factor them into my calculations as (and if) they actually appear.</p>\n<p > </p>\n<h1 id=\"3b50\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >The Methodology</h1>\n<p id=\"99d2\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >So we have a decreasing payout that requires people to lose in order for dividends to be paid, how did this become a profitable endeavour?</p>\n<p id=\"9b01\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Simply put I used the above chart to figure out how many ante I required to break even then I decided on a sum of TRX I was happy to lose (10% of my total holdings) and set my bet amount to 1/40th of this amount.</p>\n<h2 id=\"7580\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Why 1/40th?</h2>\n<p id=\"946d\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >1/40th is very important as with the methodology I implemented we have to be able to lose 7 concurrent rolls and not fall victim to <a href=\"https://en.wikipedia.org/wiki/Gambler%27s_ruin\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\">gamblers ruin</a>.</p>\n<p id=\"30b3\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Then it is really quite simple you set your bet amount, set the slider to 90 and click roll under. Simply repeat this process until you lose. As you can see you have a 90% chance of winning and you being paid out just under that (that’s the house edge)<br>*note I did not start at 10 <strong class=\"mm nd\">TRX</strong></p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/3.png\" alt=\"\" width=\"2182\" height=\"1276\"></p>\n<p id=\"dd33\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Once you lose (and you will lose it is a mathematical certainty) we switch to the <a href=\"https://en.wikipedia.org/wiki/Martingale_(betting_system)\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">martingale</strong></a> method which basically means we move the slider to 49 and roll again, if we lose we double the bet hit (x2) and repeat until we have either lost 7 straight rolls or doubled up. This is shown in the screenshot below.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/4.png\" alt=\"\" width=\"2032\" height=\"1172\"></p>\n<p > </p>\n<p id=\"0403\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >What we are in effect doing is using a very low-risk strategy to do the majority of our bets and then invoking a very high-risk strategy to recover our lost bet. With <mark class=\"op oq or\">the</mark> added bonus of the “<strong class=\"mm nd\">ante”</strong>, this makes this strategy <a href=\"https://www.pokerlistings.com/strategy/expected-value-ev-explained\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\">+ev</a>. Though it will not always be +ev because of the increased cost of the “<strong class=\"mm nd\">ante</strong>” over time.</p>\n<p id=\"0e36\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >There are ways to be more aggressive such</p>\n<ul class=\"\">\n<li id=\"6522\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx ny nz oa\" >Double bet until the win or you go broke</li>\n<li id=\"cab3\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx ny nz oa\" >20x starting balance (bigger bets)</li>\n<li id=\"12c7\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx ny nz oa\" >change the slider to be less than 90.</li>\n</ul>\n<p id=\"8b30\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >There are also a number of ways to refine this strategy and increase your win rate, although I did not employ them as they required too much time to be dedicated to the strategy whilst playing.</p>\n<ul class=\"\">\n<li id=\"855a\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx ny nz oa\" >switch between roll over 9 and roll under 90 depending on the how the numbers are rolling (low or high)</li>\n<li id=\"b9a8\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx ny nz oa\" >On your first loss change the roll under to roll over based on how the numbers are rolling</li>\n</ul>\n<p> </p>\n<h1 id=\"cddd\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >SUPER DUPER IMPORTANT</h1>\n<p id=\"71ad\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >WHEN YOU REACH YOUR DESIRED ANTE LEVEL OR WHEN IT BECOMES UNPROFITABLE TO ROLL YOU HAVE TO <strong class=\"mm nd\">STOP</strong>. FAILURE TO DO SO MEANS YOU ARE JUST GAMBLING AND YOU WILL BECOME ONE OF THE PEOPLE WHO PAYS THE DIVIDENDS OUT TO THE PROFITABLE PLAYERS INSTEAD OF BEING THE PROFITABLE PLAYER THAT RECEIVES THE DIVIDENDS.</p>\n<p > </p>\n<h1 id=\"d535\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Conclusion</h1>\n<p id=\"be49\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Using the above method I reached my desired “<strong class=\"mm nd\">ante</strong>” level in about 3 days withdrew my initial 10% TRX investment (with another 20% in winnings) and I will be on course (at current payout levels) to have recouped my entire TRX investment in 24 days. I have had 4 payouts already and they have all been paid on time. Well done <a href=\"https://www.tronbet.io/?r=cryptoskillz\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a> devs.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/5.png\" alt=\"\" width=\"1800\" height=\"1598\"></p>\n<p id=\"c582\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Of course, an exit scam, change of ante rules TRX surge in price etc can affect this outcome one way or another.</p>",
            "image": "https://cryptoskillz.com/blog/media/posts/25/1_qWm4r1QF9iNMDgPEb20U1Q.jpeg",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-09-23T17:28:14+07:00",
            "date_modified": "2019-10-10T23:27:48+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/working-with-fullnodes-part-7-cyphernode-iv.html",
            "url": "https://cryptoskillz.com/blog/working-with-fullnodes-part-7-cyphernode-iv.html",
            "title": "Cyphernode IV Hosting on digitalocean",
            "summary": "IntroductionThis guide aims to program a website to accept Bitcoin. In the previous tutorial, we integrated “cyphernode” into our “ECS” (with “Lightning”). This time we are going to host it on “digitalocean”. We are going to create 2 droplets one to hold “cyphernode” and the&hellip;",
            "content_html": "<h2 id=\"mcetoc_1dlaocgki0\" class=\"graf graf--h3\">Introduction</h2>\n<p class=\"graf graf--p\">This guide aims to program a website to accept Bitcoin. In the previous tutorial, we integrated “<a href=\"https://cyphernode.io/\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">cyphernode</strong></a><strong class=\"markup--strong markup--p-strong\">” </strong>into our “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” (with “<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">Lightning</strong></a>”). This time we are going to host it on “<a href=\"https://www.digitalocean.com/\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">digitalocean</strong></a>”.</p>\n<p class=\"graf graf--p\">We are going to create 2 droplets one to hold “<a href=\"https://cyphernode.io/\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">cyphernode</strong></a>” and the other to hold “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>”. We could keep them both in one instance but I prefer to use “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” as a proxy that we can have a main and test node and have one “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” to access both.</p>\n<h3 id=\"mcetoc_1dlan93jk2\" class=\"graf graf--h3\">Cyphernode droplet</h3>\n<h4 id=\"mcetoc_1dlan93jk3\" class=\"graf graf--h4\">step 1: create a droplet</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/1.png\" width=\"1600\" height=\"174\"></figure>\n<h4 id=\"mcetoc_1dlan93jk4\" class=\"graf graf--h4\">step 2: chose OS</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/2.png\" width=\"1600\" height=\"548\"></figure>\n<h4 id=\"mcetoc_1dlan93jk5\" class=\"graf graf--h4\">step 3: chose plan</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/3.png\" width=\"1600\" height=\"666\"></figure>\n<h4 id=\"mcetoc_1dlan93jk6\" class=\"graf graf--h4\">step 4: assign SSH</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/4.png\" width=\"1600\" height=\"460\"></figure>\n<h4 id=\"mcetoc_1dlan93jk7\" class=\"graf graf--h4\">step 5: create a droplet</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/5.png\" width=\"1600\" height=\"552\"></figure>\n<h4 id=\"mcetoc_1dlan93jk8\" class=\"graf graf--h4\">step 6: access droplet</h4>\n<p class=\"graf graf--p\">Copy the ipv4 address shown in the droplet admin</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/6.png\" width=\"1600\" height=\"503\"></figure>\n<h4 id=\"mcetoc_1dlan93jk9\" class=\"graf graf--h4\">step 7: connect via ssh</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/7.png\" width=\"1358\" height=\"979\"></figure>\n<h4 id=\"mcetoc_1dlan93jka\" class=\"graf graf--h4\">step 8: install docker</h4>\n<p class=\"graf graf--p\">note, this step was taken from the following “<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">guide</strong></a>”</p>\n<p class=\"graf graf--p\">First, update your existing list of packages:</p>\n<pre class=\"graf graf--pre\">sudo apt update</pre>\n<p class=\"graf graf--p\">Next, install a few prerequisite packages which let apt use packages over HTTPS:</p>\n<pre class=\"graf graf--pre\">sudo apt install apt-transport-https ca-certificates curl software-properties-common</pre>\n<p class=\"graf graf--p\">Then add the GPG key for the official Docker repository to your system:</p>\n<pre class=\"graf graf--pre\">curl -fsSL <a href=\"https://download.docker.com/linux/ubuntu/gpg\"  class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://download.docker.com/linux/ubuntu/gpg</a> | sudo apt-key add -</pre>\n<p class=\"graf graf--p\">Add the Docker repository to APT sources:</p>\n<pre class=\"graf graf--pre\">sudo add-apt-repository \"deb [arch=amd64] <a href=\"https://download.docker.com/linux/ubuntu\"  class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://download.docker.com/linux/ubuntu</a> bionic stable\"</pre>\n<p class=\"graf graf--p\">Next, update the package database with the Docker packages from the newly added repo:</p>\n<pre class=\"graf graf--pre\">sudo apt update</pre>\n<p class=\"graf graf--p\">Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:</p>\n<pre class=\"graf graf--pre\">apt-cache policy docker-ce</pre>\n<p class=\"graf graf--p\">You’ll see output like this, although the version number for Docker may be different:</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/8.png\" width=\"1247\" height=\"1028\"></figure>\n<p class=\"graf graf--p\">Finally, install Docker:</p>\n<pre class=\"graf graf--pre\">sudo apt install docker-ce</pre>\n<p class=\"graf graf--p\">Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it’s running:</p>\n<pre class=\"graf graf--pre\">sudo systemctl status docker</pre>\n<p class=\"graf graf--p\">The output should be similar to the following, showing that the service is active and running:</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/9.png\" width=\"1600\" height=\"363\"></figure>\n<p class=\"graf graf--p\">Installing Docker now gives you not just the Docker service (daemon) but also the docker command-line utility, or the Docker client. We’ll explore how to use the docker command later in this tutorial.</p>\n<p class=\"graf graf--p\">add your username to the docker group:</p>\n<pre class=\"graf graf--pre\">sudo usermod -aG docker ${USER}</pre>\n<p class=\"graf graf--p\">Apply the new group membership, log out of the server and back in, or type the following:</p>\n<pre class=\"graf graf--pre\">id -nG</pre>\n<h4 id=\"mcetoc_1dlan93jkb\" class=\"graf graf--h4\">step 9: install docker-compose</h4>\n<p class=\"graf graf--p\">note, this step was taken from the following “<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-16-04\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">guide</strong></a>”</p>\n<p class=\"graf graf--p\">Although we can install Docker Compose from the official Ubuntu repositories, it is several minor versions behind the latest release, so we’ll install Docker Compose from the Docker’s GitHub repository. The command below is slightly different than the one you’ll find on the Releases page. By using the -o flag to specify the output file first rather than redirecting the output, this syntax avoids running into a permission denied error caused when using sudo.</p>\n<p class=\"graf graf--p\">We’ll check the current release and if necessary, update it in the command below:</p>\n<pre class=\"graf graf--pre\">sudo curl -L <a href=\"https://github.com/docker/compose/releases/download/1.18.0/docker-compose-&#96;uname\"  class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname</a> -s`-`uname -m` -o /usr/local/bin/docker-compose</pre>\n<p class=\"graf graf--p\">Next, we’ll set the permissions:</p>\n<pre class=\"graf graf--pre\">sudo chmod +x /usr/local/bin/docker-compose</pre>\n<p class=\"graf graf--p\">Then we’ll verify that the installation was successful by checking the version:</p>\n<pre class=\"graf graf--pre\">docker-compose --version</pre>\n<p class=\"graf graf--p\">This will print out the version we installed:</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*x2nPIfMzjYrPmmmAxnQHGw.png\"   ></figure>\n<p class=\"graf graf--p graf--empty\"> </p>\n<h4 id=\"mcetoc_1dlan93jkc\" class=\"graf graf--h4\">step 10: Install cyphernode</h4>\n<p class=\"graf graf--p\">We are not going to document the cyphernode install process again you can review it “<a href=\"https://medium.com/bitcoin-e-commerce-development/part-19-cyphernode-ii-a2b01e8d702c\"  class=\"markup--anchor markup--p-anchor\" target=\"_blank\" rel=\"noopener noreferrer\"></a><strong><a href=\"https://cryptoskillz.com/blog/working-with-fullnodes-part-5-cyphernode-ii.html\">here</a></strong>” if you want to run through the whole process again. We install the BTC full node without Lightning as we want it to run on a 50 gig digitalocean box. We will add Lightning in a later article.</p>\n<h3 id=\"mcetoc_1dlan93jkd\" class=\"graf graf--h3\">ECS droplet</h3>\n<p class=\"graf graf--p\">Now we have to create a droplet for “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a><strong class=\"markup--strong markup--p-strong\">”</strong>. Repeat steps 1–5 from the previous installation (cyphernode droplet)</p>\n<h4 id=\"mcetoc_1dlan93jke\" class=\"graf graf--h4\">step 6: install node js</h4>\n<p class=\"graf graf--p\">note, this step was taken from the following “<a href=\"https://websiteforstudents.com/install-the-latest-node-js-and-nmp-packages-on-ubuntu-16-04-18-04-lts/\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">guide</strong></a>”</p>\n<p class=\"graf graf--p\">First, update your existing list of packages:</p>\n<pre class=\"graf graf--pre\">sudo apt install curl</pre>\n<p class=\"graf graf--p\">Install the repository that has the latest version of Node.js</p>\n<pre class=\"graf graf--pre\">curl -sL <a href=\"https://deb.nodesource.com/setup_10.x\"  class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://deb.nodesource.com/setup_10.x</a> | sudo bash -</pre>\n<p class=\"graf graf--p\">Install Node.js</p>\n<pre class=\"graf graf--pre\">sudo apt install nodejs</pre>\n<p class=\"graf graf--p\">After installing, both Node.js and NPM modules should be installed and ready to use.</p>\n<p class=\"graf graf--p\">You can use the commands below to view the version number installed.</p>\n<pre class=\"graf graf--pre\">node -v<br>npm -v</pre>\n<p class=\"graf graf--p\">and you will see something like the following screenshot</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/10.png\" width=\"817\" height=\"56\"></figure>\n<h4 id=\"mcetoc_1dlan93jkf\" class=\"graf graf--h4\">step 7: install ECS</h4>\n<p class=\"graf graf--p\">First, make a directory called server</p>\n<pre class=\"graf graf--pre\">mkdir server<br>cd server</pre>\n<p class=\"graf graf--p\">Next, great a git repo</p>\n<pre class=\"graf graf--pre\">git init</pre>\n<p class=\"graf graf--p\">Next, add the ECS repo</p>\n<pre class=\"graf graf--pre\">git remote add github https://github.com/cryptoskillz/ECS.git</pre>\n<p class=\"graf graf--p\">Next, pull the latest master branch</p>\n<pre class=\"graf graf--pre\">git pull github master</pre>\n<p class=\"graf graf--p\">Next, Go into the newly created server directory</p>\n<pre class=\"graf graf--pre\">cd server</pre>\n<p class=\"graf graf--p\">Create an .ENV file</p>\n<pre class=\"graf graf--pre\">nano .env</pre>\n<p class=\"graf graf--p\">Add the following and fill in with the correct details. </p>\n<blockquote class=\"graf graf--blockquote\">Note, the RPCHOST is the IP address of the first droplet we created. </blockquote>\n<pre class=\"graf graf--pre\">EMAILSMTP = <br>EMAILUSERNAME = <br>EMAILPASSWORD = <br>WALLETPASSPHRASE = <br>WALLET = 'spending01.dat'<br>RPCUSERNAME = <br>NETWORK = 1<br>LIGHTNETWORK=2<br>RPCUSERNAME =<br>RPCPASSWORD = <br>RPCHOST = 127.0.0.1 <br>RPCPORT = 18332<br>BLOCKIOKEY = <br>BLOCKIOSECRET = <br>PORT = 80<br>CONFIRMATIONS=1<br>STRIKEAPIKEY=<br>STRIKEENDPOINT=</pre>\n<p class=\"graf graf--p\">Run app.js and see if it is working.</p>\n<pre class=\"graf graf--pre\">node app.js</pre>\n<p class=\"graf graf--p\">Note, sometimes you may get the following error</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/0.png\" width=\"1600\" height=\"367\"></figure>\n<p class=\"graf graf--p\">We are not sure why this happens but “<a href=\"https://www.sqlite.org/index.html\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">sqllite</strong></a>” for some reason does not always install from the package.json file. If you run into this error then type the following</p>\n<pre class=\"graf graf--pre\">npm install sqlite3 --save</pre>\n<p class=\"graf graf--p\">If it has worked you will see the following</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/11.png\" width=\"1045\" height=\"140\"></figure>\n<p class=\"graf graf--p\">You will now be able to access the “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” API via the browser. Let us test this by going to the following URL</p>\n<p class=\"graf graf--p\">Note, replace the IP address with the one Digitalocean gave you.</p>\n<pre class=\"graf graf--pre\"><a href=\"http://157.245.13.93:3030/backoffice/test\"  class=\"markup--anchor markup--pre-anchor\" rel=\"noopener noreferrer\" target=\"_blank\">http://157.245.13.93:3030/backoffice/test</a></pre>\n<p class=\"graf graf--p\">If it worked you will see something like the following </p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/12.png\" width=\"1600\" height=\"535\"></figure>\n<p class=\"graf graf--p\">This is a test endpoint that shows us the actual block height the full node has synced to.</p>\n<h4 id=\"mcetoc_1dlan93jkg\" class=\"graf graf--h4\">step 8: install forever.js</h4>\n<p class=\"graf graf--p\">Now we want “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” to run even when we are not logged in and to do that we install a package called “forever.js”</p>\n<p class=\"graf graf--p\">First, stop “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” from running by pressing CTRL+C</p>\n<p class=\"graf graf--p\">Then, install forever.js</p>\n<pre class=\"graf graf--pre\">npm install forever -g</pre>\n<p class=\"graf graf--p\">Next, we want to start “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” and run it forever. The -w flag will restart the app.js if we change any of the files. Handy for when we update the code. </p>\n<pre class=\"graf graf--pre\">forever -w start app.js</pre>\n<p class=\"graf graf--p\">If it worked you will see the following output</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/13.png\" width=\"1466\" height=\"115\"></figure>\n<h3 id=\"mcetoc_1dlan93jkh\" class=\"graf graf--h3\">Conclusion</h3>\n<p class=\"graf graf--p\">Now we have ECS running on a cheap digitalocean box ($20 a month) and have cyphernode as our back end full node. We have everything we require to take payments in BTC and it is all working great. Next time we are going to do a 180 and update ECS to run with no full node at all, WHAT!</p>\n<p class=\"graf graf--p graf--empty\"> </p>\n<p class=\"graf graf--p graf--empty\"> </p>\n<p class=\"graf graf--p graf--empty\"> </p>\n<p class=\"graf graf--p graf--empty\"> </p>",
            "image": "https://cryptoskillz.com/blog/media/posts/23/download.png",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-09-22T03:21:11+07:00",
            "date_modified": "2019-11-20T23:13:54+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/working-with-fullnodes-part-6-cyphernode-iii.html",
            "url": "https://cryptoskillz.com/blog/working-with-fullnodes-part-6-cyphernode-iii.html",
            "title": "Cyphernode III setting up Lightning",
            "summary": " PreambleThis article aims to play with \"Lightning\" on the \"cyphernode\" backend as well as explorer \"docker\" and figure out how it all works with the proxy etc. Now, let us be upfront and clear we know nothing about \"docker\" we will be learning and as&hellip;",
            "content_html": "<h2 id=\"mcetoc_1dotge52m0\"> Preamble</h2>\n<article>\n<section class=\"jd je jf jg jh\">\n<div class=\"ae ji ab dn v w\">\n<p id=\"8793\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >This article aims to play with \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\" on the \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\" backend as well as explorer \"<a href=\"https://www.docker.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker</strong></a>\" and figure out how it all works with the proxy etc. Now, let us be upfront and clear we know nothing about \"<a href=\"https://www.docker.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker</strong></a>\" we will be learning and as we go and making a lot of mistakes and most probably doing everything wrong but that is ok, that is how we learn.</p>\n<p id=\"f05c\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Also, this is not essential reading as it is purely a research article offering tertiary information on our journey. If you like minuta then I am pretty sure you will enjoy this, for everyone else please just move on to the next article.</p>\n<h2 id=\"mcetoc_1dotgeg181\">Introduction</h2>\n<p id=\"8ce2\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >This guide aims to program a website to accept Bitcoin. In the previous tutorial, we integrated \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a><strong class=\"kf mh\">\" </strong>into our \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" (without \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\"). This time we are going to integrate \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\" and tie it into \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\".</p>\n<h2 id=\"mcetoc_1dotgesth2\">Installing cyphernode</h2>\n<p class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >We have done this a few times already so there is no reason to document the steps here again please refer to the previous \"<a class=\"cb bx md me mf mg\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/part-18-cyphernode-ab682ff85659\" rel=\"noopener noreferrer\"></a><strong class=\"kf mh\"><a href=\"https://cryptoskillz.com/blog/working-with-fullnodes-part-5-cyphernode-ii.html\">article</a></strong>\" for installation instructions. Note we are still on testnet but you may install testnet or mainnet.</p>\n<p id=\"b1f9\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><em class=\"mi\">Note, Presently you have to run a full node that is not pruned for \"</em><a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">Lightning</em></strong></a><em class=\"mi\">\" support so please make sure that you have 350gig of hard drive space available. Since \"</em><a href=\"https://bitcoin.org/en/release/v0.16.0\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">Bitcoin Core 0.16.0</em></strong></a><em class=\"mi\">\" with the introduction of \"</em><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">BIP 159</em></strong></a><em class=\"mi\">\" you have been able to run \"</em><a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">Lightning</em></strong></a><em class=\"mi\">\" in a pruned node and \"</em><a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">cyphernode</em></strong></a><em class=\"mi\">\" runs \"</em><a href=\"https://bitcoin.org/en/release/v0.18.0\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">Bitcoin Core 0.18.0</em></strong></a><em class=\"mi\">\" so we are sure that support for this will come soon.</em></p>\n<h2 id=\"433d\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\">Starting cyphernode</h2>\n<p id=\"e409\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >The first thing to do, as always is to start \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\" and you do that by type the following command in the \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\" installation directory.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"f57c\" class=\"mj lm bf av mk b dz ml mm l mn\" >./start.sh</span></pre>\n<p id=\"c252\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >First things first let us try the standard curl call we use to test things are running as excepted. Run the following command in terminal enter the password you set for RPC whilst setting up cyphernode.</p>\n<p id=\"56f1\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Note, we are using testnet so the port at the end is 18332 if you selected mainnet then you will have to change this to 8332.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"d185\" class=\"mj lm bf av mk b dz ml mm l mn\" >curl --user admin  --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }'     -H 'content-type: text/plain;' http://127.0.0.1:18332/</span></pre>\n<p id=\"8ec1\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >and you will get the following response.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_xCGv5lAgr1gaA5-Ja5N9qA.png\" alt=\"\" width=\"2493\" height=\"287\"></p>\n<p > </p>\n<h2 id=\"30e3\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\">Using Docker with cyphernode</h2>\n<p id=\"f5d2\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >Now let us test it by typing the command in the docs which can be found here.</p>\n<p id=\"aa69\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >The first command they list is this</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"28fd\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /getbestblockinfo\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -</span></pre>\n<p id=\"cab4\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Which will provide the following output</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_k_wYuHIap43PqBMO9fKAFw.png\" alt=\"\" width=\"2510\" height=\"688\"></p>\n<p id=\"a1e3\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >We are not 100% sure how this is working but we do know what is is doing it is running the proxy node in \"<a href=\"https://hub.docker.com/_/alpine\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">alpine</strong></a>\" which is a minimal Docker image based on Alpine Linux with a complete package index and only 5 MB in size!. Then it makes the API call (getbestblockinfo) through the proxy.</p>\n<p id=\"b129\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Ok, cool so now let us see what <strong class=\"kf mh\"><em class=\"mi\">getbestblockinfo</em></strong> is by looking at the cyphernode \"<a href=\"https://github.com/SatoshiPortal/cyphernode/blob/master/doc/API.v0.md\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">API reference</strong></a>\" which show the following</p>\n<blockquote class=\"ms mt mu\">\n<p id=\"4ce0\" class=\"kd ke bf mi kf b kg kh ki kj kk kl km kn ko kp kq\" >Get the Best Block Info (called by application)</p>\n<p id=\"6f85\" class=\"kd ke bf mi kf b kg kh ki kj kk kl km kn ko kp kq\" >Returns best block info: calls getblockinfo with bestblockhash.</p>\n</blockquote>\n<p id=\"155f\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >as you can see sho the \"<a href=\"https://github.com/SatoshiPortal/cyphernode/blob/master/doc/API.v0.md\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">API reference</strong></a><strong class=\"kf mh\">\"</strong> there are a number of API calls that we can take advantage of and a few more in \"<a href=\"https://github.com/SatoshiPortal/cyphernode/blob/master/doc/API.v1.md\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">V1</strong></a><strong class=\"kf mh\">\"</strong> of the API which as far as we can tell is not being used yet but it may be.</p>\n<p id=\"8f2a\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Alright now, let us run the other commands in the documentation to make sure the above was not a fluke.</p>\n<p id=\"c8a9\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">getbalance</strong></p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"df5c\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /getbalance\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -<br></span></pre>\n<p id=\"c592\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">getbestblockhash</strong></p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"2ad6\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /getbestblockhash\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -<br></span></pre>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_MDScTYTMvI66XOiBy99RgA.png\" alt=\"\" width=\"1911\" height=\"274\"></p>\n<p id=\"89d4\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">getblockinfo</strong></p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"06da\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /getblockinfo/00000000a64e0d1ae0c39166f4e8717a672daf3d61bf7bbb41b0f487fcae74d2\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -</span></pre>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_d6Wu4nEcgkOk852jXwBR8A.png\" alt=\"\" width=\"2499\" height=\"1052\"></p>\n<p id=\"5e47\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">ln_getinfo</strong></p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"fcf6\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /ln_getinfo\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -</span></pre>\n<p class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_N7O0v8qc9HZYT5KRnghzrg.png\" alt=\"\" width=\"1913\" height=\"942\"></p>\n<p id=\"8f2b\" >Wow, it works (awesome) so we can push any command in the API reference and get a response that way, very cool.</p>\n<h2 id=\"6ac6\" class=\"mj lm bf av au el nb nc nd ne nf ng nh ni nj nk nl\">To app or not to app</h2>\n<p id=\"2931\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >Now we have the above working we have a clear inflection point we can use the above infrastructure and rebuild \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" as a \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\" app, this is clearly the way want us to do and it and the way it has been built the framework is in place to allow us to do this fairly easily. However we want \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" to be agnostic we want it to work with \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\", \"<a href=\"https://store.casa/lightning-node/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">casa</strong></a><strong class=\"kf mh\">\"</strong>, \"<a href=\"https://www.nodl.it/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">nodl</strong></a>\" and whatever else is out there and to build the apps this way would seriously curtail our ability to do this.</p>\n<p id=\"58e2\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Also, we suck at using \"<a href=\"https://www.docker.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Docker</strong></a>\" at the moment so would not be confident everyone would not laugh at us if we attempted a 100% \"<a href=\"https://www.docker.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker</strong></a>\" implementation :]</p>\n<h2 id=\"5189\" class=\"mj lm bf av au el nb nc nd ne nf ng nh ni nj nk nl\" >playing with docker</h2>\n<p id=\"4793\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >right the first thing we want to do is see what is running we do this by running the \"<a href=\"https://docs.docker.com/engine/reference/commandline/ps/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">list containers command</strong></a><strong class=\"kf mh\">\"</strong> as shown below:</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"2b44\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker ps</span></pre>\n<p id=\"d7fc\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >You will get an output like the one below</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_Adh7RBY-53j7mbedr3b38g.png\" alt=\"\" width=\"2505\" height=\"699\"></p>\n<h3 id=\"mcetoc_1dotgh7eg3\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\">Log files</h3>\n<p>If you run into any issues type this and you will see any issues. </p>\n<p><code>docker-compose logs</code></p>\n<p>Note, most errors are caused when you switch between pruned and unprunded configs if this happens to you, simply delete/rename the testnet3/mainnet folder. </p>\n<p id=\"0697\" >as you can see all of the containers (cyphernode/bitcoin:v0.18.0) are running so let us see if we can talk to one of them.</p>\n<p id=\"fc6c\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">get getblockchaininfo</strong></p>\n<p id=\"57f3\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >We know that \"<a href=\"https://en.bitcoin.it/wiki/Running_Bitcoin\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">bitcoin-cli</strong></a><strong class=\"kf mh\">\" </strong>is running on the cyphernode/bitcoin:v0.18.0 so let us see if we can get that to give us some blockchain info. We can do this br running the \"<a href=\"https://docs.docker.com/engine/reference/commandline/exec/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker exec</strong></a>\" command. First cop the container ID from the output of docker ps. and type the following command:</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"4af9\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec 24efdf4f691a bitcoin-cli getblockchaininfo</span></pre>\n<p id=\"6bbd\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >and you should get the following output</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_0lgEue_e3ok1W7DOIIFMbQ.png\" alt=\"\" width=\"1255\" height=\"1333\"></p>\n<p id=\"ecff\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Awesome, so we can use the \"<a href=\"https://en.bitcoin.it/wiki/Running_Bitcoin\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">bitcoin-cli</strong></a><strong class=\"kf mh\">\" </strong>via docker.exec or the curl method which is awesome.</p>\n<p id=\"ab1f\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">get lightning info</strong></p>\n<p id=\"70aa\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Now, we are getting somewhere so now let us see if we can do the same with \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">lightning</strong></a>\". Run the following command with the \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">lightning</strong></a>\" container ID.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"1469\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec cf0b5d94ab8d lightning-cli</span></pre>\n<p id=\"e3ca\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >you will get the following output</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_mW1Xssi1jqPaDt7omJM-bw.png\" alt=\"\" width=\"1272\" height=\"516\"></p>\n<p id=\"bc17\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Hmm, that did not work as \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\" requires the working directory and we are not 100% sure where that is, no worries \"<a href=\"https://en.wikipedia.org/wiki/Grep\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">grep</strong></a>\" to the rescue. Run the following command.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"8d35\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec cf0b5d94ab8d grep .lightning</span></pre>\n<p id=\"c957\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >This will tell us that \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\" is in the following directory .<strong class=\"kf mh\"><em class=\"mi\">lightning </em></strong>so let us set that directory and try again by typing the following command.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"0844\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec cf0b5d94ab8d lightning-cli --lightning-dir=.lightning getinfo</span></pre>\n<p id=\"04ad\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >and we will get the following output</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_b_bbTEQeeAhNRv067PxoEw.png\" alt=\"\" width=\"1784\" height=\"1042\"></p>\n<p id=\"d304\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Yay, it works.</p>\n<h2 id=\"425a\" class=\"mj lm bf av au el nb nc nd ne nf ng nh ni nj nk nl\" >accessing the containers via the proxy</h2>\n<p id=\"3c21\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >Just for fun let us see if we can use the proxy. I say for fun as we will most likely be bypassing this for usecase when it gets to production.</p>\n<p id=\"c087\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >we can do this by running the following command of course you can use any of the API endpoints as described aboce</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"693f\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec 2b62aa57aa95 curl http://proxy:8888/getbestblockinfo</span></pre>\n<p id=\"74fe\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >and you will get the following result</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_2bWMRohqczIJmP6JEImwDA.png\" alt=\"\" width=\"2504\" height=\"436\"></p>\n<h2 id=\"4294\" class=\"mj lm bf av au el nb nc nd ne nf ng nh ni nj nk nl\" >docker final thoughts</h2>\n<p id=\"995b\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >To be fair docker is pretty cool once you get over the insane learning curve as we can see us using it more at cryptoskillz towers in the future.</p>\n<p id=\"b8a2\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >One thing we are not able to do yet is run an exec command with the container name instead of the container ID. We know for sure this is possible but we are just to dumb to have figured it out (just yet). This is a real problem as container IDs change on every start and stop.</p>\n<h2 id=\"f3e8\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\"><strong class=\"ch\">Using Docker commands with ECS</strong></h2>\n<p id=\"d56e\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >So now we have docker up and running it would be really cool if we could interface with it via \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" luckily we can do that.</p>\n<p id=\"9036\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >The latest branch that deals with code in this tutorial can be found \"<a href=\"https://github.com/cryptoskillz/ECS/tree/cyphernodeIII\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">here</strong></a>\"</p>\n<h2 id=\"6412\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\">Database base changes</h2>\n<p id=\"3ec9\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >None</p>\n<h2 id=\"a3fe\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\">Code Changes</h2>\n<p id=\"f3a5\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >we installed a new package called \"<a href=\"https://www.npmjs.com/package/docker-cli-js\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker-cli-js</strong></a>\" to handle our interactions with docker.</p>\n<p id=\"94cb\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><a href=\"https://github.com/cryptoskillz/ECS/blob/cyphernodeIII/server/light.js\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">light.js</strong></a></p>\n<p id=\"c479\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >This a new file we created (just for testing) we have not integrated into \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" any more than this at this moment of time.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"9662\" class=\"mj lm bf av mk b dz ml mm l mn\" ><br>var dockerCLI = require(\"docker-cli-js\");<br>var DockerOptions = dockerCLI.Options;<br>var Docker = dockerCLI.Docker;<br>var docker = new Docker();<br></span><span id=\"6f3d\" class=\"mj lm bf av mk b dz nw nx ny nz oa mm l mn\" >//call lightning container get info command<br>docker.command('exec 99a7103d7ab9 lightning-cli --lightning-dir=.lightning getinfo', function (err, data) <br>{<br> console.log('data = ', data);<br>});</span><span id=\"288e\" class=\"mj lm bf av mk b dz nw nx ny nz oa mm l mn\" >//call the proxy server to the get the balance<br>docker.command(<br>  'exec eaf667a5b8be curl   -H \"content-type: text/plain;\"  <a href=\"http://127.0.0.1:8888/ln_getinfo'\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8888/ln_getinfo'</a>,<br>  function(err, data) {<br>    console.log(\"data = \", data.raw);<br>  }<br>);</span><span id=\"3db3\" class=\"mj lm bf av mk b dz nw nx ny nz oa mm l mn\" >//calling the proxy server to get a balance<br>docker.command(<br>  'exec eaf667a5b8be curl   -H \"content-type: text/plain;\"  <a href=\"http://127.0.0.1:8888/getbalance'\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8888/getbalance'</a>,<br>  function(err, data) {<br>    console.log(\"data = \", data.raw);<br>  }<br>);</span></pre>\n<p id=\"5811\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Let us take a look and see what is happening with the above.</p>\n<p id=\"ccc3\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >The first block of code set up the docker package.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"ddc5\" class=\"mj lm bf av mk b dz ml mm l mn\" >var dockerCLI = require(\"docker-cli-js\");<br>var DockerOptions = dockerCLI.Options;<br>var Docker = dockerCLI.Docker;<br>var docker = new Docker();</span></pre>\n<p id=\"ae52\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >next, let us call the lightning container and get the info</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"34ef\" class=\"mj lm bf av mk b dz ml mm l mn\" >//call lightning container get info command<br>docker.command('exec 99a7103d7ab9 lightning-cli --lightning-dir=.lightning getinfo', function (err, data) <br>{<br> console.log('data = ', data);<br>});</span></pre>\n<p id=\"6efb\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Now, let us do the same thing but this time via the proxy</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"24de\" class=\"mj lm bf av mk b dz ml mm l mn\" >//call the proxy server to the get the balance<br>docker.command(<br>  'exec eaf667a5b8be curl   -H \"content-type: text/plain;\"  <a href=\"http://127.0.0.1:8888/ln_getinfo'\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8888/ln_getinfo'</a>,<br>  function(err, data) {<br>    console.log(\"data = \", data.raw);<br>  }<br>);</span></pre>\n<p id=\"6a4a\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Lastly, let us use the proxy to get the Bitcoin balance</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"a68b\" class=\"mj lm bf av mk b dz ml mm l mn\" >//calling the proxy server to get a balance<br>docker.command(<br>  'exec eaf667a5b8be curl   -H \"content-type: text/plain;\"  <a href=\"http://127.0.0.1:8888/getbalance'\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8888/getbalance'</a>,<br>  function(err, data) {<br>    console.log(\"data = \", data.raw);<br>  }<br>);</span></pre>\n<p id=\"604a\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >As you can see the commands above are exactly the same as we did from the command line (which is neat) so if we decide to go down this route (via proxy etc) it will be fairly trivial to implement.</p>\n<h2 id=\"7501\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\">Conclusion</h2>\n<p id=\"0ea3\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >There we have it, we have configured and implemented cyphernode into our overall software stack and interfaced it into \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\". This gives us a really powerful boost to our back end infrastructure. But, to level with you, this was one of the hardest things we have done yet in this series and I think a lot of that can be attributed to our lack of Docker knowledge.</p>\n<p id=\"be61\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Next time we will look to host \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" and cyphernode on a \"<a href=\"https://www.digitalocean.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">digitalocean</strong></a><strong class=\"kf mh\">\"</strong>server.</p>\n</div>\n</section>\n</article>",
            "image": "https://cryptoskillz.com/blog/media/posts/22/0_tnWANgeBqBWRZOxF.png",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-08-28T12:33:00+07:00",
            "date_modified": "2019-11-20T23:15:28+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/working-with-fullnodes-part-5-cyphernode-ii.html",
            "url": "https://cryptoskillz.com/blog/working-with-fullnodes-part-5-cyphernode-ii.html",
            "title": "Cyphernode II rebuilding it for ECS",
            "summary": "IntroductionThis guide aims to program a website to accept Bitcoin. In the previous tutorial, we set up and configured \"cyphernode\" which is an excellent dockerised bitcoin and lightning full node plus other useful. Now we are going to set it up to use specifically for our&hellip;",
            "content_html": "<h2 id=\"e317\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\">Introduction</h2>\n<p id=\"f921\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >This guide aims to program a website to accept Bitcoin. In the previous tutorial, we set up and configured \"<a href=\"https://cyphernode.io/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">cyphernode</strong></a><strong class=\"lu mg\">\" </strong>which is an excellent dockerised bitcoin and lightning full node plus other useful. Now we are going to set it up to use specifically for our requirements. Namely as a commerce backend for websites.</p>\n<h2 id=\"ac4d\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\">Configuring cyphernode</h2>\n<p id=\"b852\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >We are going to make a number of changes to the tutorial in the previous \"<a class=\"cb bx lb lc ld le\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/part-18-cyphernode-ab682ff85659\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">article</strong></a>\" which was simply showing how to get \"<a href=\"https://cyphernode.io/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">cyphernode</strong></a>\" working in its default set up.</p>\n<h3 id=\"51b2\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\">Remove Lightning</h3>\n<p id=\"fa43\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >As we do not natively support it yet</p>\n<h3 id=\"06f6\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\">Prune the blockchain</h3>\n<p id=\"af6f\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >As we are using it to do as a commerce server and every sale will we do is moved to our cold storage via a hardware wallet (such as \"<a href=\"https://www.ledgerwallet.com/products/12-ledger-nano-s\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\"><a href=\"https://cryptoskillz.com/blog/working-with-fullnodes-part-5-cyphernode-ii.html\">Ledger</a></strong></a>\") or a full node (such as \"<a href=\"https://store.casa/lightning-node/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">casa</strong></a>\") which has been built to be a store of value.</p>\n<h2 id=\"9991\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\">Building cyphernode</h2>\n<p id=\"cf78\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >Note, a number of these steps are a repetition of the previous \"<strong class=\"lu mg\">article</strong>\" but it is worth repeating as they change (although subtly) in a significant manner.</p>\n<p id=\"7799\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Open a terminal client (we use Macs) if you use Windows use \"<a href=\"https://www.putty.org/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">putty</strong></a><strong class=\"lu mg\">\"</strong> or whatever terminal client you are comfortable with.</p>\n<p id=\"3af2\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">Step 1: Create a directory</strong></p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"e0f8\" class=\"mh lg bf av my b dz mz na l nb\" >mkdir cyphernode &amp;&amp; cd cyphernode</span></pre>\n<p id=\"e81f\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">Step 2: Run quick install of cyphernode</strong></p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"4a7a\" class=\"mh lg bf av my b dz mz na l nb\" >curl -fsSL <a href=\"https://raw.githubusercontent.com/SatoshiPortal/cyphernode/master/dist/setup.sh\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">https://raw.githubusercontent.com/SatoshiPortal/cyphernode/master/dist/setup.sh</a> -o setup_cyphernode.sh &amp;&amp; chmod +x setup_cyphernode.sh &amp;&amp; ./setup_cyphernode.sh</span></pre>\n<p id=\"cd78\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">Step 3: run through cyphernode set up</strong></p>\n<p id=\"e0fc\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >The first thing you will see a progress window (as shown in the screenshot below) that is basically the cyphernode set up downloading everything it requires to complete the installation.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1.png\" alt=\"\" width=\"1728\" height=\"281\"></p>\n<p id=\"a70b\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, you will see is a prompt asking you for a password add one, obviously. Remember this password as it comes in handy (a lot) later.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_32xpgCDTEfRlPZc7kHvYeA.png\" alt=\"\" width=\"1405\" height=\"126\"></p>\n<p id=\"a3fe\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >After that you are presented with is the one below, press return as help is always good, right?</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/0_tvAQgJ-qh3uRdMgY.png\" alt=\"\" width=\"1400\" height=\"663\"></p>\n<p id=\"4a5a\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, it will prompt you to install extra software. We do not require either \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Lightning</strong></a>\" or \"<a href=\"https://github.com/opentimestamps/opentimestamps-client\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Opentimestamps client</strong></a>\" yet so just press return to move onto the next stage.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_wyFEHuAJgg3B8PY51rs1vQ.png\" alt=\"\" width=\"1127\" height=\"169\"></p>\n<p id=\"7827\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, we want to select Testnet as we are testing.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_P4DgFm_MaK9MeWGbXieYXg.png\" alt=\"\" width=\"1216\" height=\"154\"></p>\n<p id=\"0cdd\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, It asks to change user which is very good advice which we are going to ignore for the sake of simplicity. Go ahead and select N. </p>\n<p >Note the above it correct for local instances but if you are hosting on digitial ocean (or any provider for that matter) it will most likely be better if you select Y and create a new user (the default is cyphernode and you should go with this) otherwise you will most likely run into permission issues (espically with gatekeeper)</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_FS-e2QKY5ybkqVNaOkfRUg.png\" alt=\"\" width=\"1169\" height=\"260\"></p>\n<p id=\"8fb2\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, select \"N\". To be frank, we are still not 100% sure what is \"<a href=\"https://support.blockchain.com/hc/en-us/articles/360000939843-Understanding-the-xPub-and-address-generation\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">xPub</strong></a>\" is and until we do and can make an informed decision about it we are going to ignore its existence.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_sQSemJH9liax29ac84tvIw.png\" alt=\"\" width=\"1154\" height=\"233\"></p>\n<p id=\"5dcb\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, We have to give an encryption passphrase that gatekeeper will use for authentication. Go ahead and add one.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_9RdYsmKXAcqjfFidUyGdqQ.png\" alt=\"\" width=\"1190\" height=\"316\"></p>\n<p id=\"dc2b\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, select a port. 2009 is fine so just press return</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_R6iF_aXtV8vH5T_2MNfHQA.png\" alt=\"\" width=\"1197\" height=\"32\"></p>\n<p id=\"9bc8\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, set up the IP’s we are going to run everything over 127.0.0.1 for now so just press return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_Z88sXbsLw5OeGif5SvF0eQ.png\" alt=\"\" width=\"1245\" height=\"249\"></p>\n<p id=\"1824\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, Again press return as we are happy to route all traffic through port 80</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_VFi9nsHJY2UahMiNCbe2tQ.png\" alt=\"\" width=\"1160\" height=\"40\"></p>\n<p id=\"af86\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, press return as we want to https to be on the default port.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_zb4UXqnEZrridF6QWyanMA.png\" alt=\"\" width=\"1223\" height=\"34\"></p>\n<p id=\"4e6f\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Now, It is telling us it will look after the full node for us yay. Press return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_vz1oq2X8C9yUVM8j5gLGRQ.png\" alt=\"\" width=\"1248\" height=\"304\"></p>\n<p id=\"7fd6\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, we have to add an RPC username. \"admin\" is always good</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_BQwX_NXe6P-d_lCZtuJHEA.png\" alt=\"\" width=\"1149\" height=\"145\"></p>\n<p id=\"8bfb\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, we have to add an RPC password.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/pass.png\" alt=\"\" width=\"1075\" height=\"50\"></p>\n<p id=\"ed16\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, type \"Y’ as we want to run the full node in \"<a href=\"https://coinguides.org/bitcoin-blockchain-pruning/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">prune</strong></a>\" mode</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_nnXroHU5WM0GWbRnG3wutg-1.png\" alt=\"\" width=\"1153\" height=\"230\"></p>\n<p id=\"d936\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, we want to select 550 megabytes this is the default option so just press return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_HrOFqakZgRc_PVVBfrvaAg.png\" alt=\"\" width=\"1348\" height=\"180\"></p>\n<p id=\"fac3\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, you can add a UA comment here if you want (we did not)</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_ROeDTiEzmltDo1DXqc9_Kg.png\" alt=\"\" width=\"1085\" height=\"147\"></p>\n<p id=\"77db\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, Press return as we are presented with one option and luckily it is the option we want.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_D2w2SM1-T-WgCVNRlp62KQ.png\" alt=\"\" width=\"1291\" height=\"161\"></p>\n<p id=\"c324\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, you are going to be asked for the location of where to put the files just press return 4 times as the defaults are good and you will be presented with the below</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_CF3iKmOGsHV4qko4LI-k0Q-1.png\" alt=\"\" width=\"1284\" height=\"890\"></p>\n<p id=\"dad8\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, We do want to expose so press \"Y\" followed by return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_sJV62NV2s2Eu3sBjlE6uoA-1.png\" alt=\"\" width=\"1157\" height=\"42\"></p>\n<p id=\"f5f2\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Again, we are happy for the full node to expose itself so press \"Y\" and return again</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_OS7NSnWin3KnsVHJGEFOEg-1.png\" alt=\"\" width=\"1207\" height=\"202\"></p>\n<p id=\"1e1c\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, you want to choose from docker-compose or docker swarm. We selected docker-compose and suggest you do the same.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_4XdDfcRT71pNiqwt9YFI6Q.png\" alt=\"\" width=\"1174\" height=\"246\"></p>\n<p id=\"9e0c\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, type \"Y\" as it is always good to clean up after yourself.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_Dse884374fQRAddULzgjcg.png\" alt=\"\" width=\"1222\" height=\"169\"></p>\n<p id=\"101c\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Finally, you will see some output (like the screenshot below) that is the installation completed.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/2.png\" alt=\"\" width=\"1189\" height=\"472\"></p>\n<p id=\"8feb\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Once it is finished you will see the following</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/3.png\" alt=\"\" width=\"1368\" height=\"315\"></p>\n<p > </p>\n<h1 id=\"0f5f\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Useful things to know about cyphernode</h1>\n<p id=\"a3a9\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >Now we have been playing with cyphernode for a few weeks our understanding is growing and a result it makes sense to list the most common things that slowed us down in our studying of this excellent product.</p>\n<h2 id=\"8662\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\" >zipped files</h2>\n<p id=\"518a\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" ><strong class=\"lu mg\">client.7z<br></strong>Use your password you set at the being to unzip this and you will find the private keys for your wallets.</p>\n<p id=\"feb3\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">config.7z<br></strong>Again, use your password to unzip this and you will find a config file that you can use to build more versions of cyphernode with this configuration.</p>\n<p id=\"61ef\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">wallet directory<br></strong>There are 4 wallets referenced in the bitcoin.conf file and it is assumed (at this point) that are using some pattern to set the wallet names. Further experiment will show us what this pattern is.</p>\n<p id=\"6daa\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><em class=\"pc\">watching01.dat<br></em>not sure what this wallet is for our hunch is it may be for watch only nodes. We will have to research this further.</p>\n<p id=\"4c20\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><em class=\"pc\">xpubwatching01.dat<br></em>Not sure about this one either but we can infer from its name that it is to do with Xpub which we are also going to be looking into.</p>\n<p id=\"6c22\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><em class=\"pc\">spending01.dat<br></em>This is the main wallet file that full node uses</p>\n<p id=\"08a9\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><em class=\"pc\">ln01.dat<br></em>This is the wallet that the lightning node uses.</p>\n<h1 id=\"5dfa\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >ECS</h1>\n<p id=\"6773\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >It has been a while since we have actually slung some code for ECS and Bitcoin development moves at a steady clip so it is nice to get back and update it.</p>\n<p id=\"123d\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Our main goals for this code update is to make ECS support the latest version of \"<a href=\"https://bitcoin.org/en/bitcoin-core/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Bitcoin Core</strong></a>\" which at the time of writing this is 0.18.1.</p>\n<p id=\"4743\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >As we were replacing our cobbled together backend with the infinitely superior \"<a href=\"https://cyphernode.io/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">cyphernode</strong></a>\" we thought it would be prudent to make it agnostic at this point so it would work with any backend</p>\n<p id=\"3f81\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >The latest branch that deals with code in this tutorial can be found \"<a href=\"https://github.com/cryptoskillz/ECS/tree/part19-cyphernode-integration\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">here</strong></a>\"</p>\n<p id=\"d9e1\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >It is worth noting that we literately changed our entire back end here and because Bitcoin has been so awesomely programmed it took about a day and required about adding 10 lines of code. Working on e-commerce for well over a decade I know how hard this would have been using traditional e-commerce/banking/fintech architecture. We are really entertaining a golden time for payments.</p>\n<h2 id=\"d025\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\" >Database base changes</h2>\n<p id=\"dae9\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >None</p>\n<h2 id=\"34a4\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\" >Code Changes</h2>\n<p id=\"bba0\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >Apart from the odd bug fix here and there (which you can see by looking at the \"<a href=\"https://github.com/cryptoskillz/ECS/commits/part19-cyphernode-integration\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">commit history</strong></a>\" if you really want to) all of the refactorings we did was in the \"<a href=\"https://github.com/cryptoskillz/ECS/tree/part19-cyphernode-integration/server\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">server</strong></a>\" component. So let us go ahead and break down the changes we made.</p>\n<p id=\"28a0\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">\"</strong><a href=\"https://github.com/cryptoskillz/ECS/blob/part19-cyphernode-integration/server/.env_copy\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">.env </strong></a><strong class=\"lu mg\">\"changes</strong></p>\n<p id=\"71c6\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >As the concept of accounts has been \"<a href=\"https://github.com/bitcoin-dot-org/bitcoin.org/issues/1287\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">deprecated</strong></a>\" in the latest version bitcoin core we changed the env var to just hold the wallet.</p>\n<p id=\"6b6b\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Note there were 4 wallets that cyphernode created and with some trial and error we found out the one we want is called ‘spending01.dat’ so we preconfigured it to this in the env vars below.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"d9b6\" class=\"mh lg bf av my b dz mz na l nb\" >EMAILSMTP = <br>EMAILUSERNAME = <br>EMAILPASSWORD = <br>WALLETPASSPHRASE = <br>WALLET = 'spending01.dat'<br>RPCUSERNAME = <br>NETWORK = 1<br>LIGHTNETWORK=2<br>RPCUSERNAME =<br>RPCPASSWORD = <br>RPCHOST = 127.0.0.1 <br>RPCPORT = 18332<br>BLOCKIOKEY = <br>BLOCKIOSECRET = <br>PORT = 3030<br>CONFIRMATIONS=1<br>STRIKEAPIKEY=<br>STRIKEENDPOINT=</span></pre>\n<p id=\"21aa\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >\"<a href=\"https://github.com/cryptoskillz/ECS/blob/part19-cyphernode-integration/server/config.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">config.js</strong></a>\" changes</p>\n<p id=\"3d89\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >We upgraded \"<a href=\"https://www.npmjs.com/package/bitcoin-core\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">bitcoin cor</strong></a><strong class=\"lu mg\">e</strong>\" to 2.2.0 and it facilitated the name of the wallet we are using in the config parameter so we went ahead and did that. I would like an RPC call that returned the default wallet</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"e71b\" class=\"mh lg bf av my b dz mz na l nb\" >const Client = require(\"bitcoin-core\");<br>if (process.env.NETWORK == 1) {<br>  client = new Client({<br>    host: \"127.0.0.1\",<br>    port: 18332,<br>    wallet: process.env.WALLET,<br>    username: process.env.RPCUSERNAME,<br>    password: process.env.RPCPASSWORD<br>  });<br>}</span><span id=\"2a36\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >if (process.env.NETWORK == 2) {<br>  client = new Client({<br>    host: \"127.0.0.1\",<br>    port: 8332,<br>    wallet: process.env.WALLET,<br>    username: process.env.RPCUSERNAME,<br>    password: process.env.RPCPASSWORD<br>  });<br>}</span></pre>\n<p id=\"f4b4\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">\"</strong><a href=\"https://github.com/cryptoskillz/ECS/tree/part19-cyphernode-integration/server/api/helpers\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">api.js </strong></a><strong class=\"lu mg\">\"changes</strong></p>\n<p id=\"e556\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >We removed the account and passphrase code. We may add the passphrase option back in the future but it will have to be switchable so it works with backends that have encrypted wallets (or not)</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"2f51\" class=\"mh lg bf av my b dz mz na l nb\" >this.generateAddress = function generateAddress(uid, res) {<br>  //create a new address in theaccount account :]<br>  client.getNewAddress().then(address =&gt; {<br>    //debug<br>    //console.log(address);</span><span id=\"2f23\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >//insert it into the database<br>    db.run(<br>      `INSERT INTO sessions(address,userid,net) VALUES(?,?,?)`,<br>      [address, uid, process.env.NETWORK],<br>      function(err) {<br>        if (err) {<br>          //debug<br>          //return console.log(err.message);</span><span id=\"c126\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >//return error<br>          res.send(JSON.stringify({ error: err.message }));<br>          return;<br>        }<br>        //return the address<br>        res.send(JSON.stringify({ address: address }));<br>      }<br>    );<br>    return;<br>  });<br>};</span></pre>\n<p id=\"2ed8\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >We also recorded the sweep function to use the much simpler \"<a href=\"https://bitcoincore.org/en/doc/0.16.0/rpc/wallet/sendtoaddress/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">sendtoaddress</strong></a><strong class=\"lu mg\">\"</strong> function that was introduced in 0.16.0.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"138c\" class=\"mh lg bf av my b dz mz na l nb\" >this.sweep = function sweep(address, res) {<br>  let sqldata = [0];<br>  let sql = `select * from ecs_coldstorageaddresses where used = ?`;</span><span id=\"5062\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >//get a cold storage address<br>  db.get(sql, sqldata, (err, result) =&gt; {<br>    if (err) {<br>      return console.error(err.message);<br>    }<br>    //save the address<br>    var coldstorageaddress = result.address;<br>    client.listUnspent(1, 9999999, [address]).then(result =&gt; {<br>      //debug<br>      console.log(result[0]);<br>      if (result.length == 0) {<br>        //debug<br>        //console.log(result);<br>        res.send(<br>          JSON.stringify({<br>            result: \"nothing to sweep no unspent transactions\"<br>          })<br>        );<br>        return;<br>      } else {<br>        if (result[0].confirmations &gt;= process.env.CONFIRMATIONS) {<br>          amounttosend = result[0].amount.toFixed(8);<br>          //debug<br>          console.log(\"ams\" + amounttosend);<br>          //return;<br>          client<br>            .sendToAddress(coldstorageaddress, amounttosend)<br>            .then(result =&gt; {<br>let sqldata = [\"1\", address];<br>              let sql = `UPDATE sessions<br>                  SET swept = ?<br>                  WHERE address = ?`;<br>              //run sql<br>              db.run(sql, sqldata, function(err) {<br>                if (err) {<br>                }<br>                //update the address in cold storage so it is not used again.<br>                //build sql<br>                let sqldata = [\"1\", coldstorageaddress];<br>                let sql = `UPDATE ecs_coldstorageaddresses<br>                               SET used = ?<br>                              WHERE ecs_coldstorageaddress = ?`;<br>                //run sql<br>                db.run(sql, sqldata, function(err) {<br>                  if (err) {<br>                  }<br>                  //return status<br>                  res.send(JSON.stringify({ status: \"swept\" }));<br>                  return;<br>                });<br>              });<br>            });<br>        } else {<br>          //return status<br>          res.send(<br>            JSON.stringify({<br>              status: \"not enough confirmations :\" + result[0].confirmations<br>            })<br>          );<br>          return;<br>        }<br>      }<br>    });<br>  });<br>};</span></pre>\n<p id=\"aa9b\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >\"<a href=\"https://github.com/cryptoskillz/ECS/blob/part19-cyphernode-integration/server/api/helpers/webhook.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">webhook.js</strong></a>\" <strong class=\"lu mg\">changes</strong></p>\n<p id=\"742d\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Again we removed the account and passphrase code.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"2d93\" class=\"mh lg bf av my b dz mz na l nb\" >this.checkPayment = function checkPayment(token, address, res) {<br>  //get the unspent transactions for the address we are intrested in.<br>  client.listUnspent(1, 9999999, [address]).then(result =&gt; {</span><span id=\"55db\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >    if (result.length &gt; 0) {<br>      //check the confirmations (set int the env var)<br><br>      //in any live enviorment.<br>      if (result[0].confirmations &gt;= process.env.CONFIRMATIONS) {<br>        //valid<br>        res.send(JSON.stringify({ status: 1 }));<br>      } else {<br>        //not valid<br>        res.send(JSON.stringify({ status: 0 }));<br>      }<br>    } else {<br>      res.send(JSON.stringify({ status: 0 }));<br>    }<br>  });<br>};</span></pre>\n<h1 id=\"3414\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Conclusion</h1>\n<p id=\"b0aa\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >That is it, it was a very easy upgrade especially seeing as we completely replaced the backend. This is the beauty of Bitcoin it gives you control of every aspect of the flow. Imagine replacing your PCI server for you ecommerce provider over a weekend requiring the permission of no one :]</p>\n<p id=\"541c\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >In the next article, we will host this and replace our test store with the new code.</p>",
            "image": "https://cryptoskillz.com/blog/media/posts/21/1_h6R4v-LSbRG83IGCUZDN0Q.jpeg",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-08-19T12:32:00+07:00",
            "date_modified": "2019-11-20T23:19:44+07:00"
        }
    ]
}
