{
    "version": "https://jsonfeed.org/version/1",
    "title": "cryptoskillz",
    "description": "",
    "home_page_url": "https://cryptoskillz.com/blog",
    "feed_url": "https://cryptoskillz.com/blog/feed.json",
    "user_comment": "",
    "icon": "https://cryptoskillz.com/blog/media/website/logo.png",
    "author": {
        "name": "cryptoskillz"
    },
    "items": [
        {
            "id": "https://cryptoskillz.com/blog/tronbet-switching-to-win.html",
            "url": "https://cryptoskillz.com/blog/tronbet-switching-to-win.html",
            "title": "Tronbet switching to WINK",
            "summary": "UPDATE Wink have been true to their word and continued to deliver on their promises but unfortunately with Justin Sun seemingly&hellip;",
            "content_html": "<h2 id=\"mcetoc_1dler0rno0\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\">UPDATE </h2>\n<p><em>Wink have been true to their word and continued to deliver on their promises but unfortunately with Justin Sun seemingly massively involved and doing Justin Sun things, such as a 2 year (monthly airdrop) I fear this will have a long term negative impact on the whole project.  </em></p>\n<p><em>The team (although great technically) are horrible at marketing and a simple update leads to weeks of panic and speculation. They also have this odd methodology of releasing a press release, which is usually very ambiguous and requires clarification and instead of doing this they treat the press release as a work of Shakespearean art and refuse to give any more details (often these press releases are good news) resulting in them taking hell in their telegram channel for days or even weeks.</em></p>\n<p> </p>\n<p id=\"aa34\" >This quick article is an update to the “<a class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@cryptoskillz_58791/how-i-got-my-trx-for-free-using-tronbet-62f4b30f1ef7\"><strong class=\"mm nd\">how I got my tronbet for free</strong></a>” article I wrote some time ago. “<a href=\"https://www.tronbet.io/\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a>” is a gambling site with it’s own token that sits int he Tron network.</p>\n<p id=\"d7b2\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >They made a very important “<a class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@tronbethelp/ante-win-prepare-for-take-off-353d41b43401\"><strong class=\"mm nd\">announcement</strong></a><strong class=\"mm nd\">”</strong> yesterday which have rattled their community and rightly so.</p>\n<p id=\"2ed1\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >It is worth noting the last major change they made was moving to a platform so others could build upon their original dice game which lead to the live casino, slots, poker and soon sports betting. When they did this the plan was so ambitious that I did not think they could pull it off so I sold my ANTE (their token) for a decent profit and sat on the sidelines for a few months. Needless to say, hit every “<a href=\"https://cdn.tronbet.io/pdf/whitepaper_en.pdf\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">milestone</strong></a>” the price of ANTE rose and I bought back in. Sometime around then (I forgot the exact date) they built their own “<a href=\"https://trontrade.io/\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">exchange</strong></a>” as they were unhappy about the quality of the exchanges out there and this is now the default place to trade ANTE (this becomes important later) and (I believe) this is the largest ANTE trading exchange.</p>\n<h2 id=\"321b\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" ><strong class=\"cd\">So Skilz, the announcement what is it, why is the community going a little mental right now?</strong></h2>\n<p id=\"2d01\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Good question (me) basically it boils down the fact they are swapping their main token ANTE for one called WIN and then doing an AIRDROP for their LIVE (the casino token) with bonus WIN.</p>\n<p id=\"a862\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >In the crypto space, we are used to exit scams and I am in no way saying this is what Tronebt is doing. They have never seemed like this is their end goal but the fact remains we have been burned enough and there are enough deltas (things they have done) that as an ANTE holder you should rightly be nervous.</p>\n<h2 id=\"36fb\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Wow, this sounds great Skillz, is this just a case of the internet being scared of changing and yelling at it like they always do?</h2>\n<p id=\"ffae\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Yes and no. You see the switching to a new token (WIN) is smart for a number of reasons</p>\n<ol class=\"\">\n<li id=\"3329\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx si nz oa\" >They started with one DICE game and it gave you ANTE.</li>\n<li id=\"6d68\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >They then added a few more games RING etc which also gave you ANTE</li>\n<li id=\"9410\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >They then launched their first APP a casino which gave you LIVE for playing it</li>\n<li id=\"bc15\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >You earn a dividend for holding LIVE and a % of this dividend also goes to the ANTE pool.</li>\n<li id=\"e6f5\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >They Launched Poker in Alpha and this was supposed to charge a rake and payout dividends to ANTE holders.</li>\n<li id=\"6247\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx si nz oa\" >They announced sports betting as their second partner app presumably with a new token (it has not been announced yet)</li>\n</ol>\n<p id=\"9b15\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Around point 5 the poker release is where I think they started to have discussions about this change and it makes logical sense as ANTE is doing 2 things it is mining and being the primary token for receiving dividends from the partner apps and to me, this just felt wrong</p>\n<p id=\"2c87\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >It is worth noting that poker has stayed in alpha for a long time even though it is a great piece of software the reason I think they did this is that they were not sure how to monetise which eventually led to the WIN token creation.</p>\n<h2 id=\"686c\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >How is WIN different?</h2>\n<p id=\"f508\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >excellent questions (me) it basically comes down to this line from their announcement.</p>\n<blockquote class=\"sj sk sl\">\n<p id=\"f2f7\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" ><em class=\"ba\">WIN </em><strong class=\"mm nd\"><em class=\"ba\">cannot be mined</em></strong><em class=\"ba\"> and can only be </em><strong class=\"mm nd\"><em class=\"ba\">purchased on exchange</em></strong></p>\n</blockquote>\n<p id=\"ec62\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >This means it is a token created to be used on the base platform that is separate from every other token they launch on the platform and keeps things nice and clean. Of this, I approve. What I disapprove if is how they did it.</p>\n<h2 id=\"6949\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Ok, let us know how did they F this one up?</h2>\n<p id=\"2a07\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Basically, they launched it with the following article on “<a class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@tronbethelp/ante-win-prepare-for-take-off-353d41b43401\"><strong class=\"mm nd\">medium</strong></a>” and did a number of naughty things</p>\n<p id=\"3f94\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" ><strong class=\"mm nd\">1: Changing the freeze period</strong></p>\n<blockquote class=\"sj sk sl\">\n<p id=\"9fd4\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" >Beginning from this announcement, unfreezing ANTE will be <strong class=\"mm nd\">changed from 24 hours to 10 days.</strong></p>\n</blockquote>\n<p id=\"dba2\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >This basically said we are changing to the WIN token and anyone who has frozen ANTE can do nothing about it. You have to trust we know what we are doing it will all work out in the end.</p>\n<p id=\"8c3d\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Now, this sucks remember further up the article when I did not think they could hit their milestones sold my ANTE and sat on the sidelines. This was my decision and when they hit their milestones I bought back in around (15 TRX) and I had sold at 12 TRX and I was happy to do this as with all the milestones they crushed it was worth more (so I paid more). Now other people like the iron-willed Tommy Moustache (if you are ever in a war you want this man on your side, trust me) did not sell and made a greater return than me over that period again (and this is crucially important) this was his decision to make.</p>\n<p id=\"87b2\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >The reason I am in crypto (and also a lot of other people) is that we want to be in control of our money if we make a dumb decision it is on us. Tronbet took that decision away from us by moving the unfreeze period to 10 days.</p>\n<h2 id=\"3578\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >2: The haircut</h2>\n<blockquote class=\"sj sk sl\">\n<p id=\"3577\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" >ANTE frozen <strong class=\"mm nd\">before END STAGE will be rewarded 100% of the WIN exchange rate</strong>. ANTE frozen <strong class=\"mm nd\">after END STAGE will be rewarded 70% of the WIN exchange rate.</strong></p>\n</blockquote>\n<p id=\"9234\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >That’s right they announcement something with no notice on July 18th and if have unfrozen ANTE that you do not freeze (then they are locked up for 10 days remember) they are going to give you a 30% haircut on your investment. God forbid you have a life and went camping for a long weekend!</p>\n<h2 id=\"92a9\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >3: The exchange</h2>\n<p id=\"b4b9\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Remember Tronbet own the major exchange which no doubt makes them a decent profit and with the surge in demand for ANTE (created by them) is making them even more.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/26/1.png\" alt=\"\" width=\"2842\" height=\"925\"></p>\n<p id=\"03ab\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >As you can see ANTE is up (45%) in a day and someone is on the other side of the trade who could it be? it is not the loyal community who trusted Tronbet and froze their ante as you can see below those 74 million ANTE tokens that are frozen and belong to people who cannot unfreeze for the next 10 days.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/26/2.png\" alt=\"\" width=\"1698\" height=\"1146\"></p>\n<p id=\"6a46\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >So it is either the devs (nice payday for them) or the lucky few who simply trade and do not freeze (which is in the minority) but there are people on the other side of those ANTE buy orders.</p>\n<h2 id=\"90ca\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >4: Lack of clarity about the WIN token</h2>\n<p id=\"5d2f\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >We know very little about the WIN token. How many are there? What will the swap be, were will it be exchanged, how long before we can sell it?</p>\n<p id=\"bac1\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Again this is a case of “trust us guys we got you”</p>\n<h2 id=\"9b64\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >5: Is it a premine?</h2>\n<p id=\"3c29\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >One of the great things about the ANTE is the devs earned it as we mined but this vague line seems to state they will premine it this time (could be wrong) and requires further explanation.</p>\n<blockquote class=\"sj sk sl\">\n<p id=\"ffa3\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" >Developers will no longer freeze any tokens for dividends, and will instead be taken directly from WIN pool.</p>\n</blockquote>\n<h2 id=\"9cc0\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >6: step 2</h2>\n<blockquote class=\"sj sk sl\">\n<p id=\"7c7b\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" ><strong class=\"mm nd\"><em class=\"ba\">Mission Briefing (STEP 2) : Announcement on Twitter (TBA)</em></strong></p>\n</blockquote>\n<p id=\"868e\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Trust us guys we got you.</p>\n<h2 id=\"d1b2\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >7: step 3</h2>\n<blockquote class=\"sj sk sl\">\n<p id=\"829b\" class=\"mk ml ct sm mm b mn my mp mz mr na mt nb mv nc mx\" ><strong class=\"mm nd\"><em class=\"ba\">Engines On (STEP 3) : Houston! Get ready for take-off! (TBA)</em></strong></p>\n</blockquote>\n<p id=\"9f84\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Trust us guys we got you.</p>\n<h1 id=\"de04\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Conclusion</h1>\n<p id=\"77c3\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >I will leave it with the following conclusion in a question and answer format.</p>\n<h2 id=\"ef0f\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Do I think this is an exit scam?</h2>\n<p id=\"dce5\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >No (70% probability)</p>\n<h2 id=\"bb9a\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Do I think this has been done a way that could have been handled better?</h2>\n<p id=\"436a\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Yes</p>\n<h2 id=\"0584\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Will you sell your WIN when released?</h2>\n<p id=\"6729\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Depends on certain factors how much is it worth, did Tronbet earn back my trust but at this moment but if you pushed me for an answer it would be yes as I do not like anyone freezing my money EVER.</p>\n<h2 id=\"dbcb\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >What is your exposure?</h2>\n<p id=\"8cd7\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >1% of my portfolio.</p>",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-09-23T17:40:10+07:00",
            "date_modified": "2019-09-23T17:40:36+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/how-i-got-my-trx-for-free-using-tronbet.html",
            "url": "https://cryptoskillz.com/blog/how-i-got-my-trx-for-free-using-tronbet.html",
            "title": "How I got my TRX for free using Tronbet",
            "summary": "<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/1_qWm4r1QF9iNMDgPEb20U1Q.jpeg\" alt=\"\" width=\"3008\" height=\"2000\"></p>\n",
            "content_html": "<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/1_qWm4r1QF9iNMDgPEb20U1Q.jpeg\" alt=\"\" width=\"3008\" height=\"2000\"></p>\n\n<h1 id=\"7e71\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Disclaimer</h1>\n<p id=\"12c6\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >This is gambling, do not do use this site. We have no idea how fair their game is, we have no idea who is behind the game. It requires new players to constantly enter the ecosystem (and lose) to make the dividend payouts work.</p>\n<p id=\"14e3\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >I did it as I have a decent chunk invested in <strong class=\"mm nd\">TRX</strong> as one of my research projects and in this scenario, I am always looking for ways to get that initial investment out and freeroll it. I saw <a href=\"https://www.tronbet.io/?r=cryptoskillz\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a> as a way to do this and dedicated 10% of my <strong class=\"mm nd\">TRX</strong> investment to see if I could get my total investment back.</p>\n<p id=\"c5b3\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Really do not do this I started at stage 1 level 1, and it is now stage 1 level 6 it costs a lot more to mine the “<strong class=\"mm nd\">ante</strong>” and the payout will continue to decrease as the game goes on.</p>\n<p id=\"b58b\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >The link to <a href=\"https://www.tronbet.io/?r=cryptoskillz\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a> in this article is an affiliate link and if you do play (<strong class=\"mm nd\">do not play</strong>) I will get a % of your bets as a way of referral. If you would rather that I did not get this referral I understand simply go directly to the site <a href=\"https://www.tronbet.io/#/\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.tronbet.io/#/</a>.</p>\n<p > </p>\n<h1 id=\"9eca\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Update 1</h1>\n<p id=\"ad8d\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >My laptop died on me and of course, I had not backed up my private keys, well I had but my opsec was not good enough but that is another story. Anyway, I lost the ANTE. I was able to reload and earn the same ante back (though it was not as profitable as I was on stage 1:6 at the time)</p>\n<p > </p>\n<h1 id=\"cd66\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Update 2</h1>\n<p id=\"e13a\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >I got my original ante back so now I have twice as much ANTE :)</p>\n<p > </p>\n<h1 id=\"bdfc\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Update 3</h1>\n<p id=\"787f\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" ><span style=\"text-decoration: underline;\">After</span> the crypto price crash and the fact that tronbet changed their payout to frozen ante as well as 1.5x ante payout, it is not profitable to be mining ANTE again so I will be doing so for the next 24 hours.</p>\n<p > </p>\n<h1 id=\"bdfc\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Update 4</h1>\n<p>Ante is now called <a href=\"https://www.wink.org/#/\" target=\"_blank\" rel=\"noopener noreferrer\">wink</a> and what a lot of fun that changes was read about it <a href=\"https://cryptoskillz.com/blog/tronbet-switching-to-win.html\">here</a>. </p>\n<p> </p>\n<h1 id=\"8ba0\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >The Premise</h1>\n<p id=\"1242\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" ><a href=\"https://www.tronbet.io/?r=cryptoskillz\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a> is a simple dice rolling game that pays you an “<strong class=\"mm nd\">ante</strong>” for every time you play based on how much <strong class=\"mm nd\">TRX</strong> you wagered and the current rate of TRX to ante (which of writing it 1100 <strong class=\"mm nd\">TRX</strong> to one “<strong class=\"mm nd\">ante</strong>”).</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/1.png\" alt=\"\" width=\"1741\" height=\"721\"></p>\n<p id=\"b75b\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >As you can see from the screenshot above it pays out 153 per 100 presently or 1.5 per “<strong class=\"mm nd\">ante</strong>”. The screenshot below shows an estimated payout over time.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/2.png\" alt=\"\" width=\"1765\" height=\"1035\"></p>\n<p id=\"2264\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >There is 100 million total “<strong class=\"mm nd\">ante</strong>” to be mined which means the end price for 1 “<strong class=\"mm nd\">ante</strong>” is very very low (I won’t bore you with the mathematics of it). The developers are claiming more games that the same “<strong class=\"mm nd\">ante</strong>” is going to be used for ad revenue etc. I have discounted all of this and will factor them into my calculations as (and if) they actually appear.</p>\n<p > </p>\n<h1 id=\"3b50\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >The Methodology</h1>\n<p id=\"99d2\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >So we have a decreasing payout that requires people to lose in order for dividends to be paid, how did this become a profitable endeavour?</p>\n<p id=\"9b01\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Simply put I used the above chart to figure out how many ante I required to break even then I decided on a sum of TRX I was happy to lose (10% of my total holdings) and set my bet amount to 1/40th of this amount.</p>\n<h2 id=\"7580\" class=\"ni ly ct ba az dw nj nk nl nm nn no np nq nr ns nt\" >Why 1/40th?</h2>\n<p id=\"946d\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >1/40th is very important as with the methodology I implemented we have to be able to lose 7 concurrent rolls and not fall victim to <a href=\"https://en.wikipedia.org/wiki/Gambler%27s_ruin\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\">gamblers ruin</a>.</p>\n<p id=\"30b3\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Then it is really quite simple you set your bet amount, set the slider to 90 and click roll under. Simply repeat this process until you lose. As you can see you have a 90% chance of winning and you being paid out just under that (that’s the house edge)<br>*note I did not start at 10 <strong class=\"mm nd\">TRX</strong></p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/3.png\" alt=\"\" width=\"2182\" height=\"1276\"></p>\n<p id=\"dd33\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Once you lose (and you will lose it is a mathematical certainty) we switch to the <a href=\"https://en.wikipedia.org/wiki/Martingale_(betting_system)\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">martingale</strong></a> method which basically means we move the slider to 49 and roll again, if we lose we double the bet hit (x2) and repeat until we have either lost 7 straight rolls or doubled up. This is shown in the screenshot below.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/4.png\" alt=\"\" width=\"2032\" height=\"1172\"></p>\n<p > </p>\n<p id=\"0403\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >What we are in effect doing is using a very low-risk strategy to do the majority of our bets and then invoking a very high-risk strategy to recover our lost bet. With <mark class=\"op oq or\">the</mark> added bonus of the “<strong class=\"mm nd\">ante”</strong>, this makes this strategy <a href=\"https://www.pokerlistings.com/strategy/expected-value-ev-explained\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\">+ev</a>. Though it will not always be +ev because of the increased cost of the “<strong class=\"mm nd\">ante</strong>” over time.</p>\n<p id=\"0e36\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >There are ways to be more aggressive such</p>\n<ul class=\"\">\n<li id=\"6522\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx ny nz oa\" >Double bet until the win or you go broke</li>\n<li id=\"cab3\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx ny nz oa\" >20x starting balance (bigger bets)</li>\n<li id=\"12c7\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx ny nz oa\" >change the slider to be less than 90.</li>\n</ul>\n<p id=\"8b30\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >There are also a number of ways to refine this strategy and increase your win rate, although I did not employ them as they required too much time to be dedicated to the strategy whilst playing.</p>\n<ul class=\"\">\n<li id=\"855a\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx ny nz oa\" >switch between roll over 9 and roll under 90 depending on the how the numbers are rolling (low or high)</li>\n<li id=\"b9a8\" class=\"mk ml ct ba mm b mn ob mp oc mr od mt oe mv of mx ny nz oa\" >On your first loss change the roll under to roll over based on how the numbers are rolling</li>\n</ul>\n<p> </p>\n<h1 id=\"cddd\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >SUPER DUPER IMPORTANT</h1>\n<p id=\"71ad\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >WHEN YOU REACH YOUR DESIRED ANTE LEVEL OR WHEN IT BECOMES UNPROFITABLE TO ROLL YOU HAVE TO <strong class=\"mm nd\">STOP</strong>. FAILURE TO DO SO MEANS YOU ARE JUST GAMBLING AND YOU WILL BECOME ONE OF THE PEOPLE WHO PAYS THE DIVIDENDS OUT TO THE PROFITABLE PLAYERS INSTEAD OF BEING THE PROFITABLE PLAYER THAT RECEIVES THE DIVIDENDS.</p>\n<p > </p>\n<h1 id=\"d535\" class=\"lx ly ct ba az dw lz ma mb mc md me mf mg mh mi mj\" >Conclusion</h1>\n<p id=\"be49\" class=\"mk ml ct ba mm b mn mo mp mq mr ms mt mu mv mw mx\" >Using the above method I reached my desired “<strong class=\"mm nd\">ante</strong>” level in about 3 days withdrew my initial 10% TRX investment (with another 20% in winnings) and I will be on course (at current payout levels) to have recouped my entire TRX investment in 24 days. I have had 4 payouts already and they have all been paid on time. Well done <a href=\"https://www.tronbet.io/?r=cryptoskillz\" class=\"bx di lt lu lv lw\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"mm nd\">Tronbet</strong></a> devs.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/25/5.png\" alt=\"\" width=\"1800\" height=\"1598\"></p>\n<p id=\"c582\" class=\"mk ml ct ba mm b mn my mp mz mr na mt nb mv nc mx\" >Of course, an exit scam, change of ante rules TRX surge in price etc can affect this outcome one way or another.</p>",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-09-23T17:28:14+07:00",
            "date_modified": "2019-09-23T17:40:51+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/working-with-fullnodes-part-7-cyphernode-iv.html",
            "url": "https://cryptoskillz.com/blog/working-with-fullnodes-part-7-cyphernode-iv.html",
            "title": "Working With Fullnodes Part 7 Cyphernode IV",
            "summary": "<h3 id=\"mcetoc_1dlaocgki0\" class=\"graf graf--h3\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/download.png\" alt=\"\" width=\"260\" height=\"194\"></h3>\n",
            "content_html": "<h3 id=\"mcetoc_1dlaocgki0\" class=\"graf graf--h3\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/download.png\" alt=\"\" width=\"260\" height=\"194\"></h3>\n\n<h3 id=\"mcetoc_1dlan93jk0\" class=\"graf graf--h3\">Introduction</h3>\n<p class=\"graf graf--p\">This guide aims to program a website to accept Bitcoin. In the previous tutorial, we integrated “<a href=\"https://cyphernode.io/\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">cyphernode</strong></a><strong class=\"markup--strong markup--p-strong\">” </strong>into our “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” (with “<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">Lightning</strong></a>”). This time we are going to host it on “<a href=\"https://www.digitalocean.com/\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">digitalocean</strong></a>”.</p>\n<p class=\"graf graf--p\">We are going to create 2 droplets one to hold “<a href=\"https://cyphernode.io/\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">cyphernode</strong></a>” and the other to hold “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>”. We could keep them both in one instance but I prefer to use “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” as a proxy that we can have a main and test node and have one “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” to access both.</p>\n<h3 id=\"mcetoc_1dlan93jk2\" class=\"graf graf--h3\">Cyphernode droplet</h3>\n<h4 id=\"mcetoc_1dlan93jk3\" class=\"graf graf--h4\">step 1: create a droplet</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/1.png\" width=\"1600\" height=\"174\"></figure>\n<h4 id=\"mcetoc_1dlan93jk4\" class=\"graf graf--h4\">step 2: chose OS</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/2.png\" width=\"1600\" height=\"548\"></figure>\n<h4 id=\"mcetoc_1dlan93jk5\" class=\"graf graf--h4\">step 3: chose plan</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/3.png\" width=\"1600\" height=\"666\"></figure>\n<h4 id=\"mcetoc_1dlan93jk6\" class=\"graf graf--h4\">step 4: assign SSH</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/4.png\" width=\"1600\" height=\"460\"></figure>\n<h4 id=\"mcetoc_1dlan93jk7\" class=\"graf graf--h4\">step 5: create a droplet</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/5.png\" width=\"1600\" height=\"552\"></figure>\n<h4 id=\"mcetoc_1dlan93jk8\" class=\"graf graf--h4\">step 6: access droplet</h4>\n<p class=\"graf graf--p\">Copy the ipv4 address shown in the droplet admin</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/6.png\" width=\"1600\" height=\"503\"></figure>\n<h4 id=\"mcetoc_1dlan93jk9\" class=\"graf graf--h4\">step 7: connect via ssh</h4>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/7.png\" width=\"1358\" height=\"979\"></figure>\n<h4 id=\"mcetoc_1dlan93jka\" class=\"graf graf--h4\">step 8: install docker</h4>\n<p class=\"graf graf--p\">note, this step was taken from the following “<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">guide</strong></a>”</p>\n<p class=\"graf graf--p\">First, update your existing list of packages:</p>\n<pre class=\"graf graf--pre\">sudo apt update</pre>\n<p class=\"graf graf--p\">Next, install a few prerequisite packages which let apt use packages over HTTPS:</p>\n<pre class=\"graf graf--pre\">sudo apt install apt-transport-https ca-certificates curl software-properties-common</pre>\n<p class=\"graf graf--p\">Then add the GPG key for the official Docker repository to your system:</p>\n<pre class=\"graf graf--pre\">curl -fsSL <a href=\"https://download.docker.com/linux/ubuntu/gpg\"  class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://download.docker.com/linux/ubuntu/gpg</a> | sudo apt-key add -</pre>\n<p class=\"graf graf--p\">Add the Docker repository to APT sources:</p>\n<pre class=\"graf graf--pre\">sudo add-apt-repository \"deb [arch=amd64] <a href=\"https://download.docker.com/linux/ubuntu\"  class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://download.docker.com/linux/ubuntu</a> bionic stable\"</pre>\n<p class=\"graf graf--p\">Next, update the package database with the Docker packages from the newly added repo:</p>\n<pre class=\"graf graf--pre\">sudo apt update</pre>\n<p class=\"graf graf--p\">Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:</p>\n<pre class=\"graf graf--pre\">apt-cache policy docker-ce</pre>\n<p class=\"graf graf--p\">You’ll see output like this, although the version number for Docker may be different:</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/8.png\" width=\"1247\" height=\"1028\"></figure>\n<p class=\"graf graf--p\">Finally, install Docker:</p>\n<pre class=\"graf graf--pre\">sudo apt install docker-ce</pre>\n<p class=\"graf graf--p\">Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it’s running:</p>\n<pre class=\"graf graf--pre\">sudo systemctl status docker</pre>\n<p class=\"graf graf--p\">The output should be similar to the following, showing that the service is active and running:</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/9.png\" width=\"1600\" height=\"363\"></figure>\n<p class=\"graf graf--p\">Installing Docker now gives you not just the Docker service (daemon) but also the docker command-line utility, or the Docker client. We’ll explore how to use the docker command later in this tutorial.</p>\n<p class=\"graf graf--p\">add your username to the docker group:</p>\n<pre class=\"graf graf--pre\">sudo usermod -aG docker ${USER}</pre>\n<p class=\"graf graf--p\">Apply the new group membership, log out of the server and back in, or type the following:</p>\n<pre class=\"graf graf--pre\">id -nG</pre>\n<h4 id=\"mcetoc_1dlan93jkb\" class=\"graf graf--h4\">step 9: install docker-compose</h4>\n<p class=\"graf graf--p\">note, this step was taken from the following “<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-16-04\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">guide</strong></a>”</p>\n<p class=\"graf graf--p\">Although we can install Docker Compose from the official Ubuntu repositories, it is several minor versions behind the latest release, so we’ll install Docker Compose from the Docker’s GitHub repository. The command below is slightly different than the one you’ll find on the Releases page. By using the -o flag to specify the output file first rather than redirecting the output, this syntax avoids running into a permission denied error caused when using sudo.</p>\n<p class=\"graf graf--p\">We’ll check the current release and if necessary, update it in the command below:</p>\n<pre class=\"graf graf--pre\">sudo curl -L <a href=\"https://github.com/docker/compose/releases/download/1.18.0/docker-compose-&#96;uname\"  class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname</a> -s`-`uname -m` -o /usr/local/bin/docker-compose</pre>\n<p class=\"graf graf--p\">Next, we’ll set the permissions:</p>\n<pre class=\"graf graf--pre\">sudo chmod +x /usr/local/bin/docker-compose</pre>\n<p class=\"graf graf--p\">Then we’ll verify that the installation was successful by checking the version:</p>\n<pre class=\"graf graf--pre\">docker-compose --version</pre>\n<p class=\"graf graf--p\">This will print out the version we installed:</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*x2nPIfMzjYrPmmmAxnQHGw.png\"   ></figure>\n<p class=\"graf graf--p graf--empty\"> </p>\n<h4 id=\"mcetoc_1dlan93jkc\" class=\"graf graf--h4\">step 10: Install cyphernode</h4>\n<p class=\"graf graf--p\">We are not going to document the cyphernode install process again you can review it “<a href=\"https://medium.com/bitcoin-e-commerce-development/part-19-cyphernode-ii-a2b01e8d702c\"  class=\"markup--anchor markup--p-anchor\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"markup--strong markup--p-strong\">here</strong></a>” if you want to run through the whole process again. We install the BTC full node without Lightning as we want it to run on a 50 gig digitalocean box. We will add Lightning in a later article.</p>\n<h3 id=\"mcetoc_1dlan93jkd\" class=\"graf graf--h3\">ECS droplet</h3>\n<p class=\"graf graf--p\">Now we have to create a droplet for “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a><strong class=\"markup--strong markup--p-strong\">”</strong>. Repeat steps 1–5 from the previous installation (cyphernode droplet)</p>\n<h4 id=\"mcetoc_1dlan93jke\" class=\"graf graf--h4\">step 6: install node js</h4>\n<p class=\"graf graf--p\">note, this step was taken from the following “<a href=\"https://websiteforstudents.com/install-the-latest-node-js-and-nmp-packages-on-ubuntu-16-04-18-04-lts/\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">guide</strong></a>”</p>\n<p class=\"graf graf--p\">First, update your existing list of packages:</p>\n<pre class=\"graf graf--pre\">sudo apt install curl</pre>\n<p class=\"graf graf--p\">Install the repository that has the latest version of Node.js</p>\n<pre class=\"graf graf--pre\">curl -sL <a href=\"https://deb.nodesource.com/setup_10.x\"  class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://deb.nodesource.com/setup_10.x</a> | sudo bash -</pre>\n<p class=\"graf graf--p\">Install Node.js</p>\n<pre class=\"graf graf--pre\">sudo apt install nodejs</pre>\n<p class=\"graf graf--p\">After installing, both Node.js and NPM modules should be installed and ready to use.</p>\n<p class=\"graf graf--p\">You can use the commands below to view the version number installed.</p>\n<pre class=\"graf graf--pre\">node -v<br>npm -v</pre>\n<p class=\"graf graf--p\">and you will see something like the following screenshot</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/10.png\" width=\"817\" height=\"56\"></figure>\n<h4 id=\"mcetoc_1dlan93jkf\" class=\"graf graf--h4\">step 7: install ECS</h4>\n<p class=\"graf graf--p\">First, make a directory called server</p>\n<pre class=\"graf graf--pre\">mkdir server<br>cd server</pre>\n<p class=\"graf graf--p\">Next, great a git repo</p>\n<pre class=\"graf graf--pre\">git init</pre>\n<p class=\"graf graf--p\">Next, add the ECS repo</p>\n<pre class=\"graf graf--pre\">git remote add github https://github.com/cryptoskillz/ECS.git</pre>\n<p class=\"graf graf--p\">Next, pull the latest master branch</p>\n<pre class=\"graf graf--pre\">git pull github master</pre>\n<p class=\"graf graf--p\">Next, Go into the newly created server directory</p>\n<pre class=\"graf graf--pre\">cd server</pre>\n<p class=\"graf graf--p\">Create an .ENV file</p>\n<pre class=\"graf graf--pre\">nano .env</pre>\n<p class=\"graf graf--p\">Add the following and fill in with the correct details. </p>\n<blockquote class=\"graf graf--blockquote\">Note, the RPCHOST is the IP address of the first droplet we created. </blockquote>\n<pre class=\"graf graf--pre\">EMAILSMTP = <br>EMAILUSERNAME = <br>EMAILPASSWORD = <br>WALLETPASSPHRASE = <br>WALLET = 'spending01.dat'<br>RPCUSERNAME = <br>NETWORK = 1<br>LIGHTNETWORK=2<br>RPCUSERNAME =<br>RPCPASSWORD = <br>RPCHOST = 127.0.0.1 <br>RPCPORT = 18332<br>BLOCKIOKEY = <br>BLOCKIOSECRET = <br>PORT = 80<br>CONFIRMATIONS=1<br>STRIKEAPIKEY=<br>STRIKEENDPOINT=</pre>\n<p class=\"graf graf--p\">Run app.js and see if it is working.</p>\n<pre class=\"graf graf--pre\">node app.js</pre>\n<p class=\"graf graf--p\">Note, sometimes you may get the following error</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/0.png\" width=\"1600\" height=\"367\"></figure>\n<p class=\"graf graf--p\">We are not sure why this happens but “<a href=\"https://www.sqlite.org/index.html\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">sqllite</strong></a>” for some reason does not always install from the package.json file. If you run into this error then type the following</p>\n<pre class=\"graf graf--pre\">npm install sqlite3 --save</pre>\n<p class=\"graf graf--p\">If it has worked you will see the following</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/11.png\" width=\"1045\" height=\"140\"></figure>\n<p class=\"graf graf--p\">You will now be able to access the “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” API via the browser. Let us test this by going to the following URL</p>\n<p class=\"graf graf--p\">Note, replace the IP address with the one Digitalocean gave you.</p>\n<pre class=\"graf graf--pre\"><a href=\"http://157.245.13.93:3030/backoffice/test\"  class=\"markup--anchor markup--pre-anchor\" rel=\"noopener noreferrer\" target=\"_blank\">http://157.245.13.93:3030/backoffice/test</a></pre>\n<p class=\"graf graf--p\">If it worked you will see something like the following </p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/12.png\" width=\"1600\" height=\"535\"></figure>\n<p class=\"graf graf--p\">This is a test endpoint that shows us the actual block height the full node has synced to.</p>\n<h4 id=\"mcetoc_1dlan93jkg\" class=\"graf graf--h4\">step 8: install forever.js</h4>\n<p class=\"graf graf--p\">Now we want “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” to run even when we are not logged in and to do that we install a package called “forever.js”</p>\n<p class=\"graf graf--p\">First, stop “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” from running by pressing CTRL+C</p>\n<p class=\"graf graf--p\">Then, install forever.js</p>\n<pre class=\"graf graf--pre\">npm install forever -g</pre>\n<p class=\"graf graf--p\">Next, we want to start “<a href=\"https://github.com/cryptoskillz/ECS\"  class=\"markup--anchor markup--p-anchor\" rel=\"noopener noreferrer\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">ECS</strong></a>” and run it forever. The -w flag will restart the app.js if we change any of the files. Handy for when we update the code. </p>\n<pre class=\"graf graf--pre\">forever -w start app.js</pre>\n<p class=\"graf graf--p\">If it worked you will see the following output</p>\n<figure class=\"graf graf--figure\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/23/13.png\" width=\"1466\" height=\"115\"></figure>\n<h3 id=\"mcetoc_1dlan93jkh\" class=\"graf graf--h3\">Conclusion</h3>\n<p class=\"graf graf--p\">Now we have ECS running on a cheap digitalocean box ($20 a month) and have cyphernode as our back end full node. We have everything we require to take payments in BTC and it is all working great. Next time we are going to do a 180 and update ECS to run with no full node at all, WHAT!</p>\n<p class=\"graf graf--p graf--empty\"> </p>\n<p class=\"graf graf--p graf--empty\"> </p>\n<p class=\"graf graf--p graf--empty\"> </p>\n<p class=\"graf graf--p graf--empty\"> </p>",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-09-22T03:21:11+07:00",
            "date_modified": "2019-09-22T03:39:22+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/working-with-fullnodes-part-6-cyphernode-iii.html",
            "url": "https://cryptoskillz.com/blog/working-with-fullnodes-part-6-cyphernode-iii.html",
            "title": "Working With Fullnodes Part 6 Cyphernode III",
            "summary": "<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/0_tnWANgeBqBWRZOxF.png\" alt=\"\" width=\"792\" height=\"567\"></p>\n<p> </p>\n",
            "content_html": "<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/0_tnWANgeBqBWRZOxF.png\" alt=\"\" width=\"792\" height=\"567\"></p>\n<p> </p>\n\n<article>\n<div>\n<section class=\"jd je jf jg jh\">\n<div class=\"ae ji ab dn v w\">\n<h1 id=\"ec35\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\" >Preamble</h1>\n<p id=\"8793\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >This article aims to play with \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\" on the \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\" backend as well as explorer \"<a href=\"https://www.docker.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker</strong></a>\" and figure out how it all works with the proxy etc. Now, let us be upfront and clear we know nothing about \"<a href=\"https://www.docker.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker</strong></a>\" we will be learning and as we go and making a lot of mistakes and most probably doing everything wrong but that is ok, that is how we learn.</p>\n<p id=\"f05c\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Also, this is not essential reading as it is purely a research article offering tertiary information on our journey. If you like minuta then I am pretty sure you will enjoy this, for everyone else please just move on to the next article.</p>\n<h1 id=\"2665\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\" >Introduction</h1>\n<p id=\"8ce2\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >This guide aims to program a website to accept Bitcoin. In the previous tutorial, we integrated \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a><strong class=\"kf mh\">\" </strong>into our \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" (without \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\"). This time we are going to integrate \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\" and ties it into \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\".</p>\n<h1 id=\"ed64\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\" >Installing cyphernode</h1>\n<p id=\"7a3c\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >We have done this a few times already so there is no reason to document the steps here again please refer to \"<a class=\"cb bx md me mf mg\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/part-18-cyphernode-ab682ff85659\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">part 18</strong></a>\" for installation instructions. Note we are still on testnet but you may install testnet or mainnet.</p>\n<p id=\"b1f9\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><em class=\"mi\">Note, Presently you have to run a full node that is not pruned for \"</em><a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">Lightning</em></strong></a><em class=\"mi\">\" support so please make sure that you have 350gig of hard drive space available. Since \"</em><a href=\"https://bitcoin.org/en/release/v0.16.0\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">Bitcoin Core 0.16.0</em></strong></a><em class=\"mi\">\" with the introduction of \"</em><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">BIP 159</em></strong></a><em class=\"mi\">\" you have been able to run \"</em><a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">Lightning</em></strong></a><em class=\"mi\">\" in a pruned node and \"</em><a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">cyphernode</em></strong></a><em class=\"mi\">\" runs \"</em><a href=\"https://bitcoin.org/en/release/v0.18.0\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\"><em class=\"mi\">Bitcoin Core 0.18.0</em></strong></a><em class=\"mi\">\" so we are sure that support for this will come soon.</em></p>\n<h1 id=\"433d\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\" >Starting cyphernode</h1>\n<p id=\"e409\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >The first thing to do, as always is to start \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\" and you do that by type the following command in the \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\" installation directory.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"f57c\" class=\"mj lm bf av mk b dz ml mm l mn\" >./start.sh</span></pre>\n<p id=\"c252\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >First things first let us try the standard curl call we use to test things are running as excepted. Run the following command in terminal enter the password you set for RPC whilst setting up cyphernode.</p>\n<p id=\"56f1\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Note, we are using testnet so the port at the end is 18332 if you selected mainnet then you will have to change this to 8332.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"d185\" class=\"mj lm bf av mk b dz ml mm l mn\" >curl --user admin  --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }'     -H 'content-type: text/plain;' http://127.0.0.1:18332/</span></pre>\n<p id=\"8ec1\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >and you will get the following response.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_xCGv5lAgr1gaA5-Ja5N9qA.png\" alt=\"\" width=\"2493\" height=\"287\"></p>\n<p > </p>\n<h1 id=\"30e3\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\" >Using Docker with cyphernode</h1>\n<p id=\"f5d2\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >Now let us test it by typing the command in the docs which can be found here.</p>\n<p id=\"aa69\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >The first command they list is this</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"28fd\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /getbestblockinfo\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -</span></pre>\n<p id=\"cab4\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Which will provide the following output</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_k_wYuHIap43PqBMO9fKAFw.png\" alt=\"\" width=\"2510\" height=\"688\"></p>\n<p id=\"a1e3\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >We are not 100% sure how this is working but we do know what is is doing it is running the proxy node in \"<a href=\"https://hub.docker.com/_/alpine\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">alpine</strong></a>\" which is a minimal Docker image based on Alpine Linux with a complete package index and only 5 MB in size!. Then it makes the API call (getbestblockinfo) through the proxy.</p>\n<p id=\"b129\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Ok, cool so now let us see what <strong class=\"kf mh\"><em class=\"mi\">getbestblockinfo</em></strong> is by looking at the cyphernode \"<a href=\"https://github.com/SatoshiPortal/cyphernode/blob/master/doc/API.v0.md\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">API reference</strong></a>\" which show the following</p>\n<blockquote class=\"ms mt mu\">\n<p id=\"4ce0\" class=\"kd ke bf mi kf b kg kh ki kj kk kl km kn ko kp kq\" >Get the Best Block Info (called by application)</p>\n<p id=\"6f85\" class=\"kd ke bf mi kf b kg kh ki kj kk kl km kn ko kp kq\" >Returns best block info: calls getblockinfo with bestblockhash.</p>\n</blockquote>\n<p id=\"155f\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >as you can see sho the \"<a href=\"https://github.com/SatoshiPortal/cyphernode/blob/master/doc/API.v0.md\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">API reference</strong></a><strong class=\"kf mh\">\"</strong> there are a number of API calls that we can take advantage of and a few more in \"<a href=\"https://github.com/SatoshiPortal/cyphernode/blob/master/doc/API.v1.md\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">V1</strong></a><strong class=\"kf mh\">\"</strong> of the API which as far as we can tell is not being used yet but it may be.</p>\n<p id=\"8f2a\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Alright now, let us run the other commands in the documentation to make sure the above was not a fluke.</p>\n<p id=\"c8a9\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">getbalance</strong></p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"df5c\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /getbalance\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -<br></span></pre>\n<p id=\"c592\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">getbestblockhash</strong></p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"2ad6\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /getbestblockhash\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -<br></span></pre>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_MDScTYTMvI66XOiBy99RgA.png\" alt=\"\" width=\"1911\" height=\"274\"></p>\n<p id=\"89d4\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">getblockinfo</strong></p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"06da\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /getblockinfo/00000000a64e0d1ae0c39166f4e8717a672daf3d61bf7bbb41b0f487fcae74d2\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -</span></pre>\n<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_d6Wu4nEcgkOk852jXwBR8A.png\" alt=\"\" width=\"2499\" height=\"1052\"></p>\n<p id=\"5e47\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">ln_getinfo</strong></p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"fcf6\" class=\"mj lm bf av mk b dz ml mm l mn\" >echo \"GET /ln_getinfo\" | docker run --rm -i --network=cyphernodenet alpine nc proxy:8888 -</span></pre>\n<p class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_N7O0v8qc9HZYT5KRnghzrg.png\" alt=\"\" width=\"1913\" height=\"942\"></p>\n<p id=\"8f2b\" >Wow, it works (awesome) so we can push any command in the API reference and get a response that way, very cool.</p>\n<h2 id=\"6ac6\" class=\"mj lm bf av au el nb nc nd ne nf ng nh ni nj nk nl\" >To app or not to app</h2>\n<p id=\"2931\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >Now we have the above working we have a clear inflection point we can use the above infrastructure and rebuild \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" as a \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\" app, this is clearly the way want us to do and it and the way it has been built the framework is in place to allow us to do this fairly easily. However we want \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" to be agnostic we want it to work with \"<a href=\"https://cyphernode.io/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">cyphernode</strong></a>\", \"<a href=\"https://store.casa/lightning-node/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">casa</strong></a><strong class=\"kf mh\">\"</strong>, \"<a href=\"https://www.nodl.it/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">nodl</strong></a>\" and whatever else is out there and to build the apps this way would seriously curtail our ability to do this.</p>\n<p id=\"58e2\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Also, we suck at using \"<a href=\"https://www.docker.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Docker</strong></a>\" at the moment so would not be confident everyone would not laugh at us if we attempted a 100% \"<a href=\"https://www.docker.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker</strong></a>\" implementation :]</p>\n<h2 id=\"5189\" class=\"mj lm bf av au el nb nc nd ne nf ng nh ni nj nk nl\" >playing with docker</h2>\n<p id=\"4793\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >right the first thing we want to do is see what is running we do this by running the \"<a href=\"https://docs.docker.com/engine/reference/commandline/ps/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">list containers command</strong></a><strong class=\"kf mh\">\"</strong> as shown below:</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"2b44\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker ps</span></pre>\n<p id=\"d7fc\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >You will get an output like the one below</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_Adh7RBY-53j7mbedr3b38g.png\" alt=\"\" width=\"2505\" height=\"699\"></p>\n<p id=\"0697\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >as you can see all of the containers (cyphernode/bitcoin:v0.18.0) are running so let us see if we can talk to one of them.</p>\n<p id=\"fc6c\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">get getblockchaininfo</strong></p>\n<p id=\"57f3\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >We know that \"<a href=\"https://en.bitcoin.it/wiki/Running_Bitcoin\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">bitcoin-cli</strong></a><strong class=\"kf mh\">\" </strong>is running on the cyphernode/bitcoin:v0.18.0 so let us see if we can get that to give us some blockchain info. We can do this br running the \"<a href=\"https://docs.docker.com/engine/reference/commandline/exec/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker exec</strong></a>\" command. First cop the container ID from the output of docker ps. and type the following command:</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"4af9\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec 24efdf4f691a bitcoin-cli getblockchaininfo</span></pre>\n<p id=\"6bbd\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >and you should get the following output</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_0lgEue_e3ok1W7DOIIFMbQ.png\" alt=\"\" width=\"1255\" height=\"1333\"></p>\n<p id=\"ecff\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Awesome, so we can use the \"<a href=\"https://en.bitcoin.it/wiki/Running_Bitcoin\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">bitcoin-cli</strong></a><strong class=\"kf mh\">\" </strong>via docker.exec or the curl method which is awesome.</p>\n<p id=\"ab1f\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><strong class=\"kf mh\">get lightning info</strong></p>\n<p id=\"70aa\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Now, we are getting somewhere so now let us see if we can do the same with \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">lightning</strong></a>\". Run the following command with the \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">lightning</strong></a>\" container ID.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"1469\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec cf0b5d94ab8d lightning-cli</span></pre>\n<p id=\"e3ca\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >you will get the following output</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_mW1Xssi1jqPaDt7omJM-bw.png\" alt=\"\" width=\"1272\" height=\"516\"></p>\n<p id=\"bc17\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Hmm, that did not work as \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\" requires the working directory and we are not 100% sure where that is, no worries \"<a href=\"https://en.wikipedia.org/wiki/Grep\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">grep</strong></a>\" to the rescue. Run the following command.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"8d35\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec cf0b5d94ab8d grep .lightning</span></pre>\n<p id=\"c957\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >This will tell us that \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">Lightning</strong></a>\" is in the following directory .<strong class=\"kf mh\"><em class=\"mi\">lightning </em></strong>so let us set that directory and try again by typing the following command.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"0844\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec cf0b5d94ab8d lightning-cli --lightning-dir=.lightning getinfo</span></pre>\n<p id=\"04ad\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >and we will get the following output</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_b_bbTEQeeAhNRv067PxoEw.png\" alt=\"\" width=\"1784\" height=\"1042\"></p>\n<p id=\"d304\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Yay, it works.</p>\n<h2 id=\"425a\" class=\"mj lm bf av au el nb nc nd ne nf ng nh ni nj nk nl\" >accessing the containers via the proxy</h2>\n<p id=\"3c21\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >Just for fun let us see if we can use the proxy. I say for fun as we will most likely be bypassing this for usecase when it gets to production.</p>\n<p id=\"c087\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >we can do this by running the following command of course you can use any of the API endpoints as described aboce</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"693f\" class=\"mj lm bf av mk b dz ml mm l mn\" >docker exec 2b62aa57aa95 curl http://proxy:8888/getbestblockinfo</span></pre>\n<p id=\"74fe\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >and you will get the following result</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/22/1_2bWMRohqczIJmP6JEImwDA.png\" alt=\"\" width=\"2504\" height=\"436\"></p>\n<h2 id=\"4294\" class=\"mj lm bf av au el nb nc nd ne nf ng nh ni nj nk nl\" >docker final thoughts</h2>\n<p id=\"995b\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >To be fair docker is pretty cool once you get over the insane learning curve as we can see us using it more at cryptoskillz towers in the future.</p>\n<p id=\"b8a2\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >One thing we are not able to do yet is run an exec command with the container name instead of the container ID. We know for sure this is possible but we are just to dumb to have figured it out (just yet). This is a real problem as container IDs change on every start and stop.</p>\n<h1 id=\"f3e8\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\" ><strong class=\"ch\">Using Docker commands with ECS</strong></h1>\n<p id=\"d56e\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >So now we have docker up and running it would be really cool if we could interface with it via \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" luckily we can do that.</p>\n<p id=\"9036\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >The latest branch that deals with code in this tutorial can be found \"<a href=\"https://github.com/cryptoskillz/ECS/tree/cyphernodeIII\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">here</strong></a>\"</p>\n<h1 id=\"6412\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\" >Database base changes</h1>\n<p id=\"3ec9\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >None</p>\n<h1 id=\"a3fe\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\" >Code Changes</h1>\n<p id=\"f3a5\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >we installed a new package called \"<a href=\"https://www.npmjs.com/package/docker-cli-js\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">docker-cli-js</strong></a>\" to handle our interactions with docker.</p>\n<p id=\"94cb\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" ><a href=\"https://github.com/cryptoskillz/ECS/blob/cyphernodeIII/server/light.js\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">light.js</strong></a></p>\n<p id=\"c479\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >This a new file we created (just for testing) we have not integrated into \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" any more than this at this moment of time.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"9662\" class=\"mj lm bf av mk b dz ml mm l mn\" ><br>var dockerCLI = require(\"docker-cli-js\");<br>var DockerOptions = dockerCLI.Options;<br>var Docker = dockerCLI.Docker;<br>var docker = new Docker();<br></span><span id=\"6f3d\" class=\"mj lm bf av mk b dz nw nx ny nz oa mm l mn\" >//call lightning container get info command<br>docker.command('exec 99a7103d7ab9 lightning-cli --lightning-dir=.lightning getinfo', function (err, data) <br>{<br> console.log('data = ', data);<br>});</span><span id=\"288e\" class=\"mj lm bf av mk b dz nw nx ny nz oa mm l mn\" >//call the proxy server to the get the balance<br>docker.command(<br>  'exec eaf667a5b8be curl   -H \"content-type: text/plain;\"  <a href=\"http://127.0.0.1:8888/ln_getinfo'\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8888/ln_getinfo'</a>,<br>  function(err, data) {<br>    console.log(\"data = \", data.raw);<br>  }<br>);</span><span id=\"3db3\" class=\"mj lm bf av mk b dz nw nx ny nz oa mm l mn\" >//calling the proxy server to get a balance<br>docker.command(<br>  'exec eaf667a5b8be curl   -H \"content-type: text/plain;\"  <a href=\"http://127.0.0.1:8888/getbalance'\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8888/getbalance'</a>,<br>  function(err, data) {<br>    console.log(\"data = \", data.raw);<br>  }<br>);</span></pre>\n<p id=\"5811\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Let us take a look and see what is happening with the above.</p>\n<p id=\"ccc3\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >The first block of code set up the docker package.</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"ddc5\" class=\"mj lm bf av mk b dz ml mm l mn\" >var dockerCLI = require(\"docker-cli-js\");<br>var DockerOptions = dockerCLI.Options;<br>var Docker = dockerCLI.Docker;<br>var docker = new Docker();</span></pre>\n<p id=\"ae52\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >next, let us call the lightning container and get the info</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"34ef\" class=\"mj lm bf av mk b dz ml mm l mn\" >//call lightning container get info command<br>docker.command('exec 99a7103d7ab9 lightning-cli --lightning-dir=.lightning getinfo', function (err, data) <br>{<br> console.log('data = ', data);<br>});</span></pre>\n<p id=\"6efb\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Now, let us do the same thing but this time via the proxy</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"24de\" class=\"mj lm bf av mk b dz ml mm l mn\" >//call the proxy server to the get the balance<br>docker.command(<br>  'exec eaf667a5b8be curl   -H \"content-type: text/plain;\"  <a href=\"http://127.0.0.1:8888/ln_getinfo'\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8888/ln_getinfo'</a>,<br>  function(err, data) {<br>    console.log(\"data = \", data.raw);<br>  }<br>);</span></pre>\n<p id=\"6a4a\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Lastly, let us use the proxy to get the Bitcoin balance</p>\n<pre class=\"ks kt ku kv kw dv ge df\"><span id=\"a68b\" class=\"mj lm bf av mk b dz ml mm l mn\" >//calling the proxy server to get a balance<br>docker.command(<br>  'exec eaf667a5b8be curl   -H \"content-type: text/plain;\"  <a href=\"http://127.0.0.1:8888/getbalance'\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8888/getbalance'</a>,<br>  function(err, data) {<br>    console.log(\"data = \", data.raw);<br>  }<br>);</span></pre>\n<p id=\"604a\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >As you can see the commands above are exactly the same as we did from the command line (which is neat) so if we decide to go down this route (via proxy etc) it will be fairly trivial to implement.</p>\n<h1 id=\"7501\" class=\"ll lm bf av au el ln lo lp lq lr ls lt lu lv lw lx\" >Conclusion</h1>\n<p id=\"0ea3\" class=\"kd ke bf av kf b kg ly ki lz kk ma km mb ko mc kq\" >There we have it, we have configured and implemented cyphernode into our overall software stack and interfaced it into \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\". This gives us a really powerful boost to our back end infrastructure. But, to level with you, this was one of the hardest things we have done yet in this series and I think a lot of that can be attributed to our lack of Docker knowledge.</p>\n<p id=\"be61\" class=\"kd ke bf av kf b kg kh ki kj kk kl km kn ko kp kq\" >Next time we will look to host \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">ECS</strong></a>\" and cyphernode on a \"<a href=\"https://www.digitalocean.com/\" class=\"cb bx md me mf mg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"kf mh\">digitalocean</strong></a><strong class=\"kf mh\">\"</strong>server.</p>\n</div>\n</section>\n</div>\n</article>",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-08-28T12:33:00+07:00",
            "date_modified": "2019-09-20T12:33:49+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/working-with-fullnodes-part-5-cyphernode-ii.html",
            "url": "https://cryptoskillz.com/blog/working-with-fullnodes-part-5-cyphernode-ii.html",
            "title": "Working With Fullnodes Part 5 Cyphernode II",
            "summary": "<figure class=\"post__image post__image\" contenteditable=\"false\"><img src=\"https://cryptoskillz.com/blog/media/posts/21/1_h6R4v-LSbRG83IGCUZDN0Q.jpeg\" alt=\"\" width=\"3456\" height=\"3456\">\n<figcaption contenteditable=\"true\">\n<figure class=\"ke kf kg kh ki fr x y paragraph-image\">\n<figcaption class=\"az dz kx ky hh dn x y kz la au dx\" data-selectable-paragraph=\"\">Photo by <a href=\"https://unsplash.com/@trueagency?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">True Agency</a> on <a href=\"https://unsplash.com/search/photos/backend?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></figcaption>\n</figure>\n</figcaption>\n</figure>\n",
            "content_html": "<figure class=\"post__image post__image\" ><img src=\"https://cryptoskillz.com/blog/media/posts/21/1_h6R4v-LSbRG83IGCUZDN0Q.jpeg\" alt=\"\" width=\"3456\" height=\"3456\">\n<figcaption >\n<figure class=\"ke kf kg kh ki fr x y paragraph-image\">\n<figcaption class=\"az dz kx ky hh dn x y kz la au dx\" >Photo by <a href=\"https://unsplash.com/@trueagency?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">True Agency</a> on <a href=\"https://unsplash.com/search/photos/backend?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></figcaption>\n</figure>\n</figcaption>\n</figure>\n\n<h1 id=\"e317\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Introduction</h1>\n<p id=\"f921\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >This guide aims to program a website to accept Bitcoin. In the previous tutorial, we set up and configured \"<a href=\"https://cyphernode.io/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">cyphernode</strong></a><strong class=\"lu mg\">\" </strong>which is an excellent dockerised bitcoin and lightning full node plus other useful. Now we are going to set it up to use specifically for our requirements. Namely as a commerce backend for websites.</p>\n<h1 id=\"ac4d\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Configuring cyphernode</h1>\n<p id=\"b852\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >We are going to make a number of changes to the tutorial in the previous \"<a class=\"cb bx lb lc ld le\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/part-18-cyphernode-ab682ff85659\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">article</strong></a>\" which was simply showing how to get \"<a href=\"https://cyphernode.io/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">cyphernode</strong></a>\" working in its default set up.</p>\n<h2 id=\"51b2\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\" >Remove Lightning</h2>\n<p id=\"fa43\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >As we do not natively support it yet</p>\n<h2 id=\"06f6\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\" >Prune the blockchain</h2>\n<p id=\"af6f\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >As we are using it to do as a commerce server and every sale will we do is moved to our cold storage via a hardware wallet (such as \"<a href=\"https://www.ledgerwallet.com/products/12-ledger-nano-s\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Ledger</strong></a>\") or a full node (such as \"<a href=\"https://store.casa/lightning-node/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">casa</strong></a>\") which has been built to be a store of value.</p>\n<h2 id=\"9991\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\" >Building cyphernode</h2>\n<p id=\"cf78\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >Note, a number of these steps are a repetition of the previous \"<a class=\"cb bx lb lc ld le\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/part-18-cyphernode-ab682ff85659\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">article</strong></a>\" but it is worth repeating as they change (although subtly) in a significant manner.</p>\n<p id=\"7799\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Open a terminal client (we use Macs) if you use Windows use \"<a href=\"https://www.putty.org/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">putty</strong></a><strong class=\"lu mg\">\"</strong> or whatever terminal client you are comfortable with.</p>\n<p id=\"3af2\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">Step 1: Create a directory</strong></p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"e0f8\" class=\"mh lg bf av my b dz mz na l nb\" >mkdir cyphernode &amp;&amp; cd cyphernode</span></pre>\n<p id=\"e81f\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">Step 2: Run quick install of cyphernode</strong></p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"4a7a\" class=\"mh lg bf av my b dz mz na l nb\" >curl -fsSL <a href=\"https://raw.githubusercontent.com/SatoshiPortal/cyphernode/master/dist/setup.sh\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">https://raw.githubusercontent.com/SatoshiPortal/cyphernode/master/dist/setup.sh</a> -o setup_cyphernode.sh &amp;&amp; chmod +x setup_cyphernode.sh &amp;&amp; ./setup_cyphernode.sh</span></pre>\n<p id=\"cd78\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">Step 3: run through cyphernode set up</strong></p>\n<p id=\"e0fc\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >The first thing you will see a progress window (as shown in the screenshot below) that is basically the cyphernode set up downloading everything it requires to complete the installation.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1.png\" alt=\"\" width=\"1728\" height=\"281\"></p>\n<p id=\"a70b\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, you will see is a prompt asking you for a password add one, obviously. Remember this password as it comes in handy (a lot) later.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_32xpgCDTEfRlPZc7kHvYeA.png\" alt=\"\" width=\"1405\" height=\"126\"></p>\n<p id=\"a3fe\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >After that you are presented with is the one below, press return as help is always good, right?</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/0_tvAQgJ-qh3uRdMgY.png\" alt=\"\" width=\"1400\" height=\"663\"></p>\n<p id=\"4a5a\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, it will prompt you to install extra software. We do not require either \"<a href=\"https://en.wikipedia.org/wiki/Lightning_Network\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Lightning</strong></a>\" or \"<a href=\"https://github.com/opentimestamps/opentimestamps-client\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Opentimestamps client</strong></a>\" yet so just press return to move onto the next stage.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_wyFEHuAJgg3B8PY51rs1vQ.png\" alt=\"\" width=\"1127\" height=\"169\"></p>\n<p id=\"7827\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, we want to select Testnet as we are testing.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_P4DgFm_MaK9MeWGbXieYXg.png\" alt=\"\" width=\"1216\" height=\"154\"></p>\n<p id=\"0cdd\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, It asks to change user which is very good advice which we are going to ignore for the sake of simplicity. Go ahead and select N</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_FS-e2QKY5ybkqVNaOkfRUg.png\" alt=\"\" width=\"1169\" height=\"260\"></p>\n<p id=\"8fb2\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, select \"N\". To be frank, we are still not 100% sure what is \"<a href=\"https://support.blockchain.com/hc/en-us/articles/360000939843-Understanding-the-xPub-and-address-generation\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">xPub</strong></a>\" is and until we do and can make an informed decision about it we are going to ignore its existence.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_sQSemJH9liax29ac84tvIw.png\" alt=\"\" width=\"1154\" height=\"233\"></p>\n<p id=\"5dcb\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, We have to give an encryption passphrase that gatekeeper will use for authentication. Go ahead and add one.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_9RdYsmKXAcqjfFidUyGdqQ.png\" alt=\"\" width=\"1190\" height=\"316\"></p>\n<p id=\"dc2b\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, select a port. 2009 is fine so just press return</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_R6iF_aXtV8vH5T_2MNfHQA.png\" alt=\"\" width=\"1197\" height=\"32\"></p>\n<p id=\"9bc8\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, set up the IP’s we are going to run everything over 127.0.0.1 for now so just press return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_Z88sXbsLw5OeGif5SvF0eQ.png\" alt=\"\" width=\"1245\" height=\"249\"></p>\n<p id=\"1824\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, Again press return as we are happy to route all traffic through port 80</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_VFi9nsHJY2UahMiNCbe2tQ.png\" alt=\"\" width=\"1160\" height=\"40\"></p>\n<p id=\"af86\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, press return as we want to https to be on the default port.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_zb4UXqnEZrridF6QWyanMA.png\" alt=\"\" width=\"1223\" height=\"34\"></p>\n<p id=\"4e6f\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Now, It is telling us it will look after the full node for us yay. Press return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_vz1oq2X8C9yUVM8j5gLGRQ.png\" alt=\"\" width=\"1248\" height=\"304\"></p>\n<p id=\"7fd6\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, we have to add an RPC username. \"admin\" is always good</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_BQwX_NXe6P-d_lCZtuJHEA.png\" alt=\"\" width=\"1149\" height=\"145\"></p>\n<p id=\"8bfb\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, we have to add an RPC password.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/pass.png\" alt=\"\" width=\"1075\" height=\"50\"></p>\n<p id=\"ed16\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, type \"Y’ as we want to run the full node in \"<a href=\"https://coinguides.org/bitcoin-blockchain-pruning/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">prune</strong></a>\" mode</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_nnXroHU5WM0GWbRnG3wutg-1.png\" alt=\"\" width=\"1153\" height=\"230\"></p>\n<p id=\"d936\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, we want to select 550 megabytes this is the default option so just press return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_HrOFqakZgRc_PVVBfrvaAg.png\" alt=\"\" width=\"1348\" height=\"180\"></p>\n<p id=\"fac3\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, you can add a UA comment here if you want (we did not)</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_ROeDTiEzmltDo1DXqc9_Kg.png\" alt=\"\" width=\"1085\" height=\"147\"></p>\n<p id=\"77db\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, Press return as we are presented with one option and luckily it is the option we want.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_D2w2SM1-T-WgCVNRlp62KQ.png\" alt=\"\" width=\"1291\" height=\"161\"></p>\n<p id=\"c324\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, you are going to be asked for the location of where to put the files just press return 4 times as the defaults are good and you will be presented with the below</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_CF3iKmOGsHV4qko4LI-k0Q-1.png\" alt=\"\" width=\"1284\" height=\"890\"></p>\n<p id=\"dad8\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, We do want to expose so press \"Y\" followed by return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_sJV62NV2s2Eu3sBjlE6uoA-1.png\" alt=\"\" width=\"1157\" height=\"42\"></p>\n<p id=\"f5f2\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Again, we are happy for the full node to expose itself so press \"Y\" and return again</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_OS7NSnWin3KnsVHJGEFOEg-1.png\" alt=\"\" width=\"1207\" height=\"202\"></p>\n<p id=\"1e1c\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, you want to choose from docker-compose or docker swarm. We selected docker-compose and suggest you do the same.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_4XdDfcRT71pNiqwt9YFI6Q.png\" alt=\"\" width=\"1174\" height=\"246\"></p>\n<p id=\"9e0c\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Next, type \"Y\" as it is always good to clean up after yourself.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/1_Dse884374fQRAddULzgjcg.png\" alt=\"\" width=\"1222\" height=\"169\"></p>\n<p id=\"101c\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Finally, you will see some output (like the screenshot below) that is the installation completed.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/2.png\" alt=\"\" width=\"1189\" height=\"472\"></p>\n<p id=\"8feb\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Once it is finished you will see the following</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/21/3.png\" alt=\"\" width=\"1368\" height=\"315\"></p>\n<p > </p>\n<h1 id=\"0f5f\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Useful things to know about cyphernode</h1>\n<p id=\"a3a9\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >Now we have been playing with cyphernode for a few weeks our understanding is growing and a result it makes sense to list the most common things that slowed us down in our studying of this excellent product.</p>\n<h2 id=\"8662\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\" >zipped files</h2>\n<p id=\"518a\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" ><strong class=\"lu mg\">client.7z<br></strong>Use your password you set at the being to unzip this and you will find the private keys for your wallets.</p>\n<p id=\"feb3\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">config.7z<br></strong>Again, use your password to unzip this and you will find a config file that you can use to build more versions of cyphernode with this configuration.</p>\n<p id=\"61ef\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">wallet directory<br></strong>There are 4 wallets referenced in the bitcoin.conf file and it is assumed (at this point) that are using some pattern to set the wallet names. Further experiment will show us what this pattern is.</p>\n<p id=\"6daa\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><em class=\"pc\">watching01.dat<br></em>not sure what this wallet is for our hunch is it may be for watch only nodes. We will have to research this further.</p>\n<p id=\"4c20\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><em class=\"pc\">xpubwatching01.dat<br></em>Not sure about this one either but we can infer from its name that it is to do with Xpub which we are also going to be looking into.</p>\n<p id=\"6c22\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><em class=\"pc\">spending01.dat<br></em>This is the main wallet file that full node uses</p>\n<p id=\"08a9\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><em class=\"pc\">ln01.dat<br></em>This is the wallet that the lightning node uses.</p>\n<h1 id=\"5dfa\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >ECS</h1>\n<p id=\"6773\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >It has been a while since we have actually slung some code for ECS and Bitcoin development moves at a steady clip so it is nice to get back and update it.</p>\n<p id=\"123d\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Our main goals for this code update is to make ECS support the latest version of \"<a href=\"https://bitcoin.org/en/bitcoin-core/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Bitcoin Core</strong></a>\" which at the time of writing this is 0.18.1.</p>\n<p id=\"4743\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >As we were replacing our cobbled together backend with the infinitely superior \"<a href=\"https://cyphernode.io/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">cyphernode</strong></a>\" we thought it would be prudent to make it agnostic at this point so it would work with any backend</p>\n<p id=\"3f81\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >The latest branch that deals with code in this tutorial can be found \"<a href=\"https://github.com/cryptoskillz/ECS/tree/part19-cyphernode-integration\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">here</strong></a>\"</p>\n<p id=\"d9e1\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >It is worth noting that we literately changed our entire back end here and because Bitcoin has been so awesomely programmed it took about a day and required about adding 10 lines of code. Working on e-commerce for well over a decade I know how hard this would have been using traditional e-commerce/banking/fintech architecture. We are really entertaining a golden time for payments.</p>\n<h2 id=\"d025\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\" >Database base changes</h2>\n<p id=\"dae9\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >None</p>\n<h2 id=\"34a4\" class=\"mh lg bf av au el mi mj mk ml mm mn mo mp mq mr ms\" >Code Changes</h2>\n<p id=\"bba0\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >Apart from the odd bug fix here and there (which you can see by looking at the \"<a href=\"https://github.com/cryptoskillz/ECS/commits/part19-cyphernode-integration\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">commit history</strong></a>\" if you really want to) all of the refactorings we did was in the \"<a href=\"https://github.com/cryptoskillz/ECS/tree/part19-cyphernode-integration/server\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">server</strong></a>\" component. So let us go ahead and break down the changes we made.</p>\n<p id=\"28a0\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">\"</strong><a href=\"https://github.com/cryptoskillz/ECS/blob/part19-cyphernode-integration/server/.env_copy\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">.env </strong></a><strong class=\"lu mg\">\"changes</strong></p>\n<p id=\"71c6\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >As the concept of accounts has been \"<a href=\"https://github.com/bitcoin-dot-org/bitcoin.org/issues/1287\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">deprecated</strong></a>\" in the latest version bitcoin core we changed the env var to just hold the wallet.</p>\n<p id=\"6b6b\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Note there were 4 wallets that cyphernode created and with some trial and error we found out the one we want is called ‘spending01.dat’ so we preconfigured it to this in the env vars below.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"d9b6\" class=\"mh lg bf av my b dz mz na l nb\" >EMAILSMTP = <br>EMAILUSERNAME = <br>EMAILPASSWORD = <br>WALLETPASSPHRASE = <br>WALLET = 'spending01.dat'<br>RPCUSERNAME = <br>NETWORK = 1<br>LIGHTNETWORK=2<br>RPCUSERNAME =<br>RPCPASSWORD = <br>RPCHOST = 127.0.0.1 <br>RPCPORT = 18332<br>BLOCKIOKEY = <br>BLOCKIOSECRET = <br>PORT = 3030<br>CONFIRMATIONS=1<br>STRIKEAPIKEY=<br>STRIKEENDPOINT=</span></pre>\n<p id=\"21aa\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >\"<a href=\"https://github.com/cryptoskillz/ECS/blob/part19-cyphernode-integration/server/config.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">config.js</strong></a>\" changes</p>\n<p id=\"3d89\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >We upgraded \"<a href=\"https://www.npmjs.com/package/bitcoin-core\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">bitcoin cor</strong></a><strong class=\"lu mg\">e</strong>\" to 2.2.0 and it facilitated the name of the wallet we are using in the config parameter so we went ahead and did that. I would like an RPC call that returned the default wallet</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"e71b\" class=\"mh lg bf av my b dz mz na l nb\" >const Client = require(\"bitcoin-core\");<br>if (process.env.NETWORK == 1) {<br>  client = new Client({<br>    host: \"127.0.0.1\",<br>    port: 18332,<br>    wallet: process.env.WALLET,<br>    username: process.env.RPCUSERNAME,<br>    password: process.env.RPCPASSWORD<br>  });<br>}</span><span id=\"2a36\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >if (process.env.NETWORK == 2) {<br>  client = new Client({<br>    host: \"127.0.0.1\",<br>    port: 8332,<br>    wallet: process.env.WALLET,<br>    username: process.env.RPCUSERNAME,<br>    password: process.env.RPCPASSWORD<br>  });<br>}</span></pre>\n<p id=\"f4b4\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" ><strong class=\"lu mg\">\"</strong><a href=\"https://github.com/cryptoskillz/ECS/tree/part19-cyphernode-integration/server/api/helpers\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">api.js </strong></a><strong class=\"lu mg\">\"changes</strong></p>\n<p id=\"e556\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >We removed the account and passphrase code. We may add the passphrase option back in the future but it will have to be switchable so it works with backends that have encrypted wallets (or not)</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"2f51\" class=\"mh lg bf av my b dz mz na l nb\" >this.generateAddress = function generateAddress(uid, res) {<br>  //create a new address in theaccount account :]<br>  client.getNewAddress().then(address =&gt; {<br>    //debug<br>    //console.log(address);</span><span id=\"2f23\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >//insert it into the database<br>    db.run(<br>      `INSERT INTO sessions(address,userid,net) VALUES(?,?,?)`,<br>      [address, uid, process.env.NETWORK],<br>      function(err) {<br>        if (err) {<br>          //debug<br>          //return console.log(err.message);</span><span id=\"c126\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >//return error<br>          res.send(JSON.stringify({ error: err.message }));<br>          return;<br>        }<br>        //return the address<br>        res.send(JSON.stringify({ address: address }));<br>      }<br>    );<br>    return;<br>  });<br>};</span></pre>\n<p id=\"2ed8\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >We also recorded the sweep function to use the much simpler \"<a href=\"https://bitcoincore.org/en/doc/0.16.0/rpc/wallet/sendtoaddress/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">sendtoaddress</strong></a><strong class=\"lu mg\">\"</strong> function that was introduced in 0.16.0.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"138c\" class=\"mh lg bf av my b dz mz na l nb\" >this.sweep = function sweep(address, res) {<br>  let sqldata = [0];<br>  let sql = `select * from ecs_coldstorageaddresses where used = ?`;</span><span id=\"5062\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >//get a cold storage address<br>  db.get(sql, sqldata, (err, result) =&gt; {<br>    if (err) {<br>      return console.error(err.message);<br>    }<br>    //save the address<br>    var coldstorageaddress = result.address;<br>    client.listUnspent(1, 9999999, [address]).then(result =&gt; {<br>      //debug<br>      console.log(result[0]);<br>      if (result.length == 0) {<br>        //debug<br>        //console.log(result);<br>        res.send(<br>          JSON.stringify({<br>            result: \"nothing to sweep no unspent transactions\"<br>          })<br>        );<br>        return;<br>      } else {<br>        if (result[0].confirmations &gt;= process.env.CONFIRMATIONS) {<br>          amounttosend = result[0].amount.toFixed(8);<br>          //debug<br>          console.log(\"ams\" + amounttosend);<br>          //return;<br>          client<br>            .sendToAddress(coldstorageaddress, amounttosend)<br>            .then(result =&gt; {<br>let sqldata = [\"1\", address];<br>              let sql = `UPDATE sessions<br>                  SET swept = ?<br>                  WHERE address = ?`;<br>              //run sql<br>              db.run(sql, sqldata, function(err) {<br>                if (err) {<br>                }<br>                //update the address in cold storage so it is not used again.<br>                //build sql<br>                let sqldata = [\"1\", coldstorageaddress];<br>                let sql = `UPDATE ecs_coldstorageaddresses<br>                               SET used = ?<br>                              WHERE ecs_coldstorageaddress = ?`;<br>                //run sql<br>                db.run(sql, sqldata, function(err) {<br>                  if (err) {<br>                  }<br>                  //return status<br>                  res.send(JSON.stringify({ status: \"swept\" }));<br>                  return;<br>                });<br>              });<br>            });<br>        } else {<br>          //return status<br>          res.send(<br>            JSON.stringify({<br>              status: \"not enough confirmations :\" + result[0].confirmations<br>            })<br>          );<br>          return;<br>        }<br>      }<br>    });<br>  });<br>};</span></pre>\n<p id=\"aa9b\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >\"<a href=\"https://github.com/cryptoskillz/ECS/blob/part19-cyphernode-integration/server/api/helpers/webhook.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">webhook.js</strong></a>\" <strong class=\"lu mg\">changes</strong></p>\n<p id=\"742d\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >Again we removed the account and passphrase code.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"2d93\" class=\"mh lg bf av my b dz mz na l nb\" >this.checkPayment = function checkPayment(token, address, res) {<br>  //get the unspent transactions for the address we are intrested in.<br>  client.listUnspent(1, 9999999, [address]).then(result =&gt; {</span><span id=\"55db\" class=\"mh lg bf av my b dz pd pe pf pg ph na l nb\" >    if (result.length &gt; 0) {<br>      //check the confirmations (set int the env var)<br><br>      //in any live enviorment.<br>      if (result[0].confirmations &gt;= process.env.CONFIRMATIONS) {<br>        //valid<br>        res.send(JSON.stringify({ status: 1 }));<br>      } else {<br>        //not valid<br>        res.send(JSON.stringify({ status: 0 }));<br>      }<br>    } else {<br>      res.send(JSON.stringify({ status: 0 }));<br>    }<br>  });<br>};</span></pre>\n<h1 id=\"3414\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Conclusion</h1>\n<p id=\"b0aa\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >That is it, it was a very easy upgrade especially seeing as we completely replaced the backend. This is the beauty of Bitcoin it gives you control of every aspect of the flow. Imagine replacing your PCI server for you ecommerce provider over a weekend requiring the permission of no one :]</p>\n<p id=\"541c\" class=\"ls lt bf av lu b lv mt lx mu lz mv mb mw md mx mf\" >In the next article, we will host this and replace our test store with the new code.</p>",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-08-19T12:32:00+07:00",
            "date_modified": "2019-09-20T12:33:07+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/working-with-full-nodes-part-4-cyphernode-i.html",
            "url": "https://cryptoskillz.com/blog/working-with-full-nodes-part-4-cyphernode-i.html",
            "title": "Working With Fullnodes Part 4 Cyphernode I",
            "summary": "<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_8uCeMDcHVyVSlXe0y6UCtg.png\" alt=\"\" width=\"792\" height=\"567\"></p>\n<p> </p>\n",
            "content_html": "<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_8uCeMDcHVyVSlXe0y6UCtg.png\" alt=\"\" width=\"792\" height=\"567\"></p>\n<p> </p>\n\n<article>\n<div>\n<section class=\"jf jg jh ji jj\">\n<div class=\"ae jk ab dn v w\">\n<h1 id=\"902e\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Preamble</h1>\n<p id=\"21c3\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >Up to this point, we have looked to handle everything ourself, you know with \"<a href=\"https://en.bitcoin.it/wiki/Design_of_Cryptocurrency_for_a_Sovereign_Nation\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">self-sovereignty</strong></a>\" and all. That said over the course of the year (or so) we have run into a number of promising projects that were aligned with our goals whilst simultaneously making the software stack for Bitcoin easier to install, use and maintain. This is music to ears so we thought let’s play with a few of them and see what we leverage the output of others much smarter than ourselves.</p>\n<h1 id=\"6594\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Introduction</h1>\n<p id=\"989e\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >The first one we are going to look at is \"<a href=\"https://cyphernode.io/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">cyphernode</strong></a>\" is a modular Bitcoin full-node microservices API server architecture and utility toolkit to build scalable, secure and featureful apps and services without trusted third parties. It is a docker container built and maintained by \"<a href=\"https://bullbitcoin.com/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">Bullbitcoin</strong></a>\"</p>\n<p id=\"a0ba\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >The code can be found \"<a href=\"https://github.com/SatoshiPortal/cyphernode\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">here</strong></a>\" in the Satoshi Portal repository.</p>\n<p id=\"8fa9\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" ><em class=\"ms\">*Note they used to have satoshiportal.com and I assume that is why this project is under the Satoshi Portal GitHub but the URL now points to \"</em><a href=\"https://bullbitcoin.com/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\"><em class=\"ms\">bullbitcoin.com</em></strong></a><em class=\"ms\">\" A tad confusing I know but it is a young project and I assume they are in the process of figuring out the branding and such.</em></p>\n<p id=\"44e6\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >It is worth throwing some semantics out there. Currently, we have a backend (admin etc), API, frontend etc. Here we are basically splitting the backend in two and adding Bitcoin Backend and ECS backend (unless we think of a cooler name).</p>\n<h1 id=\"e325\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Under the hood</h1>\n<p id=\"545f\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >As we said above \"<a href=\"https://cyphernode.io/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">cyphernode</strong></a>\" is a collection of software put inside a docker container for easy maintenance and deployment. So let’s go ahead and see what each of the components that make up \"<a href=\"https://cyphernode.io/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">cyphernode</strong></a>\" does. the following image (taking from their \"<a href=\"https://github.com/SatoshiPortal/cyphernode\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">Github</strong></a>\") shows how each of the components works together</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_eaLc6e8O5-LVagOjBP-eHw.jpeg\" alt=\"\" width=\"897\" height=\"605\"></p>\n<ul class=\"\">\n<li id=\"c34e\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh mv mw mx\" ><em class=\"ms\">Note We have failed to get the API working. The \"</em><a href=\"https://github.com/SatoshiPortal/cyphernode/blob/master/doc/API.v0.md\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\"><em class=\"ms\">docs</em></strong></a><em class=\"ms\">\" show connections to \"</em><strong><a href=\"http://cyphernode:8888/watch\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><em class=\"ms\">http://cyphernode:8888</em></a></strong><em class=\"ms\"><strong>/\"</strong> which we have tried this as well as \"</em><strong><a href=\"http://127.0.0.1/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><em class=\"ms\">http://127.0.0.1</em></a></strong><em class=\"ms\"><strong>/\"</strong> and with the port 2009 (as shown in the diagram above). Maybe we are not supposed to use the API and it is just for their stack or maybe we are just dumb and have not figured it out yet (most likely)</em></li>\n</ul>\n<p id=\"d5e6\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Below is a breakdown of each of the components that make up the stack.</p>\n<h2 id=\"5119\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" ><a href=\"https://traefik.io/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\">traefik</a></h2>\n<p id=\"04a3\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >A reverse proxy/load balancer that’s easy, dynamic, automatic, fast, full-featured, open-source, production-proven, provides metrics and integrates with every major cluster technology</p>\n<h2 id=\"f6f2\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >gatekeeper</h2>\n<p id=\"0a0d\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >front door where all requests hit Cyphernode. Takes care of: TLS, authentication and authorization.</p>\n<h2 id=\"f81d\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >proxy</h2>\n<p id=\"632e\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >Request handler. Will dispatch authenticated and authorized requests to the right component. Uses an SQLite3 database for its tasks.</p>\n<h2 id=\"4380\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >proxycron</h2>\n<p id=\"f292\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >Scheduler. Can call the proxy on regular interval for asynchronous tasks like payment notifications on watches, callbacks when OTS files are ready, etc.</p>\n<h2 id=\"8813\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >broker</h2>\n<p id=\"4ce5\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >pub/sub mechanism is taken care of by the broker to which all subscribers and publishers should register.</p>\n<h2 id=\"1ac4\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >notifier</h2>\n<p id=\"69e1\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >Handling callbacks used by watchers as well as OTS stamping.</p>\n<h2 id=\"07a1\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >pycoin</h2>\n<p id=\"978f\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >Bitcoin keys and addresses tool. Used by Cyphernode to derive addresses from an xPub and a derivation path.otsclient</p>\n<p id=\"787b\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" ><strong class=\"lw mm\">\"</strong><a href=\"https://github.com/opentimestamps/opentimestamps-client/tree/master/otsclient\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">Open timestamp client</strong></a><strong class=\"lw mm\">\"<br></strong>Used to stamp hashes on the Bitcoin blockchain.</p>\n<h2 id=\"f5ac\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >bitcoin</h2>\n<p id=\"e1e1\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >\"<a href=\"https://bitcoin.org/en/release/v0.18.0\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">Bitcoin Core</strong></a>\" version 0.18.0 (as of writing)</p>\n<h2 id=\"ba4d\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >lightning</h2>\n<p id=\"6ad5\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >\"<a href=\"https://github.com/ElementsProject/lightning\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">C-Lightning</strong></a>\" to version 0.7.1</p>\n<h2 id=\"467f\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >sparkwallet</h2>\n<p id=\"a3a1\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >\"<a href=\"https://github.com/shesek/spark-wallet\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">sparkwallet</strong></a>\" is a minimalistic wallet GUI for c-lightning, accessible over the web or through mobile and desktop apps</p>\n<p id=\"d34e\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >As we continue to use \"<a href=\"https://cyphernode.io/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">cyphernode</strong></a>\" we will become more familiar with the above components and loop back and update the descriptors accordingly.</p>\n<h1 id=\"1662\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Installing cyphernode</h1>\n<p id=\"c26a\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >First, let us install it locally to make sure it all works as expected.</p>\n<p id=\"7ba9\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" ><strong class=\"lw mm\">Step 1: Create a directory</strong></p>\n<pre class=\"ko kp kq kr ks dv gg df\"><span id=\"6045\" class=\"my li bf av nk b dz nl nm l nn\" >$ mkdir cyphernode &amp;&amp; cd cyphernode</span></pre>\n<p id=\"f2a6\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" ><strong class=\"lw mm\">Step 2: Run quick install of cyphernode</strong></p>\n<pre class=\"ko kp kq kr ks dv gg df\"><span id=\"fcd5\" class=\"my li bf av nk b dz nl nm l nn\" >$ curl -fsSL <a href=\"https://raw.githubusercontent.com/SatoshiPortal/cyphernode/master/dist/setup.sh\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\">https://raw.githubusercontent.com/SatoshiPortal/cyphernode/master/dist/setup.sh</a> -o setup_cyphernode.sh &amp;&amp; chmod +x setup_cyphernode.sh &amp;&amp; ./setup_cyphernode.sh</span></pre>\n<p id=\"a7f8\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" ><strong class=\"lw mm\">Step 3: run through cyphernode set up</strong></p>\n<p id=\"e0fc\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >The first thing you will see a progress window (as shown in the screenshot below) that is basically the cyphernode set up downloading everything it requires to complete the installation.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_5rESzTIP49zxHc_4_0luKQ.png\" alt=\"\" width=\"1728\" height=\"281\"></p>\n<p id=\"601d\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, you will see is a prompt asking you for a password add one, obviously. Remember this password as it comes in handy (a lot) later.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_32xpgCDTEfRlPZc7kHvYeA.png\" alt=\"\" width=\"1405\" height=\"126\"></p>\n<p id=\"9090\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >After that you are presented with is the one below, press return as help is always good, right?</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_UTRCQ47iLhYSdRqpcIUvqg.png\" alt=\"\" width=\"1629\" height=\"772\"></p>\n<p id=\"d157\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, we want to install both Lightning and Opentimestamps client so press space on both of the options and then press return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_mfZMEocxoeTY81qqxIs4gQ.png\" alt=\"\" width=\"1570\" height=\"154\"></p>\n<p id=\"36fa\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, we want to select Testnet as we are testing.</p>\n<p id=\"f431\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, It asks to change user which is very good advice which we are going to ignore for the sake of simplicity. Go ahead and select N</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_bkGtuL0u-25E2ncZdYGxaQ.png\" alt=\"\" width=\"1596\" height=\"230\"></p>\n<p id=\"d99f\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, select \"N\". I will be honest with you we are still not 100% sure what is \"<a href=\"https://support.blockchain.com/hc/en-us/articles/360000939843-Understanding-the-xPub-and-address-generation\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">xPub</strong></a>\" and until we do and can make an informed decision about it we are going to ignore its existence.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_dUY2gi8J_BJTnhUAEwbdbQ.png\" alt=\"\" width=\"1558\" height=\"240\"></p>\n<p id=\"1836\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, We have to give an encryption passphrase that gatekeeper will use for authentication. Go ahead and add one.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_9RdYsmKXAcqjfFidUyGdqQ.png\" alt=\"\" width=\"1190\" height=\"316\"></p>\n<p id=\"805b\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, select a port. 2009 is fine so just press return</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_qc2QpsDo2Bq5Hdleo7zHhw.png\" alt=\"\" width=\"1598\" height=\"54\"></p>\n<p id=\"8fa6\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, set up the IP’s we are going to run everything over 127.0.0.1 for now so just press return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_LSCrWW2NjTzszrhQ6NOMIA.png\" alt=\"\" width=\"1596\" height=\"294\"></p>\n<p id=\"33b2\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Again just go for the default 127.0.0.1</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_uWWWzlj8neoanqDUjtnndw.png\" alt=\"\" width=\"1625\" height=\"253\"></p>\n<p id=\"9a3f\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Give it a name</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_sxqn17HaChZbQcRQuzhXbw.png\" alt=\"\" width=\"1636\" height=\"158\"></p>\n<p id=\"78b5\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Give it a colour</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_yv4Ev9iqhn3-hWydMgdnkA.png\" alt=\"\" width=\"1615\" height=\"192\"></p>\n<p id=\"7d7e\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Now, It is telling us it will look after the full node for us yay. Press return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_j94uJSKmp90A5ZA357R8XQ.png\" alt=\"\" width=\"1634\" height=\"263\"></p>\n<p id=\"2073\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, we have to add an RPC username. \"admin\" is always good</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_BQwX_NXe6P-d_lCZtuJHEA.png\" alt=\"\" width=\"1149\" height=\"145\"></p>\n<p id=\"f324\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, we have to add an RPC password.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/pass.png\" alt=\"\" width=\"1075\" height=\"50\"></p>\n<p >Next, type \"N’ as we want a full node that is not in \"<a href=\"https://coinguides.org/bitcoin-blockchain-pruning/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">prune</strong></a>\" mode so we can fully validate transactions.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_nnXroHU5WM0GWbRnG3wutg.png\" alt=\"\" width=\"1153\" height=\"230\"></p>\n<p id=\"1345\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, you can add a UA comment here if you want (we did not)</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_wY4DhRr7ZzuHOTjJIxeSBw.png\" alt=\"\" width=\"1634\" height=\"128\"></p>\n<p id=\"6501\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, Press return as we are presented with one option and luckily it is the option we want.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_Ec7rPJao_DpzA2RNP53NZQ.png\" alt=\"\" width=\"1635\" height=\"224\"></p>\n<p id=\"1d34\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, you are going to be asked for the location of where to put the files just press return 6 times as the defaults are good and you will be presented with the below</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_CF3iKmOGsHV4qko4LI-k0Q.png\" alt=\"\" width=\"1284\" height=\"890\"></p>\n<p id=\"2c1b\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, We want to expose the gatekeeper so just press \"Y\" and then return</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_sJV62NV2s2Eu3sBjlE6uoA.png\" alt=\"\" width=\"1157\" height=\"42\"></p>\n<p id=\"64b9\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, again we want to expose the full node so press \"Y\" followed by return again.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_OS7NSnWin3KnsVHJGEFOEg.png\" alt=\"\" width=\"1207\" height=\"202\"></p>\n<p id=\"5eee\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >We want Lignthing to be accessible outside the Docker network so select \"Y\" followed by return.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_JcwR6NvFZasYgzbJjd6f5w.png\" alt=\"\" width=\"1550\" height=\"181\"></p>\n<p id=\"e067\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, you want to choose from docker-compose or docker swarm. We selected docker-compose and suggest you do the same.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_7hqg95z72bjP1gKofF3hPw.png\" alt=\"\" width=\"1586\" height=\"287\"></p>\n<p id=\"e6b5\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, type \"Y\" as it is always good to clean up after yourself.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_rKIXdzxjPU30zs7e04zbXg.png\" alt=\"\" width=\"1497\" height=\"178\"></p>\n<p id=\"e95b\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Finally, you will see some output (like the screenshot below) that is the installation completed.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_NA0oeUJvCSUUCZF2T2vpcg.png\" alt=\"\" width=\"1189\" height=\"472\"></p>\n<p id=\"3113\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Once it is finished you will see the following</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_y-mrWGjY6fS8Zj007WiF3w.png\" alt=\"\" width=\"1368\" height=\"315\"></p>\n<h1 id=\"mcetoc_1dkbhkc540\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" > </h1>\n<h1 id=\"1f73\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Update cyphernode</h1>\n<p id=\"65bb\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >To upgrade to the most recent version, just get and run the most recent version of the setup.sh file as described in the previous section. Migration should be taken care of by the script.</p>\n<p id=\"00d8\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Your proxy’s database won’t be lost. Migration scripts are taking care of automatically migrating the database when starting the proxy.</p>\n<h1 id=\"da79\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Change cyphernode configuration</h1>\n<p id=\"549e\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >If you would like to make some changes such as add/remove lightning then you simply the type in the command below.</p>\n<pre class=\"ko kp kq kr ks dv gg df\"><span id=\"f5ca\" class=\"my li bf av nk b dz nl nm l nn\" >./setup_cyphernode.sh</span></pre>\n<p id=\"2d1f\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >This will ask you for your password and run you through the set up one more time quickly allowing you to make changes.</p>\n<p id=\"dc0c\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" ><em class=\"ms\">*Note, if you enable Lightning in a pruned node this will cause the errors we listed below as Lighting (in cyphernode at the moment) cannot be run on a pruned node so will require a rescan. Support for this was added to Bitcoin Core 0.18.0 so I am sure support will be added soon.</em></p>\n<h1 id=\"390f\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Using cyphernode</h1>\n<h2 id=\"3f9f\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >Starting cyphernode</h2>\n<p id=\"f489\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >The first thing we have to do is to start \"<a href=\"https://cyphernode.io/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">cyphernode</strong></a>\" to do this go to your terminal and type the following</p>\n<pre class=\"ko kp kq kr ks dv gg df\"><span id=\"b5f8\" class=\"my li bf av nk b dz nl nm l nn\" >./start.sh</span></pre>\n<p id=\"1f36\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >and you will get a screenshot similar to the one below</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_0ipdfn9XmrRzw8dbpJn_Uw.png\" alt=\"\" width=\"2096\" height=\"799\"></p>\n<blockquote class=\"po\">\n<div id=\"a953\" class=\"pp pq pr av jn b ps pt pu pv pw px mh\" >\n<p class=\"jn b py pz az\"><em class=\"qa\">*Note, sometimes you will get an error with \"Testing Bitcoin\" or \"Testing Lightning\". This appears to be an issue with the respective blockchains syncing and if you stop it and start cyphernode again it eventually works.</em></p>\n</div>\n</blockquote>\n<p id=\"e6d7\" class=\"lu lv bf av lw b lx qb lz qc mb qd md qe mf qf mh\" >The screenshots below show the most common errors you. will encounter whilst running \"<a href=\"https://cyphernode.io/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">cyphernode</strong></a>\"</p>\n<p id=\"5a39\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >This means that Bitcoin has failed to start.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_GNwZYG66IsV9KEQm8Ty6xA.png\" alt=\"\" width=\"1980\" height=\"1098\"></p>\n<p id=\"988f\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >This means that Notifier failed to start.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_tFFz3Ka5oQDQ7Fs6pAF9OA.png\" alt=\"\" width=\"1745\" height=\"507\"></p>\n<p id=\"cf99\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >This means that Lightning has failed to start.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_ZjLGtZO8kszrh2IZo_JYSA.png\" alt=\"\" width=\"2032\" height=\"904\"></p>\n<p id=\"469c\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >if you see an error like the one above type the command below and it will show you all the output and you should see an error related to Bitcoin.</p>\n<pre class=\"ko kp kq kr ks dv gg df\"><span id=\"d418\" class=\"my li bf av nk b dz nl nm l nn\" >docker-compose logs</span></pre>\n<p id=\"1594\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >In our experiecne, these happen when there is an issue with the blockchain such as it has to be rescanned or something and the simplest solution is to delete the testnet3 directory which can be found in the following directory.</p>\n<pre class=\"ko kp kq kr ks dv gg df\"><span id=\"23b9\" class=\"my li bf av nk b dz nl nm l nn\" >/cyphernode/bitcoin/</span></pre>\n<p id=\"0f78\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >If you delete this folder and run \"<strong class=\"lw mm\">./start.sh</strong>\" again it should work. Although you will have to download the full blockchain again.</p>\n<h2 id=\"da38\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >Stopping cyphernode</h2>\n<p id=\"c11f\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >To stop the \"<a href=\"https://cyphernode.io/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">cyphernode</strong></a>\" simply type the following command in terminal</p>\n<pre class=\"ko kp kq kr ks dv gg df\"><span id=\"f7ff\" class=\"my li bf av nk b dz nl nm l nn\" >./stop.sh</span></pre>\n<p id=\"d816\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Once it stops you will see the following out in the terminal.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_mZs5Q9g-w3qqemCStUWSTQ.png\" alt=\"\" width=\"1632\" height=\"811\"></p>\n<h2 id=\"7198\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >The Admin</h2>\n<p id=\"be32\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >Yay, now we have it up and running let us log into the admin and check this its all working as excepted.</p>\n<p id=\"8964\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >You may see the https issue (as shown below) if so just click advanced and then proceed to site.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_rxX3vdim4j2M9Z7tuTx1ow.png\" alt=\"\" width=\"1535\" height=\"1104\"></p>\n<p id=\"237d\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >The next thing you have to do is add your username and password that you selected during setup.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_3qHx0n-gHhPH-c8e9wI8xw.png\" alt=\"\" width=\"2506\" height=\"1047\"></p>\n<p id=\"e709\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >Next, you will see the screen below. There is not much we can do with the admin at present. I assume they have big plans for it in the future but the key thing is the progress bar as we want a fully synced blockchain before it can be of any real use to us.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/20/1_SGTYzcKIGbwjqj8WFzMt6A.png\" alt=\"\" width=\"2802\" height=\"1323\"></p>\n<h2 id=\"f34d\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >Testing the RPC</h2>\n<p id=\"c759\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >Remember the RPC? We covered in in part 8 which you can review \"<a class=\"cb bx mi mj mk ml\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/https-medium-com-cryptoskillz-58791-part-8-working-with-fullnodes-f2b32d3c57b4\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">here</strong></a>\" well we should be able to call it here. So let us go ahead and try it. Type the following command into the terminal</p>\n<pre class=\"ko kp kq kr ks dv gg df\"><span id=\"dd49\" class=\"my li bf av nk b dz nl nm l nn\" >curl --user admin  --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }'     -H 'content-type: text/plain;' http://127.0.0.1:18332/</span></pre>\n<p id=\"2e1d\" class=\"lu lv bf av lw b lx mn lz mo mb mp md mq mf mr mh\" >You will be asked for your password and once you enter it you will get something like the following response.</p>\n<pre class=\"ko kp kq kr ks dv gg df\"><span id=\"36b3\" class=\"my li bf av nk b dz nl nm l nn\" >{<br>   \"result\":{<br>      \"chain\":\"test\",<br>      \"blocks\":313988,<br>      \"headers\":1572503,<br>      \"bestblockhash\":\"00000000000000e1eb33f4e1624f014693b233120fee8ad8e48becf7b1915dd1\",<br>      \"difficulty\":3020938.8186549,<br>      \"mediantime\":1418445102,<br>      \"verificationprogress\":0.07199333815247766,<br>      \"initialblockdownload\":true,<br>      \"chainwork\":\"00000000000000000000000000000000000000000000000139bde18ff233cec0\",<br>      \"size_on_disk\":1608549685,<br>      \"pruned\":false,<br>      \"softforks\":[<br>         {<br>            \"id\":\"bip34\",<br>            \"version\":2,<br>            \"reject\":{<br>               \"status\":true<br>            }<br>         },<br>         {<br>            \"id\":\"bip66\",<br>            \"version\":3,<br>            \"reject\":{<br>               \"status\":false<br>            }<br>         },<br>         {<br>            \"id\":\"bip65\",<br>            \"version\":4,<br>            \"reject\":{<br>               \"status\":false<br>            }<br>         }<br>      ],<br>      \"bip9_softforks\":{<br>         \"csv\":{<br>            \"status\":\"defined\",<br>            \"startTime\":1456790400,<br>            \"timeout\":1493596800,<br>            \"since\":0<br>         },<br>         \"segwit\":{<br>            \"status\":\"defined\",<br>            \"startTime\":1462060800,<br>            \"timeout\":1493596800,<br>            \"since\":0<br>         }<br>      },<br>      \"warnings\":\"\"<br>   },<br>   \"error\":null,<br>   \"id\":\"curltest\"<br>}</span></pre>\n<h2 id=\"f6cf\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >Testing the REST</h2>\n<p id=\"44ee\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >REST is disabled by default but we can easily enable it as we did in the previous \"<a class=\"cb bx mi mj mk ml\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/https-medium-com-cryptoskillz-58791-part-8-working-with-fullnodes-f2b32d3c57b4\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">tutoria</strong></a><strong class=\"lw mm\">l</strong>\" though we mostly use the RPC so it is not essential to do so.</p>\n<h2 id=\"bb21\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >Testing the API</h2>\n<p id=\"57ad\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" ><em class=\"ms\">*note as we mentioned above we were unable to get the API working but as soon as we do we will loop back and update this.</em></p>\n<h2 id=\"59f2\" class=\"my li bf av au el mz na nb nc nd ne nf ng nh ni nj\" >Conclusion</h2>\n<p id=\"7df9\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >We have successfully set up and used \"<a href=\"https://cyphernode.io/\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">cyphernode</strong></a>\" and it is impressive. It is still a very young piece of software and it still works extremely well. This is why we are going to use this as the core for \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">ECS</strong></a>\" going forward and as it is using standard \"<a href=\"https://en.bitcoin.it/wiki/API_reference_(JSON-RPC)\" class=\"cb bx mi mj mk ml\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mm\">RPC</strong></a>\" calls this will require not much effort to fully integrate (isn’t Bitcoin brilliant?). This is what we will do in the next article.</p>\n</div>\n</section>\n</div>\n</article>\n<div class=\"eb ec ed m ee ef eg eh ei e\" > </div>",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-08-08T12:32:00+07:00",
            "date_modified": "2019-09-20T12:32:17+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/the-casa-node.html",
            "url": "https://cryptoskillz.com/blog/the-casa-node.html",
            "title": "The Casa Node",
            "summary": "<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/19/1_UervJWdfE4srKFWkx6kIoA.png\" alt=\"\" width=\"1313\" height=\"1115\"></p>\n<p> </p>\n",
            "content_html": "<p><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/19/1_UervJWdfE4srKFWkx6kIoA.png\" alt=\"\" width=\"1313\" height=\"1115\"></p>\n<p> </p>\n\n<article>\n<div>\n<section class=\"jd je jf jg jh\">\n<div class=\"ae ji ab dn v w\">\n<h1 id=\"554a\" class=\"kx ky bf av au el kz la lb lc ld le lf lg lh li lj\" >Preamble</h1>\n<p id=\"93ee\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >Whilst we are in the testing mode we would like to give away BTC (via lightning) that is right, free money! If you would like free money \"<a href=\"https://twitter.com/crypto_skillz\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">tweet</strong></a>\" at us with your lightning address and we will send you some :]</p>\n<p > </p>\n<h1 id=\"eaf0\" class=\"kx ky bf av au el kz la lb lc ld le lf lg lh li lj\" >Introduction</h1>\n<p id=\"ad64\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >This guide aims to program a website to accept \"<a href=\"https://bitcoin.org/en/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">Bitcoin</strong></a>\". In the \"<a class=\"cb bx ly lz ma mb\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/part-16-integrating-lightning-a5c9c3ad7117\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">previous tutorial</strong></a>\", We tried (and failed) to get a Bitcoin full node up and running with Lightning support to a level that we were happy with.</p>\n<p id=\"9214\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >Bear in mind that we want to use Bitcoin and Lighting in an e-commerce model and this is where we run into the issues as everything (at this point) has been designed to be running locally and for direct one to one payments via lightning channels.</p>\n<p id=\"0e95\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >At this point, it seemed like an ideal time to invest in some prebuilt Bitcoin+Lightning nodes to see how they perform. I started with a \"<strong><a href=\"https://store.casa/lightning-node/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\">Casa node</a></strong>\"</p>\n<h1 id=\"2be6\" class=\"kx ky bf av au el kz la lb lc ld le lf lg lh li lj\" >Setup</h1>\n<p id=\"c907\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >I am not going to go through the full setup procedure it has been covered in detail in many other tutorials. I recommend this excellent setup video created by Guy Swann if you are having problems setting this up.</p>\n<figure class=\"ke kf kg kh ki fr\">\n<div class=\"kq l ds\">\n<div class=\"mi l\"><iframe width=\"854\" height=\"480\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FdfUHEgPrZt8%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DdfUHEgPrZt8&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FdfUHEgPrZt8%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" frameborder=\"0\" title=\"Casa Node Initializing &amp; Router Configuration\" class=\"du n o kn ab\" scrolling=\"auto\" ></iframe></div>\n</div>\n</figure>\n<h1 id=\"1ed0\" class=\"kx ky bf av au el kz la lb lc ld le lf lg lh li lj\" >Initial thoughts</h1>\n<p id=\"04e8\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >Our first thought is, we like it. We like it a lot. It is as they promised, plug and play. It literally took 10 minutes to set up and a few hours to sync the blockchains (as per normal). Also when I emailed for supper the \"<a href=\"https://twitter.com/lopp\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">Jameson Lopp</strong></a>\" (the CTO) answered the request, how cool is that.</p>\n<h1 id=\"5093\" class=\"kx ky bf av au el kz la lb lc ld le lf lg lh li lj\" >Tweaking the Casa Node</h1>\n<p id=\"0923\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >Once you have set it up and has fully synced you will want to make a few tweaks/additions which we have listed below. If you would like to set up your first Lightning channel and make a payment (which is beyond the scope of what we are covering here) use this \"<a href=\"https://blog.keys.casa/tutorial-sending-your-first-payment-and-what-to-do-if-you-think-its-stuck/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">guide</strong></a>\".</p>\n<h2 id=\"8c53\" class=\"mj ky bf av au el mk ml mm mn mo mp mq mr ms mt mu\" >Casa chrome extension</h2>\n<p id=\"8fbf\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >The next thing you will want to install is the Casa chrome extension which can be found \"<a href=\"https://chrome.google.com/webstore/detail/casa-extension/lnaedehiikghclgaikolambpbpeknpef\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">here</strong></a>\". This basically allows you to access your CASA node via a chrome extension. More information on this can be found \"<a href=\"https://blog.keys.casa/casa-browser-extension/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">here</strong></a>\". Now (and yes this is a recurring theme) we cannot use the chrome extension externally we can only assume that the TOR support is coming. This is a recurring thing and we get it self sovereignty, security etc but to us, part of financial freedom is being to transact anywhere at any time but CASA is hell-bent on making me do everything from a home network. As constant travellers, this is far from ideal.</p>\n<h2 id=\"f26b\" class=\"mj ky bf av au el mk ml mm mn mo mp mq mr ms mt mu\" >Enabling TOR</h2>\n<p id=\"993b\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >If you do not want to go through the hassle of port forwarding etc CASA suggest that you set up \"<a href=\"https://blog.keys.casa/node-tutorial-running-your-casa-node-on-tor/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">TOR</strong></a>\" which we did but we also enabled \"<a href=\"https://keys.casa/node-help/#port-forwarding\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">port forwarding</strong></a>\" as we want to be able to connect to it via our server (which does not have TOR support yet)</p>\n<p id=\"5674\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >When you enable TOR support and user a compatible browser. We use \"<a href=\"https://brave.com/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">Brave</strong></a>\" but feel free to use whatever TOR browser you prefer.</p>\n<h1 id=\"7574\" class=\"kx ky bf av au el kz la lb lc ld le lf lg lh li lj\" >Advanced modifications</h1>\n<blockquote class=\"mv mw mx\">\n<p id=\"cc93\" class=\"lk ll bf my lm b ln md lp me lr mf lt mg lv mh lx\" ><strong class=\"lm mc\">WARNING</strong></p>\n<p id=\"a4fc\" class=\"lk ll bf my lm b ln md lp me lr mf lt mg lv mh lx\" ><strong class=\"lm mc\">IF YOU ACCESS YOUR CASA NODE IN THE WAYS DESCRIBED BELOW IT WILL INVALIDATE YOUR WARRANTY. THE CASA NODE WAS DESIGNED TO BU USER-FRIENDLY FOR NON-TECHNICAL PEOPLE — IT’S NOT REALLY DESIGNED TO BE A DEVELOPER NODE, WHICH IS WHY THE SYSTEM ENDED UP WITH BEING PRETTY HARD TO RECONFIGURE FROM THE COMMAND LINE.</strong></p>\n</blockquote>\n<h2 id=\"1b70\" class=\"mj ky bf av au el mk ml mm mn mo mp mq mr ms mt mu\" >Log into the CASA Node</h2>\n<p id=\"1f35\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >First things first, you will require a keyboard and mouse to do this step. Plug these into the case node. The login info for your casa Node is easy to find if you want it. Send a \"<a href=\"https://twitter.com/crypto_skillz\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">Tweet to us</strong></a><strong class=\"lm mc\">\"</strong> or email Casa at \"<a href=\"http://help@team.casa/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">help@team.casa</strong></a><strong class=\"lm mc\">\"</strong></p>\n<p id=\"6b83\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >Now, you can just work from the keyboard and mouse you plugged in the CASA node. This is the most secure method and I guess will not invalidate your warranty. Please check with CASA as we are speculating here. However, we want to be able to access it remotely from wherever we are in the world. So we want to enable SSH which we cover below.</p>\n<h1 id=\"7322\" class=\"kx ky bf av au el kz la lb lc ld le lf lg lh li lj\" >SSH access</h1>\n<p id=\"d2dc\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >Remember if you do the below it will invalidate your warranty so if that kind of thing bothers you then please do not do this, obviously.</p>\n<p id=\"fd17\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >ok, let us continue now we are logged into the CASA Node and the good news is SSH is installed so you just have to enable it by using the following commands</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"2b44\" class=\"mj ky bf av mz b dz na nb l nc\" >sudo systemctl enable ssh<br>sudo systemctl start ssh</span></pre>\n<p id=\"f172\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >At this point, you should be able to SSH into your box using the IP address in the connection tab as shown below.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/19/1_GJKg3aqhuYuouZgvV9QRNQ.png\" alt=\"\" width=\"2682\" height=\"1360\"></p>\n<p id=\"799e\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >Once you have done this open up a terminal window. We use a mac if you use windows use \"<a href=\"https://www.putty.org/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">putty</strong></a>\" or whatever you prefer.</p>\n<p id=\"7ba2\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >type the following command and enter the password when prompted (replace the USERNAME with the one provided to you and the IP with the one in your dashboard)</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"fd92\" class=\"mj ky bf av mz b dz na nb l nc\" >ssh &lt;USERNAME&gt;@192.168.1.103</span></pre>\n<p id=\"d5c7\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >If all has gone well you should now be connected the CASA node and we can start to look at the bitcoin.conf file.</p>\n<h2 id=\"7d7f\" class=\"mj ky bf av au el mk ml mm mn mo mp mq mr ms mt mu\" >Accessing Bitcoin.conf</h2>\n<p id=\"08c4\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >CASA use docker (which is a good thing) and to access this we will have to go into the docket container</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"ec07\" class=\"mj ky bf av mz b dz na nb l nc\" >docker exec -it bitcoind bash</span></pre>\n<p id=\"81a0\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >and we can make the changes by opening the bitcoin.conf file as shown below. Please note I have not made any changes in the tutorial as I want to gauge the impact on the CASA node, wait for several updates (to test the reapplying process) and also to make sure it does not break anything. In the next tutorial, we will make the necessary changes to allow \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">ECS</strong></a>\" to access it.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"e50a\" class=\"mj ky bf av mz b dz na nb l nc\" >nano chains/bitcoind/conf/bitcoin.conf</span></pre>\n<p id=\"0324\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >then exit the docker container (ctrl + c) and then restart it with the following command</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"b882\" class=\"mj ky bf av mz b dz na nb l nc\" >docker restart bitcoind</span></pre>\n<h2 id=\"8f93\" class=\"mj ky bf av au el mk ml mm mn mo mp mq mr ms mt mu\" >Bitcoin REST API</h2>\n<p id=\"40e5\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >If you remember from our previous \"<a class=\"cb bx ly lz ma mb\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/part-16-integrating-lightning-a5c9c3ad7117\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">tutorial</strong></a>\" we use the REST API to access the node for a number of functions. this is not enabled by default on the CASA node and though we can enable it every time CASA sends an update it will override our changes.</p>\n<p id=\"a6a0\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >This is not the end of the world as the updates have to be manually applied to the CASA node, it is however mildly annoying. We have reached out them to ask to add it their dashboard. If they do great if not we will fork the \"<a href=\"https://github.com/Casa/Casa-Node-Dashboard/tree/master/helpers\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">code</strong></a><strong class=\"lm mc\">\"</strong> and make the changes ourselves.</p>\n<h2 id=\"d107\" class=\"mj ky bf av au el mk ml mm mn mo mp mq mr ms mt mu\" >Access Bitcoin via JSONRPC</h2>\n<p id=\"cd26\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >Now let us run a simple CURL request to see if it is working. It will ask you for a password. This is the same one that you set when setting up your CASA node that you use to access <a href=\"http://casa-node.local/login\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\">http://casa-node.local/</a></p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"e21f\" class=\"mj ky bf av mz b dz na nb l nc\" >curl — user casa — data-binary ‘{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddr\", \"params\": [] }’ -H ‘content-type: text/plain;’ <a href=\"http://203.150.152.68:8333/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\">http://</a><a href=\"http://192.168.1.103/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\">192.168.1.103</a><a href=\"http://203.150.152.68:8333/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\">.68:8333</a></span></pre>\n<h1 id=\"1573\" class=\"kx ky bf av au el kz la lb lc ld le lf lg lh li lj\" ><strong class=\"ch\">Conclusion</strong></h1>\n<p id=\"f0ac\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >The Casa Node is a breeze to set up and use truly a great product if you are looking for self-sovereignty and the ability to transact one to one to one using the lightning network and this is a great thing but it has the ability to do so much more and for our requirements (at this moment in time it falls short) which is to be able to run an \"<a href=\"https://cryptoskillz.com/srcrypto/prod/www/\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">e-commerce store</strong></a>\". To be fair they never marketed it as a tool to do the above but we know it can with a few small tweaks.</p>\n<p id=\"05e9\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >Next time we will use the CASA mode we will see if it is possible to integrate this with \"<a href=\"https://github.com/cryptoskillz/ECS\" class=\"cb bx ly lz ma mb\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lm mc\">ECS</strong></a>\" as well as access the CASA via TOR. Should be fun. Next article we will be playing with Cyphernode.</p>\n<p > </p>\n<h1 id=\"eeaf\" class=\"kx ky bf av au el kz la lb lc ld le lf lg lh li lj\" >DISCLAIMERS</h1>\n<p id=\"04c9\" class=\"lk ll bf av lm b ln lo lp lq lr ls lt lu lv lw lx\" >1) Lightning is still early and experimental you should not be putting an amount of money into it that you are not comfortable losing.</p>\n<p id=\"38e8\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >2) These views are my own DYOR before you make any purchase.</p>\n<p id=\"ac61\" class=\"lk ll bf av lm b ln md lp me lr mf lt mg lv mh lx\" >I was not paid by CASA (or anyone) to write this article I bought this node with my own monies and the receipt is shown below.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/19/1_vIxePGVGZpMOxbfRm8zuUg.png\" alt=\"\" width=\"1414\" height=\"1124\"></p>\n</div>\n</section>\n</div>\n</article>",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-06-23T12:30:00+07:00",
            "date_modified": "2019-09-20T12:30:50+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/integrating-3rd-party-lightning.html",
            "url": "https://cryptoskillz.com/blog/integrating-3rd-party-lightning.html",
            "title": "Integrating 3rd party Lightning",
            "summary": "<figure class=\"post__image post__image\" contenteditable=\"false\"><img src=\"https://cryptoskillz.com/blog/media/posts/18/1_a22cZdqrqt3k_KXL4CcfDg.jpeg\" alt=\"\" width=\"2088\" height=\"3152\">\n<figcaption contenteditable=\"true\">\n<figure class=\"ke kf kg kh ki fr x y paragraph-image\">\n<figcaption class=\"az dz kx ky hh dn x y kz la au dx\" data-selectable-paragraph=\"\">Photo by <a href=\"https://unsplash.com/photos/3qucB7U2l7I?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Brandon Morgan</a> on <a href=\"https://unsplash.com/search/photos/lightning?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></figcaption>\n</figure>\n</figcaption>\n</figure>\n",
            "content_html": "<figure class=\"post__image post__image\" ><img src=\"https://cryptoskillz.com/blog/media/posts/18/1_a22cZdqrqt3k_KXL4CcfDg.jpeg\" alt=\"\" width=\"2088\" height=\"3152\">\n<figcaption >\n<figure class=\"ke kf kg kh ki fr x y paragraph-image\">\n<figcaption class=\"az dz kx ky hh dn x y kz la au dx\" >Photo by <a href=\"https://unsplash.com/photos/3qucB7U2l7I?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Brandon Morgan</a> on <a href=\"https://unsplash.com/search/photos/lightning?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></figcaption>\n</figure>\n</figcaption>\n</figure>\n\n<article>\n<div>\n<section class=\"jd je jf jg jh\">\n<div class=\"ae ji ab dn v w\">\n<h1 id=\"8272\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Introduction</h1>\n<p id=\"ad64\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >This guide aims to program a website to accept \"<a href=\"https://bitcoin.org/en/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Bitcoin</strong></a>\". In the previous tutorial, We added \"<a href=\"https://strike.acinq.co/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">strike</strong></a>\" as a standalone project. This time we are going to fully integrate it into our \"<a href=\"https://github.com/cryptoskillz/ECS/tree/strikeintegration/server\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">server</strong></a>\" and \"<a href=\"https://github.com/cryptoskillz/ECS/tree/strikeintegration/cdn\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">CDN</strong></a>\" (\"<a href=\"https://github.com/cryptoskillz/ECS/blob/strikeintegration/cdn/js/sr.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">sr.js</strong></a>\")</p>\n<p > </p>\n<h1 id=\"8136\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >The SQL</h1>\n<p id=\"e9c5\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >The SQL in this release changed a lot as we are now offering multipile payment types we could no longer rely on the BTC address to be the join across the tables. Also because a lightning payment requires an amount which we do not always have we cannot cache a lightning address the way we do a Bitcoin one.</p>\n<p id=\"3c3f\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >As a result, we implemented a session which is based on \"<a href=\"https://www.npmjs.com/package/uuid\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">uuidv1</strong></a>\"</p>\n<p id=\"7e9c\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >We changed the name of the session table to \"usersessions\" added a session id as well as changed address into 2 fields \"btcaddress\" and \"lightaddress\". Note we could have used an address lookup table here to manage many types, however, we will most likely only support BTC and Lightning(if this changes we can easily implement this change)</p>\n<p id=\"feb7\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >We also added a timestamp so we know when the session was created in case we ever decided to add features such as cart abandonment etc.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"5176\" class=\"mm lg bf av mn b dz mo mp l mq\" >CREATE TABLE `usersessions` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `processed` INTEGER DEFAULT 0,<br> `swept` INTEGER DEFAULT 0,<br> `userid` INTEGER,<br> `net` INTEGER DEFAULT 1,<br> `amount` TEXT DEFAULT 0,<br> `paymenttype` INTEGER DEFAULT 1,<br> `sessionid` TEXT,<br> `sessiontime` INTEGER,<br> `btcaddress` TEXT,<br> `lightaddress` TEXT<br>);</span></pre>\n<p id=\"3243\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >The only other changes we made was to replace the \"address\" join in other fields and use \"sessoinid\" as well.</p>\n<h1 id=\"24b6\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >The Code</h1>\n<p id=\"9cf2\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >The branch for the code for this release can be found \"<a href=\"https://github.com/cryptoskillz/ECS/tree/strikeintegration\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">here</strong></a>\"</p>\n<h2 id=\"4cea\" class=\"mm lg bf av au el mr ms mt mu mv mw mx my mz na nb\" >WWW</h2>\n<p id=\"592e\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >We made one small change to the init function and that as to pass in the ability to turn Lightning on or off.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"79e9\" class=\"mm lg bf av mn b dz mo mp l mq\" >&lt;script type=\"text/javascript\"&gt;<br>       /*<br>          0 = server url<br>          1 = animated<br>          2 = quantity count<br>          3 = cdn url<br>          4 = uid<br>          5 = theme<br>          6 = billing address <br>          7 = shipping address<br>          8 = start country<br>          9 = lighting enabled<br>       */</span><span id=\"8fcb\" class=\"mm lg bf av mn b dz nc nd ne nf ng mp l mq\" ><br>       //local<br>SR.init([<br>\"<a href=\"http://127.0.0.1:3030/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:3030/</a>\",<br>false,<br>15,<br>\"<a href=\"http://127.0.0.1:8081/cdn/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8081/cdn/</a>\",<br>\"3\",<br>\"\",<br>1,<br>1,<br>\"GB\",<br>1<br>]);</span></pre>\n<h2 id=\"af55\" class=\"mm lg bf av au el mr ms mt mu mv mw mx my mz na nb\" >CDN / SERVER</h2>\n<p id=\"a1c8\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >Most the changes this time were in \"<a href=\"https://github.com/cryptoskillz/ECS/blob/strikeintegration/cdn/js/sr.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">SR.js</strong></a>\" the \"<a href=\"https://github.com/cryptoskillz/ECS/tree/strikeintegration/server\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">server</strong></a>\" was obviously updated to handle the new requests. As I said we are no longer going to be listing all the code (as it is getting too long to read in a blog format) we will cover the salient updates.</p>\n<p id=\"ce2e\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" ><strong class=\"lu mg\">Session Generation</strong></p>\n<p id=\"defa\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >We now store a cookie in a session which means everytime you now do a hard refresh you call the server and create a new session. This not only speeds things up allows us to have multiple payment types in one session. Note we did not retrieve the cart contents on a hard refresh but we will do that in a future update.</p>\n<p id=\"322d\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >It also has the added bonus of giving us a preloader (in a way) which use (at present) to generate a BTC address but can make it do a lot. One idea as mentioned above is to send the user cart so we maintain cart integrity over time, hard refreshes etc.</p>\n<p id=\"8210\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" ><strong class=\"lu mg\">Multipile payment types</strong></p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/18/1_6Nxhy4i_b5kAX61HTSoDeg.png\" alt=\"\" width=\"1670\" height=\"991\"></p>\n<p id=\"714e\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >Now we have Lightning and Bitcoin to chose from this branches a number of UX flow and if we added more the complexity would rise more so we had to refactor the whole address/generation functionality on both the CDN and SERVER.</p>\n<p id=\"3a71\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" ><strong class=\"lu mg\">Server webhooks</strong></p>\n<p id=\"82ba\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >We had a lot of code in server webhooks which did not have to be there so we removed it and refactored the function.</p>\n<p id=\"b928\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" ><strong class=\"lu mg\">Misc</strong></p>\n<p id=\"3822\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >We fixed numerous bugs and refactored how a lot of the server code is working. It is a lot more friendly to work with now.</p>\n<h2 id=\"417c\" class=\"mm lg bf av au el mr ms mt mu mv mw mx my mz na nb\" >Admin</h2>\n<p id=\"6887\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >We made minimal changes to the admin, mainly the being able to deal with Lighting payments and the new session code. In a future update, we will focus exclusively on the admin as there is a lot we can be adding to improve this section.</p>\n<p > </p>\n<h1 id=\"e6de\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Conclusion</h1>\n<p id=\"6c4c\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >This now gives us a pretty decent platform to deal with Bitcoin and Lightning payments. Of course, we are going to replace \"<a href=\"https://strike.acinq.co/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">strike</strong></a>\" at some point with code completely under our control but this is adequate for now.</p>\n<p id=\"336a\" class=\"ls lt bf av lu b lv mh lx mi lz mj mb mk md ml mf\" >Next time around we will either clean up all the code and do a full regression in which case there will be no tutorial or implement an address cache method to be able to run ECS without any BTC node running on the server.</p>\n</div>\n</section>\n</div>\n</article>\n<div class=\"eb ec ed m ee ef eg eh ei e\" > </div>",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2019-01-23T12:29:00+07:00",
            "date_modified": "2019-09-20T12:29:29+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/adding-3rd-party-lightning.html",
            "url": "https://cryptoskillz.com/blog/adding-3rd-party-lightning.html",
            "title": "Adding 3rd party Lightning",
            "summary": "<figure class=\"post__image post__image\" contenteditable=\"false\"><img src=\"https://cryptoskillz.com/blog/media/posts/17/1_o-phpGJ9Fmh13YqxCs8y3A.jpeg\" alt=\"\" width=\"3456\" height=\"5184\">\n<figcaption contenteditable=\"true\">\n<figure class=\"kg kh ki kj kk ft x y paragraph-image\">\n<figcaption class=\"az dz kz la hj dn x y lb lc au dx\" data-selectable-paragraph=\"\">Photo by <a href=\"https://unsplash.com/photos/___Lnn9HGko?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">lee junda</a> on <a href=\"https://unsplash.com/search/photos/lightning?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></figcaption>\n</figure>\n</figcaption>\n</figure>\n<h1 id=\"4570\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" data-selectable-paragraph=\"\">Introduction</h1>\n<p id=\"ad64\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" data-selectable-paragraph=\"\">This guide aims to program a website to accept Bitcoin. In the previous tutorial, We removed \"<a href=\"https://globee.com/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">Globee</strong></a><strong class=\"lw mi\">\"</strong> so that we had 100% sovereignty over our code and by extension our money. Ironically we are going to add \"<a href=\"https://strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">strike</strong></a>\" which is a 3rd party lightning payment provider. Just as we did in the past we will start the easy way and then remove it and replace it with our own code at a later date.</p>\n<p id=\"3243\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">A quick note on the current lightning nodes. I played with \"<a href=\"https://github.com/lightningnetwork/lnd\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">LND</strong></a><strong class=\"lw mi\">\"</strong> and \"<a href=\"https://github.com/ElementsProject/lightning\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">c-lightning</strong></a>\" for a couple of weeks and could not get them to work to a satisfactory level to fulfil our needs \"<a href=\"https://github.com/lightningnetwork/lnd\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">LND</strong></a><strong class=\"lw mi\">\"</strong> required everything to be on the one server which meant our idea of injecting was just not practical and \"<a href=\"https://github.com/ElementsProject/lightning\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">c-lightning</strong></a> leaned too heavily on the \"<a href=\"https://github.com/ElementsProject/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">elements</strong></a>\" project for us to use it a standalone manner. However, this does not concern me as it is amazing software that is still in Alpha.</p>\n<h1 id=\"6a9e\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" data-selectable-paragraph=\"\">The SQL</h1>\n<p id=\"2dc8\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" data-selectable-paragraph=\"\">We made significant changes to the SQL (it was due) mainly to give the tables names that made sense.</p>\n<h2 id=\"c623\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" data-selectable-paragraph=\"\">ECS_ tables</h2>\n<p id=\"a911\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" data-selectable-paragraph=\"\">A number of tables to have the ECS_ prefix this means they are core tables to ECS such as user &amp; user settings</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"be05\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">ecs_coldstorageaddresses<br>ecs_emailtemplates<br>ecs_user<br>ecs_user_settings</span></pre>\n<h2 id=\"964f\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" data-selectable-paragraph=\"\">lookup_ tables</h2>\n<p id=\"ccb2\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" data-selectable-paragraph=\"\">the prefix lookup_ was introduced as a way to standardise the lookup data we will use in ECS.</p>\n<p id=\"db12\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\"><strong class=\"lw mi\">lookup_payment_providers<br></strong>This table is used to hold the payment providers at the moment we have \"Bitcoin Core Node\" and \"strike\" but we may add more in the future.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"110b\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">CREATE TABLE `lookup_payment_providers` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `providername` INTEGER,<br> `external` INTEGER DEFAULT 0<br>);</span></pre>\n<h2 id=\"53db\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" data-selectable-paragraph=\"\">order_ tables</h2>\n<p id=\"cfb9\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" data-selectable-paragraph=\"\">The tables with the order_ prefix are tables that relate directly to the order</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"7af6\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">order_meta<br>order_payment_details<br>order_product<br>order_product_meta</span><span id=\"e010\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">The product meta holds information about the product such as size</span><span id=\"c3eb\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">CREATE TABLE `order_product_meta` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `productid` INTEGER,<br> `metaname` TEXT,<br> `metavalue` TEXT<br>);</span><span id=\"10d1\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">The payment details table holds which method we used to process payment as well as any charge / return objects that the provided us. </span><span id=\"9742\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">CREATE TABLE `order_payment_details` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `address` TEXT,<br> `providerid` INTEGER,<br> `paymentobject` TEXT,<br> `paymentresponseobject` TEXT<br>);</span></pre>\n<h1 id=\"3ebe\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" data-selectable-paragraph=\"\">Strike</h1>\n<p id=\"fdc7\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" data-selectable-paragraph=\"\">\"<a href=\"https://strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">Strike</strong></a>\" is an excellent lightning implementation who have taken a lot of the heavy lifting away from us. Simply create an account and then get the api from the settings / API KEYS section as shown below.</p>\n<p data-selectable-paragraph=\"\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/17/1_4TPapRENaXVGKwh-7Bcaeg.png\" alt=\"\" width=\"1372\" height=\"811\"></p>\n<p id=\"d14a\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">add this api key to the .env file along with the endpoint</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"14bb\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">mainnet</span><span id=\"db30\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">STRIKEENDPOINT=<a href=\"https://api.strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://api.strike.acinq.co</a><br>STRIKEAPIKEY=sk_dsdsdsdsd</span><span id=\"2aa6\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">testnet</span><span id=\"c96e\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">STRIKEENDPOINT=<a href=\"https://api.strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://api.dev.strike.acinq.co</a><br>STRIKEAPIKEY=sk_dsdsdsdsd</span></pre>\n<h1 id=\"dca5\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" data-selectable-paragraph=\"\">The Code</h1>\n<p id=\"9b58\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" data-selectable-paragraph=\"\">In this tutorial, we have not integrated with SR.js as it was a brand new UX flow we wanted to get it working standalone first and integrate it later. You can find the code for this branch \"<a href=\"https://github.com/cryptoskillz/ECS/tree/strike\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">here</strong></a><strong class=\"lw mi\">\"</strong></p>\n<h2 id=\"8893\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" data-selectable-paragraph=\"\">HTML</h2>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"68f3\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">&lt;div id=\"order-preload\" align=\"center\"&gt;<br>    &lt;div &gt;Generating Invoice...&lt;/div&gt;<br>    &lt;div class=\"lds-dual-ring\"&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div class=\"order-qrcode\" id=\"order-qrcode\" style=\"display: none\"&gt;<br>  &lt;div id=\"order-details\"&gt;<br>    &lt;div  align=\"center\"&gt;<br>      &lt;div class=\"order-pr--number\" id=\"order-id\"&gt;&lt;/div&gt;<br>      &lt;span class=\"order-pr--pay\" id=\"order-amount\"&gt;&lt;/span&gt;<br>      &lt;span&gt;BTC&lt;/span&gt;<br>    &lt;/div&gt;<br>    &lt;canvas id=\"qr\" height=\"500%\" width=\"500%\"  align=\"center\"&gt;&lt;/canvas&gt;<br>    &lt;div id=\"lightaddress\" class=\"order-pr--value\"&gt;&lt;/div&gt;<br>    &lt;div&gt;<br>      &lt;a href=\"\" id=\"order-pr--wallet\" class=\"order-pr--wallet\"&gt;Open Wallet&lt;/a&gt;<br>      &lt;a href=\"\" id=\"order-pr--copy\" class=\"order-pr--copy\"&gt;Copy&lt;/a&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div id=\"order-thanks\" class=\"order-thanks\" style=\"display: none\" align=\"center\"&gt;<br>   Thanks you for your order<br>  &lt;/div&gt;<br>&lt;/div&gt;</span></pre>\n<p id=\"f96c\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">The above HTML creates a checkout experience as broken down below. Firstly we create a preloader that we use whilst we connect to the server and generate a charge.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"c3e6\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">&lt;div id=\"order-preload\" align=\"center\"&gt;<br>    &lt;div &gt;Generating Invoice...&lt;/div&gt;<br>    &lt;div class=\"lds-dual-ring\"&gt;&lt;/div&gt;<br>&lt;/div&gt;</span></pre>\n<p class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\"> </p>\n<p id=\"c57e\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">Next, we have the QR code as well as the payment address so the user can make payment.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"8186\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">&lt;div class=\"order-qrcode\" id=\"order-qrcode\" style=\"display: none\"&gt;<br>  &lt;div id=\"order-details\"&gt;<br>    &lt;div  align=\"center\"&gt;<br>      &lt;div class=\"order-pr--number\" id=\"order-id\"&gt;&lt;/div&gt;<br>      &lt;span class=\"order-pr--pay\" id=\"order-amount\"&gt;&lt;/span&gt;<br>      &lt;span&gt;BTC&lt;/span&gt;<br>    &lt;/div&gt;<br>    &lt;canvas id=\"qr\" height=\"500%\" width=\"500%\"  align=\"center\"&gt;&lt;/canvas&gt;<br>    &lt;div id=\"lightaddress\" class=\"order-pr--value\"&gt;&lt;/div&gt;<br>    &lt;div&gt;<br>      &lt;a href=\"\" id=\"order-pr--wallet\" class=\"order-pr--wallet\"&gt;Open Wallet&lt;/a&gt;<br>      &lt;a href=\"\" id=\"order-pr--copy\" class=\"order-pr--copy\"&gt;Copy&lt;/a&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;</span></pre>\n<p class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/17/1_CmGcDewwv1ZsoKT-J-dyQ.png\" alt=\"\" width=\"1070\" height=\"1253\"></p>\n<p id=\"3c3a\" data-selectable-paragraph=\"\">Lastly, we have the thank you screen once payment has been made.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"c3d6\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">&lt;div id=\"order-thanks\" class=\"order-thanks\" style=\"display: none\" align=\"center\"&gt;<br>   Thanks you for your order<br>  &lt;/div&gt;<br>&lt;/div&gt;</span></pre>\n<h2 id=\"mcetoc_1dkb4ss0m0\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" data-selectable-paragraph=\"\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/17/1_UQXNAlEmUfr5c8WGd6_6zQ.png\" alt=\"\" width=\"1188\" height=\"484\"></h2>\n<h2 id=\"bed3\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" data-selectable-paragraph=\"\">JAVASCRIPT</h2>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"194d\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">&lt;script src=\"<a href=\"https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js</a>\"&gt;&lt;/script&gt;</span><span id=\"568f\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">    &lt;script&gt;<br>//hold the checkpayment interval function<br>var checkpaymentres = \"\";<br>var serverurl = \"<a href=\"http://127.0.0.1:3030/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:3030</a>\";<br>var address = \"\";<br>var thankstext = \"Thanks for your order.  You will receive nothing.\";<br>var request = new XMLHttpRequest();<br>//var server =<br>request.open(<br>  \"GET\",<br>  serverurl + \"/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free btc\",<br>  true<br>);<br></span><span id=\"69d4\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">request.onload = function() {<br>  if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>    // parse the data<br>    var data = JSON.parse(request.responseText);<br>    //debug<br>    //console.log(data.payment)<br>    lightelement = document.getElementById(\"lightaddress\");<br>    lightelement.innerHTML = data.payment.payment_request;<br>    orderid = document.getElementById(\"order-id\");<br>    orderid.innerHTML = \"Order \" + data.payment.id;<br>    var total = parseFloat(data.payment.amount) * 0.00000001;<br>    orderamount = document.getElementById(\"order-amount\");<br>    orderamount.innerHTML = \"Pay \" + String(total);<br>    // builds and displays the QR code<br>    new QRious({<br>      element: document.getElementById(\"qr\"),<br>      value: data.payment.payment_request,<br>      size: 400<br>    });<br>    preload = document.getElementById(\"order-preload\");<br>    preload.style = \"display: none\";<br>    qrcode = document.getElementById(\"order-qrcode\");<br>    qrcode.style = \"display: visible\";<br>    qrcode = document.getElementById(\"order-pr--wallet\");<br>    qrcode.href = \"lightning:\" + data.payment.payment_request;<br>    address = data.payment.payment_request;</span><span id=\"5434\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//check for payment every 10 seconds<br>    checkpaymentres = setInterval(checkPayment, 10000);<br>  }<br>};<br>request.onerror = function() {<br>  // There was a connection error of some sort<br>};<br>request.send();</span><span id=\"6510\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">function stopPaymentCheck() {<br>  clearInterval(checkpaymentres);<br>}</span><span id=\"c48d\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">function checkPayment() {<br>  //debug<br>  //console.log('check payment ticker')<br>  //var url = serverurl+\"/webhook/checkpayment?address=\"+address+\"&amp;token=\"+token;<br>  //var url = serverurl+\"webhook/checkStrikePayment?address=\"+address;<br>  //debug<br>  console.log(\"checking for payment for address:\" + address);<br>  request.open(<br>    \"GET\",<br>    serverurl + \"/webhook/checkstrikepayment?address=\" + address,<br>    true<br>  );<br>  //request.open('GET',\"<a href=\"https://ecs.cryptoskillz.com/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://ecs.cryptoskillz.com/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free</a> btc\", true);<br>  //call it<br>  request.onload = function() {<br>    if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>      // parse the data<br>      var data = JSON.parse(request.responseText);<br>      //debug<br>      //console.log(data.status)</span><span id=\"0ac7\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">if (data.status == 1) {<br>        orderthanks = document.getElementById(\"order-thanks\");<br>        orderthanks.style = \"display: visible\";<br>        orderthanks.innerHTML = thankstext;</span><span id=\"a14f\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">orderdetails = document.getElementById(\"order-details\");<br>        orderdetails.style = \"display: none\";<br>        stopPaymentCheck();<br>      }<br>    }<br>  };<br>  request.onerror = function() {<br>    // There was a connection error of some sort<br>  };<br>  request.send();<br>}</span><span id=\"836c\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">document.getElementById(\"order-pr--copy\").addEventListener(\"click\", function() {<br>  const el = document.createElement(\"textarea\"); // Create a &lt;textarea&gt; element<br>  el.value = address; // Set its value to the string that you want copied<br>  el.setAttribute(\"readonly\", \"\"); // Make it readonly to be tamper-proof<br>  el.style.position = \"absolute\";<br>  el.style.left = \"-9999px\"; // Move outside the screen to make it invisible<br>  document.body.appendChild(el);<br>  el.select(); // Select the &lt;textarea&gt; content<br>  document.execCommand(\"copy\"); // Copy - only works as a result of a user action (e.g. click events)<br>  document.body.removeChild(el);<br>});   <br>&lt;/script&gt;</span></pre>\n<p id=\"f7cf\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">Let us take a look at this code and see what exactly is happening. The first thing we are doing is loading a QR class</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"d59f\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">&lt;script src=\"<a href=\"https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js</a>\"&gt;&lt;/script&gt;</span></pre>\n<p id=\"1cad\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">Next, we are setting up some variables:</p>\n<p id=\"3c5a\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\"><strong class=\"lw mi\">checkpaymentres</strong>: this is used to set the time check when we are looking for a payment.<br><strong class=\"lw mi\">serverurl</strong>: the URL of ECS server<br><strong class=\"lw mi\">address</strong>: the address returned from Strike for payment purposes<br><strong class=\"lw mi\">thankstest</strong>: the text to store display once an order is complete</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"936b\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">//hold the checkpayment interval function<br>var checkpaymentres = \"\";<br>var serverurl = \"<a href=\"http://127.0.0.1:3030/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:3030</a>\";<br>var address = \"\";<br>var thankstext = \"Thanks for your order.  You will receive nothing.\";</span></pre>\n<p id=\"f415\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">Next, we make an ajax call to ECS and telling it we want to generate an invoice.</p>\n<p id=\"19fc\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\"><strong class=\"lw mi\">uid</strong>: the userid we are using <br><strong class=\"lw mi\">currency</strong>: the currency we want to create the invoice in<br><strong class=\"lw mi\">amount</strong>: the amount in Satoshis for the invoice<br><strong class=\"lw mi\">desc</strong>: the description of the item we are selling in the invoice</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"f74a\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">var request = new XMLHttpRequest();<br>//var server =<br>request.open(<br>  \"GET\",<br>  serverurl + \"/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free btc\",<br>  true<br>);</span></pre>\n<p id=\"75bc\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">next, we wait for a response from the server and if the status is valid (between 200 and 400 we process it) we take the information from the response populate the <strong class=\"lw mi\">payment view </strong>and display it, hide the preloader view and start the <strong class=\"lw mi\">checkPayment</strong> timer.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"9d3f\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">request.onload = function() {<br>  if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>    // parse the data<br>    var data = JSON.parse(request.responseText);<br>    lightelement = document.getElementById(\"lightaddress\");<br>    lightelement.innerHTML = data.payment.payment_request;<br>    orderid = document.getElementById(\"order-id\");<br>    orderid.innerHTML = \"Order \" + data.payment.id;<br>    var total = parseFloat(data.payment.amount) * 0.00000001;<br>    orderamount = document.getElementById(\"order-amount\");<br>    orderamount.innerHTML = \"Pay \" + String(total);<br>    // builds and displays the QR code<br>    new QRious({<br>      element: document.getElementById(\"qr\"),<br>      value: data.payment.payment_request,<br>      size: 400<br>    });<br>    preload = document.getElementById(\"order-preload\");<br>    preload.style = \"display: none\";<br>    qrcode = document.getElementById(\"order-qrcode\");<br>    qrcode.style = \"display: visible\";<br>    qrcode = document.getElementById(\"order-pr--wallet\");<br>    qrcode.href = \"lightning:\" + data.payment.payment_request;<br>    address = data.payment.payment_request;</span><span id=\"7978\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//check for payment every 10 seconds<br>    checkpaymentres = setInterval(checkPayment, 10000);<br>  }<br>};<br>request.onerror = function() {<br>  // There was a connection error of some sort<br>};<br>request.send();</span></pre>\n<p id=\"7238\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">Next, we have a couple of functions <strong class=\"lw mi\">checkPayment</strong> and <strong class=\"lw mi\">stopPayment</strong>. <strong class=\"lw mi\">CheckPayment</strong> calls the ECS server and checks for it payment has been made by the user every 10 seconds. Once a payment has been made then it calls shows the <strong class=\"lw mi\">thankyou view</strong>, hides the <strong class=\"lw mi\">payment view</strong> and stops the <strong class=\"lw mi\">checkPayment</strong> timer.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"7cf7\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">function stopPaymentCheck() <br>{<br>  clearInterval(checkpaymentres);<br>}</span><span id=\"e13c\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">function checkPayment() <br>{<br>  request.open(<br>    \"GET\",<br>    serverurl + \"/webhook/checkstrikepayment?address=\" + address,<br>    true<br>  );<br>  //request.open('GET',\"<a href=\"https://ecs.cryptoskillz.com/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://ecs.cryptoskillz.com/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free</a> btc\", true);<br>  //call it<br>  request.onload = function() {<br>    if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>      // parse the data<br>      var data = JSON.parse(request.responseText);<br>      //debug<br>      //console.log(data.status)</span><span id=\"5105\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">if (data.status == 1) {<br>        orderthanks = document.getElementById(\"order-thanks\");<br>        orderthanks.style = \"display: visible\";<br>        orderthanks.innerHTML = thankstext;</span><span id=\"5f05\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">orderdetails = document.getElementById(\"order-details\");<br>        orderdetails.style = \"display: none\";<br>        stopPaymentCheck();<br>      }<br>    }<br>  };<br>  request.onerror = function() {<br>    // There was a connection error of some sort<br>  };<br>  request.send();<br>}</span></pre>\n<p id=\"d352\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">lastly, we have a listener that fires when the copy href has been clicked and copies the address to the clipboard</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"9855\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">document.getElementById(\"order-pr--copy\").addEventListener(\"click\", function() {<br>  const el = document.createElement(\"textarea\"); // Create a &lt;textarea&gt; element<br>  el.value = address; // Set its value to the string that you want copied<br>  el.setAttribute(\"readonly\", \"\"); // Make it readonly to be tamper-proof<br>  el.style.position = \"absolute\";<br>  el.style.left = \"-9999px\"; // Move outside the screen to make it invisible<br>  document.body.appendChild(el);<br>  el.select(); // Select the &lt;textarea&gt; content<br>  document.execCommand(\"copy\"); // Copy - only works as a result of a user action (e.g. click events)<br>  document.body.removeChild(el);<br>});</span></pre>\n<h2 id=\"1b93\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" data-selectable-paragraph=\"\">SERVER</h2>\n<p id=\"3c13\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" data-selectable-paragraph=\"\">We made several changes to the server to work with the refactored database changes as mentioned above. We will not list these here, will stick to the strike changes only.</p>\n<p id=\"5b42\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">The first function we added was a route to create a charge. This calls the strike helper.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"36d0\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">app.get(\"/strike/charge\", (req, res) =&gt; {<br>  res = generic.setHeaders(res);<br>  //load the back office helper<br>  let strikehelper = require('./api/helpers/strike.js').strike;<br>  let strike = new strikehelper();</span><span id=\"6574\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//debug<br>  strike.charge(req,res);<br>});</span></pre>\n<p id=\"07f2\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">The strike helper charge function requests a charge from strike stores in our session table with the information amount, currency etc and returns the details so an invoice can be generated.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"097e\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">/*</span><span id=\"c0b1\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">Just as we did with BTC we started off using a 3rd party API and once we had an understanding of how things work <br>we moved onto owing the entire stack.  We are doing the exact same thing with Lightning</span><span id=\"2432\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">We are using the rather excellent <a href=\"https://strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://strike.acinq.co</a> for this purpose.</span><span id=\"79d1\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">*/<br>const config = require('./config');<br>//console.log(config.bitcoin.network)</span><span id=\"9da7\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//load SQLlite (use any database you want or none)<br>const sqlite3 = require(\"sqlite3\").verbose();<br>//open a database connection<br>let db = new sqlite3.Database(\"./db/db.db\", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});</span><span id=\"08fb\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">var request = require(\"request\");</span><span id=\"9c58\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//note why uppercase here?<br>var strike = function ()<br>{<br> this.test = function test(req,res) <br> {</span><span id=\"c03e\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">res.send(JSON.stringify({ status: \"ok\" }));<br>     <br> }</span><span id=\"c7fe\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//create a charge<br> this.charge = function charge(req,res)<br> {<br>  //build the options object<br>  var options = {<br>    method: 'POST',<br>    url: process.env.STRIKEENDPOINT + '/api/v1/charges',<br>    headers: {<br>      'cache-control': 'no-cache',<br>      'Content-Type': 'application/json' },<br>    body: {<br>      amount: parseFloat(req.query.amount),<br>      description: req.query.desc,<br>      currency: req.query.currency<br>    },<br>    json: true,<br>    auth: {<br>      user: process.env.STRIKEAPIKEY,<br>      pass: '',<br>    }<br>  };</span><span id=\"3f11\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//call strike<br>  request(options, function (error, response, body) {<br>    if (error) throw new Error(error);<br>     //debug<br>     //console.log(body)</span><span id=\"a265\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//turn it into a BTC amount<br>     //note : in a future update we may go ahead and store everything Satoshis. <br>     //   we could also use req.query.amount here<br>     //   we may want to store order_meta and product_meta here in the future if so we will make those generic functions<br>   var amount = parseFloat(body.amount) * 0.00000001;<br>   <br>   //insert a session<br>   db.run(<br>    `INSERT INTO sessions(address,userid,net,amount,paymenttype) VALUES(?,?,?,?,?)`,<br>    [body.payment_request, req.query.uid, process.env.LIGHTNETWORK,String(amount),2],<br>    function(err) <br>    {<br>     if (err) <br>     {<br>       //return error<br>       res.send(JSON.stringify({ error: err.message }));<br>       return;<br>     }</span><span id=\"84b6\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//store the order product details <br>     db.run(<br>      `INSERT INTO order_product(address,name,price,quantity) VALUES(?,?,?,?)`,<br>      [body.payment_request,req.query.desc, String(amount),1],<br>      function(err) <br>      {<br>       if (err) <br>       {<br>         //return error<br>         res.send(JSON.stringify({ error: err.message }));<br>         return;<br>       }<br>       //store the order_payment_details <br>       db.run(<br>        `INSERT INTO order_payment_details(address,providerid,paymentobject) VALUES(?,?,?)`,<br>        [body.payment_request,2, JSON.stringify(body)],<br>        function(err) <br>        {<br>         if (err) <br>         {<br>           //return error<br>           res.send(JSON.stringify({ error: err.message }));<br>           return;<br>         }<br>         //return the required details to the front end<br>         var obj = {id:body.id,amount:body.amount,payment_request:body.payment_request}<br>         res.send(JSON.stringify({ payment: obj }));<br>         //debug<br>         //console.log(body.payment_request);<br>        }<br>       );<br>      }<br>     );<br>    }<br>   );<br>     <br>  });<br> }</span><span id=\"73a1\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">}<br>exports.strike = strike;</span></pre>\n<p id=\"86ab\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">We added 2 functions to webhook to deal with Strike. The first check payment simply looks in the database to see if a payment has been processed and if it has it returns 1 if it has not it returns 0.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"c250\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">APP.JS</span><span id=\"9dbb\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">app.post(\"/webhook/checkstrikepayment\", (req, res) =&gt; {<br>  res = generic.setHeaders(res);<br>  //load the back office helper<br>  let webhookhelper = require('./api/helpers/webhook.js').webhook;<br>  let webhook = new webhookhelper();</span><span id=\"e1e6\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//debug<br>  webhook.checkStrikePayment(req,res);<br>});</span><span id=\"d0bf\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">WEBHOOK HELPER</span><span id=\"0903\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">this.checkStrikePayment = function checkStrikePayment(req,res)<br> {<br>  //debug<br>  //console.log(req.body.data.payment_request)<br>  //return;<br>  let data = [1,1, req.body.data.payment_request];<br>  let sql = `UPDATE sessions SET processed = ?,swept=? WHERE address = ?`;<br>  db.run(sql, data, function(err) {<br>   //console.log(result)<br>   if (err) {<br>    res.send(JSON.stringify({ status: 0 }));<br>   }<br>   //store payment object<br>   let data = [JSON.stringify(req.body.data),req.body.data.payment_request];<br>   let sql = `UPDATE order_payment_details SET paymentresponseobject = ? WHERE address = ?`;<br>   db.run(sql, data, function(err) <br>   {<br>    if (err) {<br>     res.send(JSON.stringify({ status: 0 }));<br>    }<br>    //send emails to admin<br>    generic.sendMail(<a href=\"mailto:2,'cryptoskillz@protonmail.com\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">2,'cryptoskillz@protonmail.com</a>');</span><span id=\"e890\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">res.send(JSON.stringify({ status: 1 }));<br>   });<br>  });</span><span id=\"f390\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">}</span></pre>\n<p id=\"f7fe\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">The next function waits for Strike to process payment when it does it calls this URL with the information and we update our database accordingly</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"e8a0\" class=\"mo li bf av na b dz nb nc l nd\" data-selectable-paragraph=\"\">APP.JS</span><span id=\"52a5\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">app.get(\"/webhook/strikenotification\", (req, res) =&gt; {<br>  res = generic.setHeaders(res);<br>  //load the back office helper<br>  let webhookhelper = require('./api/helpers/webhook.js').webhook;<br>  let webhook = new webhookhelper();</span><span id=\"8463\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//debug<br>  webhook.strikeNotification(req,res);<br>});</span><span id=\"fb10\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">WEBHOOK HELPER</span><span id=\"0517\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" data-selectable-paragraph=\"\">//recieve a payment notificaiotn from strike<br> this.strikeNotification = function strikeNotification(req,res)<br> {<br>  //todo: store the payment object     <br>  if (req.query.address != '')<br>  {<br>  let data = [1,1, req.query.address];<br>    let sql = `UPDATE sessions SET processed = ?,swept=? WHERE address = ?`;<br>    db.run(sql, data, function(err) {<br>      if (err) {<br>        return console.error(err.message);<br>      }<br>      res.send(JSON.stringify({ \"status\": \"ok\" }));<br>    });<br>   }<br> }</span></pre>\n<h1 id=\"34b2\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" data-selectable-paragraph=\"\">Conclusion</h1>\n<p id=\"3a75\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" data-selectable-paragraph=\"\">Now we have Integrated Lightning into our stack via a 3rd party the next logical steps are</p>\n<ol class=\"\">\n<li id=\"8c88\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh nr ns nt\" data-selectable-paragraph=\"\">integrate into SR.js</li>\n<li id=\"8335\" class=\"lu lv bf av lw b lx nu lz nv mb nw md nx mf ny mh nr ns nt\" data-selectable-paragraph=\"\">replace strike with our lightning node</li>\n</ol>\n<p id=\"8d02\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" data-selectable-paragraph=\"\">We will focus on point 1 in the next tutorial and point 2 some point in the future.</p>\n",
            "content_html": "<figure class=\"post__image post__image\" ><img src=\"https://cryptoskillz.com/blog/media/posts/17/1_o-phpGJ9Fmh13YqxCs8y3A.jpeg\" alt=\"\" width=\"3456\" height=\"5184\">\n<figcaption >\n<figure class=\"kg kh ki kj kk ft x y paragraph-image\">\n<figcaption class=\"az dz kz la hj dn x y lb lc au dx\" >Photo by <a href=\"https://unsplash.com/photos/___Lnn9HGko?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">lee junda</a> on <a href=\"https://unsplash.com/search/photos/lightning?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></figcaption>\n</figure>\n</figcaption>\n</figure>\n<h1 id=\"4570\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Introduction</h1>\n<p id=\"ad64\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >This guide aims to program a website to accept Bitcoin. In the previous tutorial, We removed \"<a href=\"https://globee.com/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">Globee</strong></a><strong class=\"lw mi\">\"</strong> so that we had 100% sovereignty over our code and by extension our money. Ironically we are going to add \"<a href=\"https://strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">strike</strong></a>\" which is a 3rd party lightning payment provider. Just as we did in the past we will start the easy way and then remove it and replace it with our own code at a later date.</p>\n<p id=\"3243\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >A quick note on the current lightning nodes. I played with \"<a href=\"https://github.com/lightningnetwork/lnd\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">LND</strong></a><strong class=\"lw mi\">\"</strong> and \"<a href=\"https://github.com/ElementsProject/lightning\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">c-lightning</strong></a>\" for a couple of weeks and could not get them to work to a satisfactory level to fulfil our needs \"<a href=\"https://github.com/lightningnetwork/lnd\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">LND</strong></a><strong class=\"lw mi\">\"</strong> required everything to be on the one server which meant our idea of injecting was just not practical and \"<a href=\"https://github.com/ElementsProject/lightning\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">c-lightning</strong></a> leaned too heavily on the \"<a href=\"https://github.com/ElementsProject/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">elements</strong></a>\" project for us to use it a standalone manner. However, this does not concern me as it is amazing software that is still in Alpha.</p>\n<h1 id=\"6a9e\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >The SQL</h1>\n<p id=\"2dc8\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >We made significant changes to the SQL (it was due) mainly to give the tables names that made sense.</p>\n<h2 id=\"c623\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" >ECS_ tables</h2>\n<p id=\"a911\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >A number of tables to have the ECS_ prefix this means they are core tables to ECS such as user &amp; user settings</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"be05\" class=\"mo li bf av na b dz nb nc l nd\" >ecs_coldstorageaddresses<br>ecs_emailtemplates<br>ecs_user<br>ecs_user_settings</span></pre>\n<h2 id=\"964f\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" >lookup_ tables</h2>\n<p id=\"ccb2\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >the prefix lookup_ was introduced as a way to standardise the lookup data we will use in ECS.</p>\n<p id=\"db12\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" ><strong class=\"lw mi\">lookup_payment_providers<br></strong>This table is used to hold the payment providers at the moment we have \"Bitcoin Core Node\" and \"strike\" but we may add more in the future.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"110b\" class=\"mo li bf av na b dz nb nc l nd\" >CREATE TABLE `lookup_payment_providers` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `providername` INTEGER,<br> `external` INTEGER DEFAULT 0<br>);</span></pre>\n<h2 id=\"53db\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" >order_ tables</h2>\n<p id=\"cfb9\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >The tables with the order_ prefix are tables that relate directly to the order</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"7af6\" class=\"mo li bf av na b dz nb nc l nd\" >order_meta<br>order_payment_details<br>order_product<br>order_product_meta</span><span id=\"e010\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >The product meta holds information about the product such as size</span><span id=\"c3eb\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >CREATE TABLE `order_product_meta` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `productid` INTEGER,<br> `metaname` TEXT,<br> `metavalue` TEXT<br>);</span><span id=\"10d1\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >The payment details table holds which method we used to process payment as well as any charge / return objects that the provided us. </span><span id=\"9742\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >CREATE TABLE `order_payment_details` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `address` TEXT,<br> `providerid` INTEGER,<br> `paymentobject` TEXT,<br> `paymentresponseobject` TEXT<br>);</span></pre>\n<h1 id=\"3ebe\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Strike</h1>\n<p id=\"fdc7\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >\"<a href=\"https://strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">Strike</strong></a>\" is an excellent lightning implementation who have taken a lot of the heavy lifting away from us. Simply create an account and then get the api from the settings / API KEYS section as shown below.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/17/1_4TPapRENaXVGKwh-7Bcaeg.png\" alt=\"\" width=\"1372\" height=\"811\"></p>\n<p id=\"d14a\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >add this api key to the .env file along with the endpoint</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"14bb\" class=\"mo li bf av na b dz nb nc l nd\" >mainnet</span><span id=\"db30\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >STRIKEENDPOINT=<a href=\"https://api.strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://api.strike.acinq.co</a><br>STRIKEAPIKEY=sk_dsdsdsdsd</span><span id=\"2aa6\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >testnet</span><span id=\"c96e\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >STRIKEENDPOINT=<a href=\"https://api.strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://api.dev.strike.acinq.co</a><br>STRIKEAPIKEY=sk_dsdsdsdsd</span></pre>\n<h1 id=\"dca5\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >The Code</h1>\n<p id=\"9b58\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >In this tutorial, we have not integrated with SR.js as it was a brand new UX flow we wanted to get it working standalone first and integrate it later. You can find the code for this branch \"<a href=\"https://github.com/cryptoskillz/ECS/tree/strike\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lw mi\">here</strong></a><strong class=\"lw mi\">\"</strong></p>\n<h2 id=\"8893\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" >HTML</h2>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"68f3\" class=\"mo li bf av na b dz nb nc l nd\" >&lt;div id=\"order-preload\" align=\"center\"&gt;<br>    &lt;div &gt;Generating Invoice...&lt;/div&gt;<br>    &lt;div class=\"lds-dual-ring\"&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div class=\"order-qrcode\" id=\"order-qrcode\" style=\"display: none\"&gt;<br>  &lt;div id=\"order-details\"&gt;<br>    &lt;div  align=\"center\"&gt;<br>      &lt;div class=\"order-pr--number\" id=\"order-id\"&gt;&lt;/div&gt;<br>      &lt;span class=\"order-pr--pay\" id=\"order-amount\"&gt;&lt;/span&gt;<br>      &lt;span&gt;BTC&lt;/span&gt;<br>    &lt;/div&gt;<br>    &lt;canvas id=\"qr\" height=\"500%\" width=\"500%\"  align=\"center\"&gt;&lt;/canvas&gt;<br>    &lt;div id=\"lightaddress\" class=\"order-pr--value\"&gt;&lt;/div&gt;<br>    &lt;div&gt;<br>      &lt;a href=\"\" id=\"order-pr--wallet\" class=\"order-pr--wallet\"&gt;Open Wallet&lt;/a&gt;<br>      &lt;a href=\"\" id=\"order-pr--copy\" class=\"order-pr--copy\"&gt;Copy&lt;/a&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div id=\"order-thanks\" class=\"order-thanks\" style=\"display: none\" align=\"center\"&gt;<br>   Thanks you for your order<br>  &lt;/div&gt;<br>&lt;/div&gt;</span></pre>\n<p id=\"f96c\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >The above HTML creates a checkout experience as broken down below. Firstly we create a preloader that we use whilst we connect to the server and generate a charge.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"c3e6\" class=\"mo li bf av na b dz nb nc l nd\" >&lt;div id=\"order-preload\" align=\"center\"&gt;<br>    &lt;div &gt;Generating Invoice...&lt;/div&gt;<br>    &lt;div class=\"lds-dual-ring\"&gt;&lt;/div&gt;<br>&lt;/div&gt;</span></pre>\n<p class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" > </p>\n<p id=\"c57e\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >Next, we have the QR code as well as the payment address so the user can make payment.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"8186\" class=\"mo li bf av na b dz nb nc l nd\" >&lt;div class=\"order-qrcode\" id=\"order-qrcode\" style=\"display: none\"&gt;<br>  &lt;div id=\"order-details\"&gt;<br>    &lt;div  align=\"center\"&gt;<br>      &lt;div class=\"order-pr--number\" id=\"order-id\"&gt;&lt;/div&gt;<br>      &lt;span class=\"order-pr--pay\" id=\"order-amount\"&gt;&lt;/span&gt;<br>      &lt;span&gt;BTC&lt;/span&gt;<br>    &lt;/div&gt;<br>    &lt;canvas id=\"qr\" height=\"500%\" width=\"500%\"  align=\"center\"&gt;&lt;/canvas&gt;<br>    &lt;div id=\"lightaddress\" class=\"order-pr--value\"&gt;&lt;/div&gt;<br>    &lt;div&gt;<br>      &lt;a href=\"\" id=\"order-pr--wallet\" class=\"order-pr--wallet\"&gt;Open Wallet&lt;/a&gt;<br>      &lt;a href=\"\" id=\"order-pr--copy\" class=\"order-pr--copy\"&gt;Copy&lt;/a&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;</span></pre>\n<p class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/17/1_CmGcDewwv1ZsoKT-J-dyQ.png\" alt=\"\" width=\"1070\" height=\"1253\"></p>\n<p id=\"3c3a\" >Lastly, we have the thank you screen once payment has been made.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"c3d6\" class=\"mo li bf av na b dz nb nc l nd\" >&lt;div id=\"order-thanks\" class=\"order-thanks\" style=\"display: none\" align=\"center\"&gt;<br>   Thanks you for your order<br>  &lt;/div&gt;<br>&lt;/div&gt;</span></pre>\n<h2 id=\"mcetoc_1dkb4ss0m0\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/17/1_UQXNAlEmUfr5c8WGd6_6zQ.png\" alt=\"\" width=\"1188\" height=\"484\"></h2>\n<h2 id=\"bed3\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" >JAVASCRIPT</h2>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"194d\" class=\"mo li bf av na b dz nb nc l nd\" >&lt;script src=\"<a href=\"https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js</a>\"&gt;&lt;/script&gt;</span><span id=\"568f\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >    &lt;script&gt;<br>//hold the checkpayment interval function<br>var checkpaymentres = \"\";<br>var serverurl = \"<a href=\"http://127.0.0.1:3030/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:3030</a>\";<br>var address = \"\";<br>var thankstext = \"Thanks for your order.  You will receive nothing.\";<br>var request = new XMLHttpRequest();<br>//var server =<br>request.open(<br>  \"GET\",<br>  serverurl + \"/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free btc\",<br>  true<br>);<br></span><span id=\"69d4\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >request.onload = function() {<br>  if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>    // parse the data<br>    var data = JSON.parse(request.responseText);<br>    //debug<br>    //console.log(data.payment)<br>    lightelement = document.getElementById(\"lightaddress\");<br>    lightelement.innerHTML = data.payment.payment_request;<br>    orderid = document.getElementById(\"order-id\");<br>    orderid.innerHTML = \"Order \" + data.payment.id;<br>    var total = parseFloat(data.payment.amount) * 0.00000001;<br>    orderamount = document.getElementById(\"order-amount\");<br>    orderamount.innerHTML = \"Pay \" + String(total);<br>    // builds and displays the QR code<br>    new QRious({<br>      element: document.getElementById(\"qr\"),<br>      value: data.payment.payment_request,<br>      size: 400<br>    });<br>    preload = document.getElementById(\"order-preload\");<br>    preload.style = \"display: none\";<br>    qrcode = document.getElementById(\"order-qrcode\");<br>    qrcode.style = \"display: visible\";<br>    qrcode = document.getElementById(\"order-pr--wallet\");<br>    qrcode.href = \"lightning:\" + data.payment.payment_request;<br>    address = data.payment.payment_request;</span><span id=\"5434\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//check for payment every 10 seconds<br>    checkpaymentres = setInterval(checkPayment, 10000);<br>  }<br>};<br>request.onerror = function() {<br>  // There was a connection error of some sort<br>};<br>request.send();</span><span id=\"6510\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >function stopPaymentCheck() {<br>  clearInterval(checkpaymentres);<br>}</span><span id=\"c48d\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >function checkPayment() {<br>  //debug<br>  //console.log('check payment ticker')<br>  //var url = serverurl+\"/webhook/checkpayment?address=\"+address+\"&amp;token=\"+token;<br>  //var url = serverurl+\"webhook/checkStrikePayment?address=\"+address;<br>  //debug<br>  console.log(\"checking for payment for address:\" + address);<br>  request.open(<br>    \"GET\",<br>    serverurl + \"/webhook/checkstrikepayment?address=\" + address,<br>    true<br>  );<br>  //request.open('GET',\"<a href=\"https://ecs.cryptoskillz.com/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://ecs.cryptoskillz.com/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free</a> btc\", true);<br>  //call it<br>  request.onload = function() {<br>    if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>      // parse the data<br>      var data = JSON.parse(request.responseText);<br>      //debug<br>      //console.log(data.status)</span><span id=\"0ac7\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >if (data.status == 1) {<br>        orderthanks = document.getElementById(\"order-thanks\");<br>        orderthanks.style = \"display: visible\";<br>        orderthanks.innerHTML = thankstext;</span><span id=\"a14f\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >orderdetails = document.getElementById(\"order-details\");<br>        orderdetails.style = \"display: none\";<br>        stopPaymentCheck();<br>      }<br>    }<br>  };<br>  request.onerror = function() {<br>    // There was a connection error of some sort<br>  };<br>  request.send();<br>}</span><span id=\"836c\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >document.getElementById(\"order-pr--copy\").addEventListener(\"click\", function() {<br>  const el = document.createElement(\"textarea\"); // Create a &lt;textarea&gt; element<br>  el.value = address; // Set its value to the string that you want copied<br>  el.setAttribute(\"readonly\", \"\"); // Make it readonly to be tamper-proof<br>  el.style.position = \"absolute\";<br>  el.style.left = \"-9999px\"; // Move outside the screen to make it invisible<br>  document.body.appendChild(el);<br>  el.select(); // Select the &lt;textarea&gt; content<br>  document.execCommand(\"copy\"); // Copy - only works as a result of a user action (e.g. click events)<br>  document.body.removeChild(el);<br>});   <br>&lt;/script&gt;</span></pre>\n<p id=\"f7cf\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >Let us take a look at this code and see what exactly is happening. The first thing we are doing is loading a QR class</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"d59f\" class=\"mo li bf av na b dz nb nc l nd\" >&lt;script src=\"<a href=\"https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js</a>\"&gt;&lt;/script&gt;</span></pre>\n<p id=\"1cad\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >Next, we are setting up some variables:</p>\n<p id=\"3c5a\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" ><strong class=\"lw mi\">checkpaymentres</strong>: this is used to set the time check when we are looking for a payment.<br><strong class=\"lw mi\">serverurl</strong>: the URL of ECS server<br><strong class=\"lw mi\">address</strong>: the address returned from Strike for payment purposes<br><strong class=\"lw mi\">thankstest</strong>: the text to store display once an order is complete</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"936b\" class=\"mo li bf av na b dz nb nc l nd\" >//hold the checkpayment interval function<br>var checkpaymentres = \"\";<br>var serverurl = \"<a href=\"http://127.0.0.1:3030/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:3030</a>\";<br>var address = \"\";<br>var thankstext = \"Thanks for your order.  You will receive nothing.\";</span></pre>\n<p id=\"f415\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >Next, we make an ajax call to ECS and telling it we want to generate an invoice.</p>\n<p id=\"19fc\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" ><strong class=\"lw mi\">uid</strong>: the userid we are using <br><strong class=\"lw mi\">currency</strong>: the currency we want to create the invoice in<br><strong class=\"lw mi\">amount</strong>: the amount in Satoshis for the invoice<br><strong class=\"lw mi\">desc</strong>: the description of the item we are selling in the invoice</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"f74a\" class=\"mo li bf av na b dz nb nc l nd\" >var request = new XMLHttpRequest();<br>//var server =<br>request.open(<br>  \"GET\",<br>  serverurl + \"/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free btc\",<br>  true<br>);</span></pre>\n<p id=\"75bc\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >next, we wait for a response from the server and if the status is valid (between 200 and 400 we process it) we take the information from the response populate the <strong class=\"lw mi\">payment view </strong>and display it, hide the preloader view and start the <strong class=\"lw mi\">checkPayment</strong> timer.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"9d3f\" class=\"mo li bf av na b dz nb nc l nd\" >request.onload = function() {<br>  if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>    // parse the data<br>    var data = JSON.parse(request.responseText);<br>    lightelement = document.getElementById(\"lightaddress\");<br>    lightelement.innerHTML = data.payment.payment_request;<br>    orderid = document.getElementById(\"order-id\");<br>    orderid.innerHTML = \"Order \" + data.payment.id;<br>    var total = parseFloat(data.payment.amount) * 0.00000001;<br>    orderamount = document.getElementById(\"order-amount\");<br>    orderamount.innerHTML = \"Pay \" + String(total);<br>    // builds and displays the QR code<br>    new QRious({<br>      element: document.getElementById(\"qr\"),<br>      value: data.payment.payment_request,<br>      size: 400<br>    });<br>    preload = document.getElementById(\"order-preload\");<br>    preload.style = \"display: none\";<br>    qrcode = document.getElementById(\"order-qrcode\");<br>    qrcode.style = \"display: visible\";<br>    qrcode = document.getElementById(\"order-pr--wallet\");<br>    qrcode.href = \"lightning:\" + data.payment.payment_request;<br>    address = data.payment.payment_request;</span><span id=\"7978\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//check for payment every 10 seconds<br>    checkpaymentres = setInterval(checkPayment, 10000);<br>  }<br>};<br>request.onerror = function() {<br>  // There was a connection error of some sort<br>};<br>request.send();</span></pre>\n<p id=\"7238\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >Next, we have a couple of functions <strong class=\"lw mi\">checkPayment</strong> and <strong class=\"lw mi\">stopPayment</strong>. <strong class=\"lw mi\">CheckPayment</strong> calls the ECS server and checks for it payment has been made by the user every 10 seconds. Once a payment has been made then it calls shows the <strong class=\"lw mi\">thankyou view</strong>, hides the <strong class=\"lw mi\">payment view</strong> and stops the <strong class=\"lw mi\">checkPayment</strong> timer.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"7cf7\" class=\"mo li bf av na b dz nb nc l nd\" >function stopPaymentCheck() <br>{<br>  clearInterval(checkpaymentres);<br>}</span><span id=\"e13c\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >function checkPayment() <br>{<br>  request.open(<br>    \"GET\",<br>    serverurl + \"/webhook/checkstrikepayment?address=\" + address,<br>    true<br>  );<br>  //request.open('GET',\"<a href=\"https://ecs.cryptoskillz.com/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://ecs.cryptoskillz.com/strike/charge?uid=3&amp;currency=btc&amp;amount=2000&amp;desc=free</a> btc\", true);<br>  //call it<br>  request.onload = function() {<br>    if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>      // parse the data<br>      var data = JSON.parse(request.responseText);<br>      //debug<br>      //console.log(data.status)</span><span id=\"5105\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >if (data.status == 1) {<br>        orderthanks = document.getElementById(\"order-thanks\");<br>        orderthanks.style = \"display: visible\";<br>        orderthanks.innerHTML = thankstext;</span><span id=\"5f05\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >orderdetails = document.getElementById(\"order-details\");<br>        orderdetails.style = \"display: none\";<br>        stopPaymentCheck();<br>      }<br>    }<br>  };<br>  request.onerror = function() {<br>    // There was a connection error of some sort<br>  };<br>  request.send();<br>}</span></pre>\n<p id=\"d352\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >lastly, we have a listener that fires when the copy href has been clicked and copies the address to the clipboard</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"9855\" class=\"mo li bf av na b dz nb nc l nd\" >document.getElementById(\"order-pr--copy\").addEventListener(\"click\", function() {<br>  const el = document.createElement(\"textarea\"); // Create a &lt;textarea&gt; element<br>  el.value = address; // Set its value to the string that you want copied<br>  el.setAttribute(\"readonly\", \"\"); // Make it readonly to be tamper-proof<br>  el.style.position = \"absolute\";<br>  el.style.left = \"-9999px\"; // Move outside the screen to make it invisible<br>  document.body.appendChild(el);<br>  el.select(); // Select the &lt;textarea&gt; content<br>  document.execCommand(\"copy\"); // Copy - only works as a result of a user action (e.g. click events)<br>  document.body.removeChild(el);<br>});</span></pre>\n<h2 id=\"1b93\" class=\"mo li bf av au el mp mq mr ms mt mu mv mw mx my mz\" >SERVER</h2>\n<p id=\"3c13\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >We made several changes to the server to work with the refactored database changes as mentioned above. We will not list these here, will stick to the strike changes only.</p>\n<p id=\"5b42\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >The first function we added was a route to create a charge. This calls the strike helper.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"36d0\" class=\"mo li bf av na b dz nb nc l nd\" >app.get(\"/strike/charge\", (req, res) =&gt; {<br>  res = generic.setHeaders(res);<br>  //load the back office helper<br>  let strikehelper = require('./api/helpers/strike.js').strike;<br>  let strike = new strikehelper();</span><span id=\"6574\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//debug<br>  strike.charge(req,res);<br>});</span></pre>\n<p id=\"07f2\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >The strike helper charge function requests a charge from strike stores in our session table with the information amount, currency etc and returns the details so an invoice can be generated.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"097e\" class=\"mo li bf av na b dz nb nc l nd\" >/*</span><span id=\"c0b1\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >Just as we did with BTC we started off using a 3rd party API and once we had an understanding of how things work <br>we moved onto owing the entire stack.  We are doing the exact same thing with Lightning</span><span id=\"2432\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >We are using the rather excellent <a href=\"https://strike.acinq.co/\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">https://strike.acinq.co</a> for this purpose.</span><span id=\"79d1\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >*/<br>const config = require('./config');<br>//console.log(config.bitcoin.network)</span><span id=\"9da7\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//load SQLlite (use any database you want or none)<br>const sqlite3 = require(\"sqlite3\").verbose();<br>//open a database connection<br>let db = new sqlite3.Database(\"./db/db.db\", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});</span><span id=\"08fb\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >var request = require(\"request\");</span><span id=\"9c58\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//note why uppercase here?<br>var strike = function ()<br>{<br> this.test = function test(req,res) <br> {</span><span id=\"c03e\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >res.send(JSON.stringify({ status: \"ok\" }));<br>     <br> }</span><span id=\"c7fe\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//create a charge<br> this.charge = function charge(req,res)<br> {<br>  //build the options object<br>  var options = {<br>    method: 'POST',<br>    url: process.env.STRIKEENDPOINT + '/api/v1/charges',<br>    headers: {<br>      'cache-control': 'no-cache',<br>      'Content-Type': 'application/json' },<br>    body: {<br>      amount: parseFloat(req.query.amount),<br>      description: req.query.desc,<br>      currency: req.query.currency<br>    },<br>    json: true,<br>    auth: {<br>      user: process.env.STRIKEAPIKEY,<br>      pass: '',<br>    }<br>  };</span><span id=\"3f11\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//call strike<br>  request(options, function (error, response, body) {<br>    if (error) throw new Error(error);<br>     //debug<br>     //console.log(body)</span><span id=\"a265\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//turn it into a BTC amount<br>     //note : in a future update we may go ahead and store everything Satoshis. <br>     //   we could also use req.query.amount here<br>     //   we may want to store order_meta and product_meta here in the future if so we will make those generic functions<br>   var amount = parseFloat(body.amount) * 0.00000001;<br>   <br>   //insert a session<br>   db.run(<br>    `INSERT INTO sessions(address,userid,net,amount,paymenttype) VALUES(?,?,?,?,?)`,<br>    [body.payment_request, req.query.uid, process.env.LIGHTNETWORK,String(amount),2],<br>    function(err) <br>    {<br>     if (err) <br>     {<br>       //return error<br>       res.send(JSON.stringify({ error: err.message }));<br>       return;<br>     }</span><span id=\"84b6\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//store the order product details <br>     db.run(<br>      `INSERT INTO order_product(address,name,price,quantity) VALUES(?,?,?,?)`,<br>      [body.payment_request,req.query.desc, String(amount),1],<br>      function(err) <br>      {<br>       if (err) <br>       {<br>         //return error<br>         res.send(JSON.stringify({ error: err.message }));<br>         return;<br>       }<br>       //store the order_payment_details <br>       db.run(<br>        `INSERT INTO order_payment_details(address,providerid,paymentobject) VALUES(?,?,?)`,<br>        [body.payment_request,2, JSON.stringify(body)],<br>        function(err) <br>        {<br>         if (err) <br>         {<br>           //return error<br>           res.send(JSON.stringify({ error: err.message }));<br>           return;<br>         }<br>         //return the required details to the front end<br>         var obj = {id:body.id,amount:body.amount,payment_request:body.payment_request}<br>         res.send(JSON.stringify({ payment: obj }));<br>         //debug<br>         //console.log(body.payment_request);<br>        }<br>       );<br>      }<br>     );<br>    }<br>   );<br>     <br>  });<br> }</span><span id=\"73a1\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >}<br>exports.strike = strike;</span></pre>\n<p id=\"86ab\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >We added 2 functions to webhook to deal with Strike. The first check payment simply looks in the database to see if a payment has been processed and if it has it returns 1 if it has not it returns 0.</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"c250\" class=\"mo li bf av na b dz nb nc l nd\" >APP.JS</span><span id=\"9dbb\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >app.post(\"/webhook/checkstrikepayment\", (req, res) =&gt; {<br>  res = generic.setHeaders(res);<br>  //load the back office helper<br>  let webhookhelper = require('./api/helpers/webhook.js').webhook;<br>  let webhook = new webhookhelper();</span><span id=\"e1e6\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//debug<br>  webhook.checkStrikePayment(req,res);<br>});</span><span id=\"d0bf\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >WEBHOOK HELPER</span><span id=\"0903\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >this.checkStrikePayment = function checkStrikePayment(req,res)<br> {<br>  //debug<br>  //console.log(req.body.data.payment_request)<br>  //return;<br>  let data = [1,1, req.body.data.payment_request];<br>  let sql = `UPDATE sessions SET processed = ?,swept=? WHERE address = ?`;<br>  db.run(sql, data, function(err) {<br>   //console.log(result)<br>   if (err) {<br>    res.send(JSON.stringify({ status: 0 }));<br>   }<br>   //store payment object<br>   let data = [JSON.stringify(req.body.data),req.body.data.payment_request];<br>   let sql = `UPDATE order_payment_details SET paymentresponseobject = ? WHERE address = ?`;<br>   db.run(sql, data, function(err) <br>   {<br>    if (err) {<br>     res.send(JSON.stringify({ status: 0 }));<br>    }<br>    //send emails to admin<br>    generic.sendMail(<a href=\"mailto:2,'cryptoskillz@protonmail.com\" class=\"cb bx ld le lf lg\" target=\"_blank\" rel=\"noopener noreferrer\">2,'cryptoskillz@protonmail.com</a>');</span><span id=\"e890\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >res.send(JSON.stringify({ status: 1 }));<br>   });<br>  });</span><span id=\"f390\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >}</span></pre>\n<p id=\"f7fe\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >The next function waits for Strike to process payment when it does it calls this URL with the information and we update our database accordingly</p>\n<pre class=\"kg kh ki kj kk dv gg df\"><span id=\"e8a0\" class=\"mo li bf av na b dz nb nc l nd\" >APP.JS</span><span id=\"52a5\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >app.get(\"/webhook/strikenotification\", (req, res) =&gt; {<br>  res = generic.setHeaders(res);<br>  //load the back office helper<br>  let webhookhelper = require('./api/helpers/webhook.js').webhook;<br>  let webhook = new webhookhelper();</span><span id=\"8463\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//debug<br>  webhook.strikeNotification(req,res);<br>});</span><span id=\"fb10\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >WEBHOOK HELPER</span><span id=\"0517\" class=\"mo li bf av na b dz ne nf ng nh ni nc l nd\" >//recieve a payment notificaiotn from strike<br> this.strikeNotification = function strikeNotification(req,res)<br> {<br>  //todo: store the payment object     <br>  if (req.query.address != '')<br>  {<br>  let data = [1,1, req.query.address];<br>    let sql = `UPDATE sessions SET processed = ?,swept=? WHERE address = ?`;<br>    db.run(sql, data, function(err) {<br>      if (err) {<br>        return console.error(err.message);<br>      }<br>      res.send(JSON.stringify({ \"status\": \"ok\" }));<br>    });<br>   }<br> }</span></pre>\n<h1 id=\"34b2\" class=\"lh li bf av au el lj lk ll lm ln lo lp lq lr ls lt\" >Conclusion</h1>\n<p id=\"3a75\" class=\"lu lv bf av lw b lx ly lz ma mb mc md me mf mg mh\" >Now we have Integrated Lightning into our stack via a 3rd party the next logical steps are</p>\n<ol class=\"\">\n<li id=\"8c88\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh nr ns nt\" >integrate into SR.js</li>\n<li id=\"8335\" class=\"lu lv bf av lw b lx nu lz nv mb nw md nx mf ny mh nr ns nt\" >replace strike with our lightning node</li>\n</ol>\n<p id=\"8d02\" class=\"lu lv bf av lw b lx mj lz mk mb ml md mm mf mn mh\" >We will focus on point 1 in the next tutorial and point 2 some point in the future.</p>\n",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2018-12-27T12:27:00+07:00",
            "date_modified": "2019-09-20T12:28:09+07:00"
        },
        {
            "id": "https://cryptoskillz.com/blog/finally-removing-globee.html",
            "url": "https://cryptoskillz.com/blog/finally-removing-globee.html",
            "title": "Finally removing GloBee",
            "summary": "<figure class=\"post__image post__image\" contenteditable=\"false\"><img src=\"https://cryptoskillz.com/blog/media/posts/16/1_8-iq0_Ls5451w2BYuO-Y_w.jpeg\" alt=\"\" width=\"2592\" height=\"3240\">\n<figcaption contenteditable=\"true\">\n<figure class=\"ke kf kg kh ki fr x y paragraph-image\">\n<figcaption class=\"az dz kx ky hh dn x y kz la au dx\" data-selectable-paragraph=\"\">Photo by <a href=\"https://unsplash.com/photos/qB3VY0kfFOQ?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Ana Toma</a> on <a href=\"https://unsplash.com/search/photos/independence?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></figcaption>\n</figure>\n</figcaption>\n</figure>\n<h1 id=\"7ca0\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" data-selectable-paragraph=\"\">Introduction</h1>\n<p id=\"ad64\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" data-selectable-paragraph=\"\">This guide aims to program a website to accept Bitcoin. In the previous tutorial, We built and configured a server to hold \"<a href=\"https://bitcoin.org/en/download\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Bitcoin Core</strong></a>\" and our \"<a href=\"https://ecs.cryptoskillz.com/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Server</strong></a>\". In this part, we are going to host the \"<a href=\"https://cryptoskillz.com/srcrypto/prod/admin/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Admin</strong></a>\", \"<a href=\"https://cryptoskillz.com/srcrypto/prod/www/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">WWW</strong></a>\" and \"<a href=\"https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">CDN</strong></a>\" and finally replace \"<a href=\"https://globee.com/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">GloBee</strong></a>\" so that we 100% control over the software stack. In the Bitcoin world, this is known as \"<a href=\"https://bitcoinmagazine.com/articles/economic-sovereignty-through-bitcoin-max-keiser-and-stacy-herbert/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">sovereignty</strong></a><strong class=\"lu mg\">\"</strong>.</p>\n<p data-selectable-paragraph=\"\"> </p>\n<h1 id=\"ad13\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" data-selectable-paragraph=\"\">The SQL</h1>\n<p id=\"78cb\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" data-selectable-paragraph=\"\">We made a couple of changes to the SQL this time around. Firstly, the product table was changed, we removed the email field as we have a new table to hold all of the metadata.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"f2cc\" class=\"mh lg bf av mi b dz mj mk l ml\" data-selectable-paragraph=\"\">CREATE TABLE `product` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `address` TEXT,<br> `name` TEXT,<br> `price` TEXT,<br> `quantity` INTEGER<br>);</span></pre>\n<p id=\"2fc8\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">We created a new table called order_meta this has been designed to hold all the order details. Seeing as we added Billing and Shipping address and we envisage there will be more fields added in the future we did not want to have to update the server and CDN everytime a new field was added. This we just add the class sr-input to the field in \"<a href=\"https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/master/cdn/theme/cart.html\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">cart.html</strong></a>\" and it will automatically be added to this table.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"5a40\" class=\"mh lg bf av mi b dz mj mk l ml\" data-selectable-paragraph=\"\">CREATE TABLE `order_meta` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `productid` INTEGER,<br> `metaname` TEXT,<br> `metavalue` TEXT<br>);</span></pre>\n<h1 id=\"3656\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" data-selectable-paragraph=\"\">Code sections</h1>\n<p id=\"74d1\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" data-selectable-paragraph=\"\">The code for this release can be found \"<a href=\"https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/part14-replace-globee-2\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">here</strong></a>\".</p>\n<h2 id=\"7f06\" class=\"mh lg bf av au el mr ms mt mu mv mw mx my mz na nb\" data-selectable-paragraph=\"\"><a href=\"https://cryptoskillz.com/srcrypto/prod/www/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">WWW</a></h2>\n<p id=\"f7ef\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" data-selectable-paragraph=\"\">We made significant changes to this section. Firstly we purchased a \"<a href=\"https://bootstrapious.com/p/single-product\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">theme</strong></a>\" so that it now looks like a webpage rather than a just a hyperlink as it was before. There was a lot of stuff in this template we removed, cryptoskillz like things super clean. <br>*note: if you want to use this WWW as is please do purchase the template it is only $10 and it has been very well done.</p>\n<p id=\"984a\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">You can check this theme out (shown below) by clicking \"<a href=\"https://cryptoskillz.com/srcrypto/prod/www/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">here</strong></a><strong class=\"lu mg\">\"</strong></p>\n<p data-selectable-paragraph=\"\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_GPJxzhdUASHLCRGKBFe9Zw.png\" alt=\"\" width=\"2460\" height=\"1110\"></p>\n<p id=\"e6ab\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">Note* As you can see there is a size dropdown, this does not work yet this will come when we do the next update to the CDN.</p>\n<h2 id=\"9259\" class=\"mh lg bf av au el mr ms mt mu mv mw mx my mz na nb\" data-selectable-paragraph=\"\"><a href=\"https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">CDN</a></h2>\n<p id=\"8e19\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" data-selectable-paragraph=\"\">The majority of the time (code wise) was spent in the \"<a href=\"https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">CDN</strong></a>\" section. We refactored the CSS to make sure it would not break on any site it was injected into. We also added billing and shipping inputs which can be invoked during the initialisation as shown below.</p>\n<p id=\"2b9b\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">*note the start country will set the country drop down to that country.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"cf08\" class=\"mh lg bf av mi b dz mj mk l ml\" data-selectable-paragraph=\"\">&lt;script type=\"text/javascript\"&gt;<br>  /*<br>    0 = server url<br>    1 = animated<br>    2 = quantity count<br>    3 = cdn url<br>    4 = uid<br>    5 = theme<br>    6 = billing address <br>    7 = shipping address<br>    8 = start country<br>  */<br><br>SR.init([<br>  \"<a href=\"http://127.0.0.1:3000/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:3000/</a>\",<br>  false,<br>  15,<br>  \"<a href=\"http://127.0.0.1:8080/cdn/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8080/cdn/</a>\",<br>  \"3\",<br>  \"\",<br>  1,<br>  1,<br>  \"GB\"<br>]);   <br>&lt;/script&gt;</span></pre>\n<p id=\"0a49\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">The screenshot below shows the cart with the first item being added to it.</p>\n<p data-selectable-paragraph=\"\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_rClP3DReIcxF2kvW6NVKWw.png\" alt=\"\" width=\"2408\" height=\"1296\"></p>\n<p id=\"6789\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">Then when you click checkout you will see the new billing address UX.</p>\n<p data-selectable-paragraph=\"\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_Pg96-tZFNQ1u5I_QQdJ2PA.png\" alt=\"\" width=\"2423\" height=\"1276\"></p>\n<p id=\"da50\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">If you untick the \"Billing &amp; Shipping the same\" you will see that the pay button changes to shipping.</p>\n<p data-selectable-paragraph=\"\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_BTL3dHiaK9HXy9UXqFkDQw.png\" alt=\"\" width=\"2430\" height=\"1285\"></p>\n<p id=\"90b0\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">if you click this it will show the shipping address UX and the pay button</p>\n<p data-selectable-paragraph=\"\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_nbaYNo-30iVHzLQcpnPBhA.png\" alt=\"\" width=\"2471\" height=\"1284\"></p>\n<p id=\"33e1\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">Once the pay button has been clicked you will see the standard pay screen. We fixed the bugs on the screen but did not do anything else.</p>\n<p data-selectable-paragraph=\"\"><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_qExoFNJ5Qb1bHwB5JGh_Hg.png\" alt=\"\" width=\"2506\" height=\"1285\"></p>\n<p id=\"24cc\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">We plan to add a bunch of functionality to the CDN to make this really useful. We have decades of experience shopping cart checkout experience that we will be applying directly to this.</p>\n<h2 id=\"25e4\" class=\"mh lg bf av au el mr ms mt mu mv mw mx my mz na nb\" data-selectable-paragraph=\"\"><a href=\"https://ecs.cryptoskillz.com/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Server</a></h2>\n<p id=\"b002\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" data-selectable-paragraph=\"\">We made a small change to the server that allows us to store the metadata. It simply takes the request object and stores all of the data in the order_meta table.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"da36\" class=\"mh lg bf av mi b dz mj mk l ml\" data-selectable-paragraph=\"\">this.storeUserDetails = function storeUserDetails(req,res)<br>  {<br>    let data = [req.query.address];<br>    //console.log(data)<br>    let sql = `SELECT * FROM product where address = \"`+req.query.address+`\"`;<br>    //debug</span><span id=\"4e62\" class=\"mh lg bf av mi b dz no np nq nr ns mk l ml\" data-selectable-paragraph=\"\">db.get(sql, [], (err, result) =&gt; {<br>      console.log(result)<br>      if (err) {<br>        console.log(err)<br>      }<br>      let data = [result.id];<br>      let sql = `delete FROM order_meta WHERE productid = ?`;<br>      db.run(sql, data, function(err) {<br>        if (err) {<br>          return console.error(err.message);<br>        }<br>        for (var metaname in req.query) <br>        {<br>            if (req.query.hasOwnProperty(metaname)) <br>            {<br>                var metavalue = req.query[metaname]<br>                metaname = metaname.replace(\"sr-\", \"\");</span><span id=\"69f6\" class=\"mh lg bf av mi b dz no np nq nr ns mk l ml\" data-selectable-paragraph=\"\">db.run(<br>                `INSERT INTO order_meta(productid,metaname,metavalue) VALUES(?,?,?)`,<br>                [<br>                  result.id,<br>                  metaname,<br>                  metavalue<br>                ],<br>                function(err) {<br>                  if (err) {<br>                    return console.log(err.message);<br>                  }<br>                }<br>              );<br>              //debug<br>              //console.log(metaname, metavalue);<br>            }<br>        }<br>        res.send(JSON.stringify({ status: \"ok\" }));<br>        });<br>    });<br>  }</span></pre>\n<h2 id=\"5a8c\" class=\"mh lg bf av au el mr ms mt mu mv mw mx my mz na nb\" data-selectable-paragraph=\"\"><a href=\"https://cryptoskillz.com/srcrypto/prod/admin/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Admin</a></h2>\n<p id=\"72aa\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" data-selectable-paragraph=\"\">No changes were made to the admin this time, though we may want to display the order metadata in the admin so an update will be required in future</p>\n<h1 id=\"541d\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" data-selectable-paragraph=\"\">Testing</h1>\n<p id=\"48b8\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" data-selectable-paragraph=\"\">I will not run through all the testing again as we covered it fully in this \"<a class=\"cb bx lb lc ld le\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/part-12-backoffice-and-server-refactor-45dbc05dcebb\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">tutorial</strong></a>\".</p>\n<p data-selectable-paragraph=\"\"> </p>\n<h1 id=\"dc7b\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" data-selectable-paragraph=\"\">Conclusion</h1>\n<p id=\"548b\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" data-selectable-paragraph=\"\">Now we have a fully working Bitcoin core, server and CDN to inject it easily into any site. This pretty much covers everything we set out to do. The next tutorial will deal be a usage/installation guide which will be a condensed version of all these tutorials into a single document for people who do not care how it was built and just want to install and use it.</p>\n<p id=\"f923\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">Also, seeing as we have completed all the tasks we have set out to do we may not (after the next one) do any more tutorial parts and instead, use another format such as a monthly update guide with normal git push to cover everything else.</p>\n<p id=\"d3f1\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" data-selectable-paragraph=\"\">Of course, we will most likely do some accompanying tutorials when we decided to add lighting, other cryptos, elements and whatever cool tech surfaces in the future.</p>\n",
            "content_html": "<figure class=\"post__image post__image\" ><img src=\"https://cryptoskillz.com/blog/media/posts/16/1_8-iq0_Ls5451w2BYuO-Y_w.jpeg\" alt=\"\" width=\"2592\" height=\"3240\">\n<figcaption >\n<figure class=\"ke kf kg kh ki fr x y paragraph-image\">\n<figcaption class=\"az dz kx ky hh dn x y kz la au dx\" >Photo by <a href=\"https://unsplash.com/photos/qB3VY0kfFOQ?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Ana Toma</a> on <a href=\"https://unsplash.com/search/photos/independence?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></figcaption>\n</figure>\n</figcaption>\n</figure>\n<h1 id=\"7ca0\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Introduction</h1>\n<p id=\"ad64\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >This guide aims to program a website to accept Bitcoin. In the previous tutorial, We built and configured a server to hold \"<a href=\"https://bitcoin.org/en/download\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Bitcoin Core</strong></a>\" and our \"<a href=\"https://ecs.cryptoskillz.com/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Server</strong></a>\". In this part, we are going to host the \"<a href=\"https://cryptoskillz.com/srcrypto/prod/admin/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">Admin</strong></a>\", \"<a href=\"https://cryptoskillz.com/srcrypto/prod/www/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">WWW</strong></a>\" and \"<a href=\"https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">CDN</strong></a>\" and finally replace \"<a href=\"https://globee.com/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">GloBee</strong></a>\" so that we 100% control over the software stack. In the Bitcoin world, this is known as \"<a href=\"https://bitcoinmagazine.com/articles/economic-sovereignty-through-bitcoin-max-keiser-and-stacy-herbert/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">sovereignty</strong></a><strong class=\"lu mg\">\"</strong>.</p>\n<p > </p>\n<h1 id=\"ad13\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >The SQL</h1>\n<p id=\"78cb\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >We made a couple of changes to the SQL this time around. Firstly, the product table was changed, we removed the email field as we have a new table to hold all of the metadata.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"f2cc\" class=\"mh lg bf av mi b dz mj mk l ml\" >CREATE TABLE `product` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `address` TEXT,<br> `name` TEXT,<br> `price` TEXT,<br> `quantity` INTEGER<br>);</span></pre>\n<p id=\"2fc8\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >We created a new table called order_meta this has been designed to hold all the order details. Seeing as we added Billing and Shipping address and we envisage there will be more fields added in the future we did not want to have to update the server and CDN everytime a new field was added. This we just add the class sr-input to the field in \"<a href=\"https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/master/cdn/theme/cart.html\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">cart.html</strong></a>\" and it will automatically be added to this table.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"5a40\" class=\"mh lg bf av mi b dz mj mk l ml\" >CREATE TABLE `order_meta` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `productid` INTEGER,<br> `metaname` TEXT,<br> `metavalue` TEXT<br>);</span></pre>\n<h1 id=\"3656\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Code sections</h1>\n<p id=\"74d1\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >The code for this release can be found \"<a href=\"https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/part14-replace-globee-2\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">here</strong></a>\".</p>\n<h2 id=\"7f06\" class=\"mh lg bf av au el mr ms mt mu mv mw mx my mz na nb\" ><a href=\"https://cryptoskillz.com/srcrypto/prod/www/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">WWW</a></h2>\n<p id=\"f7ef\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >We made significant changes to this section. Firstly we purchased a \"<a href=\"https://bootstrapious.com/p/single-product\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">theme</strong></a>\" so that it now looks like a webpage rather than a just a hyperlink as it was before. There was a lot of stuff in this template we removed, cryptoskillz like things super clean. <br>*note: if you want to use this WWW as is please do purchase the template it is only $10 and it has been very well done.</p>\n<p id=\"984a\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >You can check this theme out (shown below) by clicking \"<a href=\"https://cryptoskillz.com/srcrypto/prod/www/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">here</strong></a><strong class=\"lu mg\">\"</strong></p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_GPJxzhdUASHLCRGKBFe9Zw.png\" alt=\"\" width=\"2460\" height=\"1110\"></p>\n<p id=\"e6ab\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >Note* As you can see there is a size dropdown, this does not work yet this will come when we do the next update to the CDN.</p>\n<h2 id=\"9259\" class=\"mh lg bf av au el mr ms mt mu mv mw mx my mz na nb\" ><a href=\"https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">CDN</a></h2>\n<p id=\"8e19\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >The majority of the time (code wise) was spent in the \"<a href=\"https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">CDN</strong></a>\" section. We refactored the CSS to make sure it would not break on any site it was injected into. We also added billing and shipping inputs which can be invoked during the initialisation as shown below.</p>\n<p id=\"2b9b\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >*note the start country will set the country drop down to that country.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"cf08\" class=\"mh lg bf av mi b dz mj mk l ml\" >&lt;script type=\"text/javascript\"&gt;<br>  /*<br>    0 = server url<br>    1 = animated<br>    2 = quantity count<br>    3 = cdn url<br>    4 = uid<br>    5 = theme<br>    6 = billing address <br>    7 = shipping address<br>    8 = start country<br>  */<br><br>SR.init([<br>  \"<a href=\"http://127.0.0.1:3000/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:3000/</a>\",<br>  false,<br>  15,<br>  \"<a href=\"http://127.0.0.1:8080/cdn/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:8080/cdn/</a>\",<br>  \"3\",<br>  \"\",<br>  1,<br>  1,<br>  \"GB\"<br>]);   <br>&lt;/script&gt;</span></pre>\n<p id=\"0a49\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >The screenshot below shows the cart with the first item being added to it.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_rClP3DReIcxF2kvW6NVKWw.png\" alt=\"\" width=\"2408\" height=\"1296\"></p>\n<p id=\"6789\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >Then when you click checkout you will see the new billing address UX.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_Pg96-tZFNQ1u5I_QQdJ2PA.png\" alt=\"\" width=\"2423\" height=\"1276\"></p>\n<p id=\"da50\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >If you untick the \"Billing &amp; Shipping the same\" you will see that the pay button changes to shipping.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_BTL3dHiaK9HXy9UXqFkDQw.png\" alt=\"\" width=\"2430\" height=\"1285\"></p>\n<p id=\"90b0\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >if you click this it will show the shipping address UX and the pay button</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_nbaYNo-30iVHzLQcpnPBhA.png\" alt=\"\" width=\"2471\" height=\"1284\"></p>\n<p id=\"33e1\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >Once the pay button has been clicked you will see the standard pay screen. We fixed the bugs on the screen but did not do anything else.</p>\n<p ><img class=\"post__image\" src=\"https://cryptoskillz.com/blog/media/posts/16/1_qExoFNJ5Qb1bHwB5JGh_Hg.png\" alt=\"\" width=\"2506\" height=\"1285\"></p>\n<p id=\"24cc\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >We plan to add a bunch of functionality to the CDN to make this really useful. We have decades of experience shopping cart checkout experience that we will be applying directly to this.</p>\n<h2 id=\"25e4\" class=\"mh lg bf av au el mr ms mt mu mv mw mx my mz na nb\" ><a href=\"https://ecs.cryptoskillz.com/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Server</a></h2>\n<p id=\"b002\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >We made a small change to the server that allows us to store the metadata. It simply takes the request object and stores all of the data in the order_meta table.</p>\n<pre class=\"ke kf kg kh ki dv ge df\"><span id=\"da36\" class=\"mh lg bf av mi b dz mj mk l ml\" >this.storeUserDetails = function storeUserDetails(req,res)<br>  {<br>    let data = [req.query.address];<br>    //console.log(data)<br>    let sql = `SELECT * FROM product where address = \"`+req.query.address+`\"`;<br>    //debug</span><span id=\"4e62\" class=\"mh lg bf av mi b dz no np nq nr ns mk l ml\" >db.get(sql, [], (err, result) =&gt; {<br>      console.log(result)<br>      if (err) {<br>        console.log(err)<br>      }<br>      let data = [result.id];<br>      let sql = `delete FROM order_meta WHERE productid = ?`;<br>      db.run(sql, data, function(err) {<br>        if (err) {<br>          return console.error(err.message);<br>        }<br>        for (var metaname in req.query) <br>        {<br>            if (req.query.hasOwnProperty(metaname)) <br>            {<br>                var metavalue = req.query[metaname]<br>                metaname = metaname.replace(\"sr-\", \"\");</span><span id=\"69f6\" class=\"mh lg bf av mi b dz no np nq nr ns mk l ml\" >db.run(<br>                `INSERT INTO order_meta(productid,metaname,metavalue) VALUES(?,?,?)`,<br>                [<br>                  result.id,<br>                  metaname,<br>                  metavalue<br>                ],<br>                function(err) {<br>                  if (err) {<br>                    return console.log(err.message);<br>                  }<br>                }<br>              );<br>              //debug<br>              //console.log(metaname, metavalue);<br>            }<br>        }<br>        res.send(JSON.stringify({ status: \"ok\" }));<br>        });<br>    });<br>  }</span></pre>\n<h2 id=\"5a8c\" class=\"mh lg bf av au el mr ms mt mu mv mw mx my mz na nb\" ><a href=\"https://cryptoskillz.com/srcrypto/prod/admin/\" class=\"cb bx lb lc ld le\" target=\"_blank\" rel=\"noopener noreferrer\">Admin</a></h2>\n<p id=\"72aa\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >No changes were made to the admin this time, though we may want to display the order metadata in the admin so an update will be required in future</p>\n<h1 id=\"541d\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Testing</h1>\n<p id=\"48b8\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >I will not run through all the testing again as we covered it fully in this \"<a class=\"cb bx lb lc ld le\" target=\"_blank\" href=\"https://medium.com/bitcoin-e-commerce-development/part-12-backoffice-and-server-refactor-45dbc05dcebb\" rel=\"noopener noreferrer\"><strong class=\"lu mg\">tutorial</strong></a>\".</p>\n<p > </p>\n<h1 id=\"dc7b\" class=\"lf lg bf av au el lh li lj lk ll lm ln lo lp lq lr\" >Conclusion</h1>\n<p id=\"548b\" class=\"ls lt bf av lu b lv lw lx ly lz ma mb mc md me mf\" >Now we have a fully working Bitcoin core, server and CDN to inject it easily into any site. This pretty much covers everything we set out to do. The next tutorial will deal be a usage/installation guide which will be a condensed version of all these tutorials into a single document for people who do not care how it was built and just want to install and use it.</p>\n<p id=\"f923\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >Also, seeing as we have completed all the tasks we have set out to do we may not (after the next one) do any more tutorial parts and instead, use another format such as a monthly update guide with normal git push to cover everything else.</p>\n<p id=\"d3f1\" class=\"ls lt bf av lu b lv mm lx mn lz mo mb mp md mq mf\" >Of course, we will most likely do some accompanying tutorials when we decided to add lighting, other cryptos, elements and whatever cool tech surfaces in the future.</p>\n",
            "author": {
                "name": "cryptoskillz"
            },
            "tags": [
            ],
            "date_published": "2018-12-04T12:25:00+07:00",
            "date_modified": "2019-09-20T12:26:52+07:00"
        }
    ]
}
