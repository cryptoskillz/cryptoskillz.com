<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>cryptoskillz</title>
    <link href="https://cryptoskillz.com/blog/feed.xml" rel="self" />
    <link href="https://cryptoskillz.com/blog" />
    <updated>2019-09-20T11:52:06+07:00</updated>
    <author>
        <name>cryptoskillz</name>
    </author>
    <id>https://cryptoskillz.com/blog</id>

    <entry>
        <title>Recode CDN to use plain js</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/recode-cdn-to-use-plain-js.html"/>
        <id>https://cryptoskillz.com/blog/recode-cdn-to-use-plain-js.html</id>

        <updated>2019-09-20T11:52:00+07:00</updated>
            <summary>
                <![CDATA[
                    <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_SbYlu5R2xvkYwvQ5m6iDaw.jpeg" alt="" width="639" height="498"></p>
<p> </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_SbYlu5R2xvkYwvQ5m6iDaw.jpeg" alt="" width="639" height="498"></p>
<p> </p>

<h1 id="1e6f" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Introduction</h1>
<p id="ca56" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >This guide aims to program a website to accept Bitcoin. In the previous article, we coded the admin section in "<strong class="lj lz"><a href="https://nodejs.org/en/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">node.js</a>"</strong> and hosted all of the various microservices.</p>
<p id="cc89" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >This time, we are going to refactor the CDN part ("<strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/refactor1/cdn/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">sr.js</a></strong>") coding it in plain javascript this allows it to be deployed without any issues on the highest number of websites. In other words, we are going to make it "<strong><a href="https://www.commonplaces.com/blog/are-you-technology-agnostic/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">agnostic</a></strong>".</p>
<h1 id="0682" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The SQL</h1>
<p id="c75b" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >Before we get into the updates to the database for this part of the tutorial there are a couple of concepts that are worth discussing.</p>
<p id="9573" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The way the database is set up only allows one product per order, again this is done for simplicity and works with the simple “Pay button” concept I will discuss later. When we add new “widgets” in later tutorials that will allow multiple products in one order.</p>
<p id="3901" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Furthermore, the database is not designed to be working in a SAAS manner it works with one user admin account that manages all orders. We fell this works well with the concept of Bitcoin sovereignty. All the software required to process transactions on the of an e-commerce store should belong to that store.</p>
<p id="6592" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >If you have 10 sites deploy the software 10 times. We may turn it into a SAAS product one day if there is a demand for such a thing.</p>
<p id="51d2" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Ok, now on to the changes.</p>
<h2 id="b158" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" >Product table</h2>
<p id="e88c" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We added a product to store the product details. We also store the details for the order in this and at present, we only chose to store the email address. It may make sense to store billing/shipping address etc. We can do this later for we are accepting the minimum of details to get the system working.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="e855" class="mf kv bf av mr b dz ms mt l mu" >CREATE TABLE "product" <br>( `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `address` TEXT,<br> `name` TEXT,<br> `price` TEXT,<br> `quantity` INTEGER,<br> `email` TEXT <br>)</span></pre>
<h1 id="8e2f" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Code sections</h1>
<p id="1ad2" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The latest branch that deals with code in this tutorial can be found "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/refactor1" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong></p>
<h2 id="b7d0" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" >Admin</h2>
<p id="a677" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We made minimal changes to the admin this time around and the demo can be found "<strong class="lj lz"><a href="https://cryptoskillz.com/srcrypto/prod/admin/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong>. We suggest you host it locally whilst you run through the examples below.</p>
<h2 id="2a6d" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/admin/admin/payments.html" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">payments.html</a></h2>
<p id="e236" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We made 1 small change to this screen and that was to make ID clickable and it goes to a new screen called orders.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_B88mqW1N6p-KhE81dK6GHQ.png" alt="" width="2413" height="612"></p>
<h2 id="16ca" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" ><a href="http://s3.eu-west-1.amazonaws.com/srcrypto/admin/order.html?address=mykxm3ydhhCehY2NVszeEYaoc2MFVSYncL" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">order.html</a></h2>
<p id="c75e" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The order screen shows the details for the order</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_zeA18eMH24svKRu87s8KYw.png" alt="" width="1525" height="454"></p>
<h2 id="d21f" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" >Server</h2>
<p id="19ae" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We added a few endpoints to the server as shown below.</p>
<p id="de6b" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">Order endpoint</strong></p>
<p id="72a5" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The order endpoint returns orders to the admin, smart!</p>
<pre class="ke kf kg kh ki dv ge df"><span class="mf kv bf av mr b dz ms mt l mu" >//orders<br>app.get("/admin/order", (req, res) =&gt; {<br>  //set the headers<br>  res = setHeaders(res);<br>  let sql =<br>    `select *<br>         from product<br>            WHERE product.address = '` +<br>    req.query.address +<br>    `'`;<br>  var jsonStr = '{"results":[]}';<br>  var obj = JSON.parse(jsonStr);<br>  //jsonStr = JSON.stringify(obj)<br>  db.all(sql, [], (err, rows) =&gt; {<br>    if (err) {<br>      throw err;<br>    }<br>    rows.forEach(row =&gt; {<br>      //console.log(row);<br>      //myObj.push(row);<br>      //obj.push('dsss');<br>      obj["results"].push(row);<br>    });<br>    jsonStr = JSON.stringify(obj);<br>    //console.log('done');<br>    //console.log(jsonStr);<br>    res.send(jsonStr);<br>  });<br>})</span></pre>
<p><span id="7e67" class="mf kv bf av mr b dz ms mt l mu" ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_zeA18eMH24svKRu87s8KYw.png" alt="" width="1525" height="454"></span></p>
<p id="e558" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">Storedetails endpoint</strong></p>
<p id="9d06" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >This endpoint stores the user order details.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="439d" class="mf kv bf av mr b dz ms mt l mu" >//store user details<br>app.get("/api/storeuserdetails", (req, res) =&gt; {<br>  //set the headers<br>  res = setHeaders(res);<br>  let data = [req.query.email, req.query.address];<br>  let sql = `UPDATE product<br>             SET email = ?<br>             WHERE address = ?`;</span><span id="f28b" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >db.run(sql, data, function(err) {<br>    if (err) {<br>      return console.error(err.message);<br>    }<br>    //console.log(`Row(s) updated: ${this.changes}`);<br>    res.send(JSON.stringify({ status: "ok" }));<br>  });<br>});</span></pre>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_qPk4B69hJoxCk1d1x5oR1w.png" alt="" width="889" height="802"></p>
<p id="7edf" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">storeproduct endpoint</strong></p>
<p id="7da8" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >This endpoint store the details of the order as you can it handles delete/update/insert all from the one function. This works as we are only allowing one product in each order at this moment in time thus keeping the logic nice and simple.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="b8de" class="mf kv bf av mr b dz ms mt l mu" >//storeproduct<br>app.get('/api/storeproduct', (req, res) =&gt; {<br> //set the headers<br> res = setHeaders(res); <br> //check if it is in the product table<br> if (req.query.quantity == 0)<br> {<br>  //delete the record<br>  let data = [req.query.address];<br>  let sql = `delete FROM product WHERE address = ?`;<br>  db.run(sql, data, function(err) <br>  {<br>    if (err) {<br>      return console.error(err.message);<br>    }   <br>  });<br>    <br> }<br> else<br> {<br>  //see if we have it already <br>  let sql = `SELECT * FROM product where address = "`+req.query.address+`"`;<br>  //debug<br>  //console.log(sql);</span><span id="99bf" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >db.all(sql, [], (err, rows) =&gt; {<br>    if (err) {<br>      throw err;<br>    }<br>    //check we have a result<br>    if (rows.length == 0)<br>    {<br>     //insert it<br>     //delete the record<br>   db.run(`INSERT INTO product(address,name,price,quantity) VALUES(?,?,?,?)`, [req.query.address,req.query.name,req.query.price,req.query.quantity], function(err) {<br>    if (err) {<br>      return console.log(err.message);<br>    }<br>   });<br>    }<br>    else<br>    {<br>     //update it<br>     let data = [req.query.quantity,req.query.address];<br>   let sql = `UPDATE product SET quantity = ? WHERE address = ?`;<br>   db.run(sql, data, function(err) {<br>     if (err) {<br>       return console.error(err.message);<br>     }<br>     <br>   });</span><span id="e63a" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >}<br>  });<br> }<br> //debug<br> //console.log(req.query.name);<br> //console.log(req.query.price);<br> //console.log(req.query.quantity);<br> //console.log(req.query.address);<br> res.send(JSON.stringify({status: "ok"}));<br>})</span></pre>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_ukrYWhpsLPw5PoJmv43rBA.png" alt="" width="162" height="167"></p>
<h2 id="ac1d" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" >WWW</h2>
<p id="7bf9" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We have really simplified the www. Let’s take a look at the index page.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="1232" class="mf kv bf av mr b dz ms mt l mu" >&lt;!doctype html&gt;<br>&lt;html lang="en" class="no-js"&gt;<br>&lt;head&gt;<br> &lt;meta charset="UTF-8"&gt;<br> &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;<br> &lt;link rel="stylesheet" href="css/reset.css"&gt; <br>  &lt;script src="js/modernizr.js"&gt;&lt;/script&gt; &lt;!-- Modernizr --&gt;</span><span id="6680" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;main&gt;<br> &lt;h1&gt;Add to Cart Interaction&lt;/h1&gt;<br> &lt;a href="#0" id="cd-add-to-cart" class="cd-add-to-cart"  &gt;Add To Cart&lt;/a&gt;<br>&lt;/main&gt;</span><span id="cf31" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >&lt;!-- this is were we host the js file that andles cart interaction etc you can dwnload and self host this if you prefer<br>&lt;script type="text/javascript" src="<a href="https://s3.eu-west-1.amazonaws.com/srcrypto/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://s3.eu-west-1.amazonaws.com/srcrypto/js/sr.js</a>"&gt;<br>&lt;script type="text/javascript"&gt;<br>   /*<br>     0 = server url<br>     1 = animated<br>     2 = quantity count<br>     3 = cdn url<br>     4 = uid<br>   */<br>  SR.init(["<a href="http://srcryptoapi.eu-west-1.elasticbeanstalk.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://srcryptoapi.eu-west-1.elasticbeanstalk.com/</a>", false,15,"<a href="http://s3.eu-west-1.amazonaws.com/srcrypto/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://s3.eu-west-1.amazonaws.com/srcrypto/</a>","3",""]);<br>&lt;/script&gt;</span><span id="0546" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >&lt;/body&gt;<br>&lt;/html&gt;</span></pre>
<p id="f5f5" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >So, what is happening? Firstly we are including or E-commerce engine via the javascript call.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="48d0" class="mf kv bf av mr b dz ms mt l mu" >&lt;script type="text/javascript" src="<a href="https://s3.eu-west-1.amazonaws.com/srcrypto/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://s3.eu-west-1.amazonaws.com/srcrypto/js/sr.js</a>"&gt;</span></pre>
<p id="11a4" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Then we are initialising the e-commerce engine.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="b311" class="mf kv bf av mr b dz ms mt l mu" >&lt;script type="text/javascript"&gt;<br>   /*<br>     0 = server url<br>     1 = animated<br>     2 = quantity count<br>     3 = cdn url<br>     4 = uid<br>   */<br>  SR.init(["<a href="http://srcryptoapi.eu-west-1.elasticbeanstalk.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://srcryptoapi.eu-west-1.elasticbeanstalk.com/</a>", false,15,"<a href="http://s3.eu-west-1.amazonaws.com/srcrypto/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://s3.eu-west-1.amazonaws.com/srcrypto/</a>","3",""]);<br>&lt;/script&gt;</span></pre>
<p id="e232" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Lastly, we have added a “<strong class="lj lz">pay button</strong>” to the page. We give it the class “<strong class="lj lz">cd-add-to-cart</strong>” our sr.js is looking for this class and will interact with it once found. This class has the attributes “<strong class="lj lz">data-price</strong>” and “<strong class="lj lz">data-name</strong>” which we use for the actual product details.</p>
<p id="3920" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Doing it this way means we do not have to control product inventory in the admin area, though we may add such functionality later. It is worth saying the reason we can do this is that of the way Bitcoin works, there is no payment processor in the middle and no credit card provider and no "<strong><a href="https://en.wikipedia.org/wiki/Chargeback" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">CHARGEBACKS</a></strong>".</p>
<p id="06f5" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >If a user modifies this page to say decrease price. You can as a store owner can just say “you did not send enough BTC please send more to complete the order”. Take it from me this requires a ton of code in current payment gateways to achieve the same results.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="460a" class="mf kv bf av mr b dz ms mt l mu" >&lt;a href="#0" id="cd-add-to-cart" class="cd-add-to-cart"  &gt;Add To Cart&lt;/a&gt;</span></pre>
<p id="2c9e" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >And that is it. The majority of the work in this part of the tutorial was in the CDN so let’s go ahead and break that down.</p>
<h2 id="bba0" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" ><strong class="ch">CDN</strong></h2>
<p id="297b" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The concept for the CDN part of this project is to have 1 line of code that we can "<strong><a href="https://www.wikihow.com/Use-JavaScript-Injections" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">inject</a></strong>" into any website and it just works, that seems like a very simple idea easy to implement right? It is actually much harder than you first imagine, in fact even though this took a little under 2 weeks to code it is actually built on 5 years of near constant development (from a previous life).</p>
<p id="68ab" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >To get the working we have a couple of tenets that we have adhered to achieve our goals</p>
<ul class="">
<li id="6b02" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu np nq nr" >It has to be coded in plain javascript</li>
<li id="8592" class="lh li bf av lj b lk ns lm nt lo nu lq nv ls nw lu np nq nr" >It has to have its own namespace (annoying with injected elements)</li>
<li id="2125" class="lh li bf av lj b lk ns lm nt lo nu lq nv ls nw lu np nq nr" >It has to have full e-commerce functionality from one line of code</li>
<li id="e1b4" class="lh li bf av lj b lk ns lm nt lo nu lq nv ls nw lu np nq nr" >It has to look good and not break the design of the site it is injected into</li>
<li id="eafe" class="lh li bf av lj b lk ns lm nt lo nu lq nv ls nw lu np nq nr" >It has to be fast with low latency</li>
</ul>
<p id="eb7c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Now we know what we have to do let’s take a look at what we did to achieve the above.</p>
<h2 id="789a" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" ><strong class="ch">The Code</strong></h2>
<pre class="ke kf kg kh ki dv ge df"><span id="2529" class="mf kv bf av mr b dz ms mt l mu" >var SR =<br>  SR ||<br>  (function() {<br>    /*<br> **=========================<br> *START OF GLOBAL FUNCTIONS<br> *=========================<br> */</span><span id="14ee" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//holdthe number of product<br>    var itemcount = 0;<br>    //hold the price of the product<br>    var price = "";<br>    //hold the name of the product<br>    var name = "";<br>    //hold the addres of the product<br>    var address = "";</span><span id="2dbc" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//hold the email<br>    var email = "";<br>    //hold the user id<br>    //note : Right now we only allow one user but we will expand this later to make it more of a SAAS product.<br>    var uid = "";<br>    //hold the server url can be overridden in init<br>    var serverurl = "<a href="http://srcryptoapi.eu-west-1.elasticbeanstalk.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://srcryptoapi.eu-west-1.elasticbeanstalk.com/</a>";<br>    //hold the cdn url can be overridden in init<br>    var cdnurl = "<a href="http://s3.eu-west-1.amazonaws.com/srcrypto/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://s3.eu-west-1.amazonaws.com/srcrypto/</a>";</span><span id="40c9" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//var to hold the arguments passed in from init<br>    var _args = {}; // private</span><span id="d300" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >var quantity = 9;</span><span id="d681" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//hold the animating flag<br>    var animating = false;</span><span id="dd38" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >var theme = "cart";<br>    /*<br> **=========================<br> *END OF GLOBAL FUNCTIONS<br> *=========================<br> */</span><span id="d68d" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >/*<br> **=========================<br> *START OF GENERIC FUNCTIONS<br> *=========================<br> */</span><span id="24fd" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//this function adds a class using a  class or id<br>    function addClass(elements, myClass) {<br>      // if there are no elements, we're done<br>      if (!elements) {<br>        return;<br>      }</span><span id="43cc" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a selector, get the chosen elements<br>      if (typeof elements === "string") {<br>        elements = document.querySelectorAll(elements);<br>      }</span><span id="e11b" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a single DOM element, make it an array to simplify behavior<br>      else if (elements.tagName) {<br>        elements = [elements];<br>      }</span><span id="4568" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// add class to all chosen elements<br>      for (var i = 0; i &lt; elements.length; i++) {<br>        // if class is not already found<br>        if (<br>          (" " + elements[i].className + " ").indexOf(" " + myClass + " ") &lt; 0<br>        ) {<br>          // add class<br>          elements[i].className += " " + myClass;<br>        }<br>      }<br>    }</span><span id="84e9" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//this function removes a class using a class or id<br>    function removeClass(elements, myClass) {<br>      // if there are no elements, we're done<br>      if (!elements) {<br>        return;<br>      }</span><span id="cc8e" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a selector, get the chosen elements<br>      if (typeof elements === "string") {<br>        elements = document.querySelectorAll(elements);<br>      }</span><span id="ed89" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a single DOM element, make it an array to simplify behavior<br>      else if (elements.tagName) {<br>        elements = [elements];<br>      }</span><span id="d3f8" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// create pattern to find class name<br>      var reg = new RegExp("(^| )" + myClass + "($| )", "g");</span><span id="eebe" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// remove class from all chosen elements<br>      for (var i = 0; i &lt; elements.length; i++) {<br>        elements[i].className = elements[i].className.replace(reg, " ");<br>      }<br>    }</span><span id="b5fc" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//this function chnages the text of a div/span etc using a class or id<br>    function changeClassText(elements, value) {<br>      // if there are no elements, we're done<br>      if (!elements) {<br>        return;<br>      }</span><span id="1d40" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a selector, get the chosen elements<br>      if (typeof elements === "string") {<br>        elements = document.querySelectorAll(elements);<br>      }</span><span id="2827" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a single DOM element, make it an array to simplify behavior<br>      else if (elements.tagName) {<br>        elements = [elements];<br>      }</span><span id="9453" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// add class to all chosen elements<br>      for (var i = 0; i &lt; elements.length; i++) {<br>        elements[i].innerHTML = value;<br>      }<br>    }</span><span id="e165" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//this function checks if an element has class<br>    function hasClass(elements, value) {<br>      // if there are no elements, we're done<br>      if (!elements) {<br>        return;<br>      }</span><span id="8bed" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a selector, get the chosen elements<br>      if (typeof elements === "string") {<br>        elements = document.querySelectorAll(elements);<br>      }</span><span id="6cc4" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a single DOM element, make it an array to simplify behavior<br>      else if (elements.tagName) {<br>        elements = [elements];<br>      }</span><span id="b350" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//loop the elements<br>      for (var i = 0; i &lt; elements.length; i++) {<br>        //check if it is the one<br>        //debug<br>        //console.log(elements[i].className)<br>        //console.log(value);<br>        if (elements[i].className.indexOf(value) != -1) {<br>          return 1;<br>        }<br>      }<br>      return 0;<br>    }</span><span id="1d1c" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//this function hides an element<br>    function hideClass(elements) {<br>      // if there are no elements, we're done<br>      if (!elements) {<br>        return;<br>      }</span><span id="51f7" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a selector, get the chosen elements<br>      if (typeof elements === "string") {<br>        elements = document.querySelectorAll(elements);<br>      }</span><span id="5a2b" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a single DOM element, make it an array to simplify behavior<br>      else if (elements.tagName) {<br>        elements = [elements];<br>      }</span><span id="c35d" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//loop the elements<br>      for (var i = 0; i &lt; elements.length; i++) {<br>        elements[i].style.display = "none";<br>      }<br>    }</span><span id="b840" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//this function shows an element<br>    function showClass(elements) {<br>      // if there are no elements, we're done<br>      if (!elements) {<br>        return;<br>      }</span><span id="ce22" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a selector, get the chosen elements<br>      if (typeof elements === "string") {<br>        elements = document.querySelectorAll(elements);<br>      }</span><span id="db0e" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >// if we have a single DOM element, make it an array to simplify behavior<br>      else if (elements.tagName) {<br>        elements = [elements];<br>      }</span><span id="e031" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//loop the elements<br>      for (var i = 0; i &lt; elements.length; i++) {<br>        elements[i].style.display = "";<br>      }<br>    }</span><span id="0951" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//this functions updates the totals for the cart<br>    function carttotal() {<br>      //multipily the price by the number of items in the cart<br>      var producttotal = price * itemcount;<br>      //set it to 8 decimal places as it's Bitcoin<br>      producttotal = parseFloat(producttotal).toFixed(8);<br>      changeClassText(document.getElementById("checkouttotal"), producttotal);<br>      //update counter<br>      changeClassText(document.querySelector(".cd-count"), itemcount);<br>      //store product<br>      var url =<br>        serverurl +<br>        "api/storeproduct?name=" +<br>        name +<br>        "&amp;quantity=" +<br>        itemcount +<br>        "&amp;address=" +<br>        address +<br>        "&amp;price=" +<br>        price;<br>      //call the store produt endpoint<br>      fetchurl(url, "storeproduct");<br>    }</span><span id="23a8" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//this function calls endpoints on the server<br>    //note : This has to be extended to handle post, put etc it only uses GET at the moment.<br>    //   Also it would be good to have proper called backs for the method if we add many more we will make it asynv<br>    function fetchurl(url, method) {<br>      var request = new XMLHttpRequest();<br>      request.open("GET", url, true);<br>      //call it<br>      request.onload = function() {<br>        if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>          if (method == "getaddress") {<br>            // parse the data<br>            var data = JSON.parse(request.responseText);<br>            //debug<br>            //console.log(data)<br>            //set the address<br>            address = data.address;<br>            //set the address in the checkout<br>            var elbtcaddress = document.getElementById("bitcoinaddress");<br>            //set the href<br>            elbtcaddress.setAttribute("href", "bitcoin:" + address);<br>            //set the address<br>            elbtcaddress.innerText = address;<br>            //debug<br>            //console.log(elbtcaddress)</span><span id="8a9d" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//generate the qr code<br>            var elbtcqr = document.getElementById("bitcoinqrcode");<br>            elbtcqr.setAttribute(<br>              "src",<br>              "<a href="https://chart.googleapis.com/chart?chs=250x250&amp;cht=qr&amp;chl=" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://chart.googleapis.com/chart?chs=250x250&amp;cht=qr&amp;chl=</a>" +<br>                address<br>            );<br>            //debug<br>            //console.log(elbtcqr)<br>          }<br>          if (method == "storeproduct") {<br>            //do stuff if you want.<br>          }<br>          if (method == "carttemplate") {<br>            //debug<br>            //console.log(request.responseText);</span><span id="ecd4" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//add the cart templatehtml<br>            document.body.insertAdjacentHTML("beforeend", request.responseText);<br>            //add the click elements listeners<br>            clickElements();<br>            //get an address<br>            var url = serverurl + "api/address?uid=" + uid;<br>            fetchurl(url, "getaddress");<br>          }<br>          if (method == "storeuserdetails") {<br>            cartstate(4);<br>          }<br>        } else {<br>          // We reached our target server, but it returned an error<br>        }<br>      };<br>      request.onerror = function() {<br>        // There was a connection error of some sort<br>      };<br>      request.send();<br>    }</span><span id="b891" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//this function works with how the cart should look and sets the correct viusal elements<br>    function cartstate(state) {<br>      /*<br>   1 = show cart product details<br>   2 = show customer details screen<br>   3 = customer detals back<br>   4 = custmer details pay click<br>   5 = bitcoin details back click<br>  */<br>      switch (state) {<br>        case 1:<br>          //hide btc stuff<br>          hideClass(document.getElementById("checkoutbitocoin"));<br>          hideClass(document.getElementById("bitcoinaddresswrapper"));<br>          //hide the customer details<br>          hideClass(document.getElementById("customerdetailswrapper"));<br>          //hide customer detals back<br>          hideClass(document.getElementById("checkoutcustomerdetailsback"));<br>          //open it<br>          addClass(document.querySelector(".cd-cart-container"), "cart-open");<br>          //show the product details<br>          showClass(document.getElementById("cartlistitems"));<br>          break;<br>        case 2:<br>          //hide the product details<br>          hideClass(document.getElementById("cartlistitems"));<br>          //show the customer details<br>          showClass(document.getElementById("customerdetailswrapper"));<br>          showClass(document.getElementById("checkoutcustomerdetailsback"));<br>          //hide btc stuff<br>          hideClass(document.getElementById("bitcoinaddresswrapper"));<br>          break;<br>        case 3:<br>          //show the product details<br>          showClass(document.getElementById("cartlistitems"));<br>          //hide btc stuff<br>          hideClass(document.getElementById("bitcoinaddresswrapper"));<br>          //hide the customer details<br>          hideClass(document.getElementById("customerdetailswrapper"));<br>          hideClass(document.getElementById("checkoutcustomerdetailsback"));<br>          break;<br>        case 4:<br>          //hide the product details<br>          hideClass(document.getElementById("cartlistitems"));<br>          //show btc stuff<br>          showClass(document.getElementById("bitcoinaddresswrapper"));<br>          showClass(document.getElementById("checkoutbitocoin"));<br>          //hide the customer details<br>          hideClass(document.getElementById("checkoutcustomerdetailsback"));<br>          hideClass(document.getElementById("customerdetailswrapper"));<br>          break;<br>        case 5:<br>          //hide the product details<br>          hideClass(document.getElementById("cartlistitems"));<br>          //show the customer details<br>          showClass(document.getElementById("checkoutcustomerdetailsback"));<br>          showClass(document.getElementById("customerdetailswrapper"));<br>          //show btc stuff<br>          hideClass(document.getElementById("bitcoinaddresswrapper"));<br>          hideClass(document.getElementById("checkoutbitocoin"));<br>          break;<br>      }<br>    }</span><span id="9420" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >/*<br> *=========================<br> *END OF GENERIC FUNCTIONS<br> *=========================<br> */</span><span id="90b6" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >function clickElements() {<br>      /*<br>  *===============================<br>  *START OF ELEMENT CLICK FUNCTIONS<br>  *================================<br>  */</span><span id="51d6" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//bitcoin back click<br>      document<br>        .getElementById("checkoutbitocoin")<br>        .addEventListener("click", function() {<br>          cartstate(5);<br>        });<br>      //payment click<br>      document.getElementById("sr-pay").addEventListener("click", function() {<br>        //get the email<br>        //note: We want to update this when we collect more than email, shipping address etc.<br>        var useremail = document.getElementById("sr-email").value;<br>        //only send the email if it has not been sent<br>        if (email != useremail) {<br>          email = useremail;<br>          var url =<br>            serverurl +<br>            "api/storeuserdetails?email=" +<br>            email +<br>            "&amp;address=" +<br>            address;<br>          //call the store produt endpoint<br>          fetchurl(url, "storeuserdetails");<br>        } else {<br>          cartstate(4);<br>        }<br>      });<br>      //customer back click<br>      document<br>        .getElementById("checkoutcustomerdetailsback")<br>        .addEventListener("click", function() {<br>          cartstate(3);<br>        });<br>      //add to cart click element<br>      document.querySelector(".checkout").addEventListener("click", function() {<br>        cartstate(2);<br>      });</span><span id="5ba6" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//add to cart click element<br>      document<br>        .querySelector(".cd-add-to-cart")<br>        .addEventListener("click", function() {<br>          //get details<br>          var elproduct = document.getElementById("cd-add-to-cart");<br>          price = elproduct.getAttribute("data-price");<br>          name = elproduct.getAttribute("data-name");<br>          //will update when we use multipile products<br>          var productid = 1;<br>          //todo<br>          var previewpic = "";<br>          //increment count (quantity)<br>          if (itemcount &lt;= quantity) {<br>            itemcount = itemcount + 1;<br>            carttotal(price);</span><span id="99c8" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//show it<br>            showClass(document.querySelector(".cd-cart-container"));</span><span id="8e77" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//add item to cart<br>            var productlist = document.getElementById("cartlistitems");<br>            var itemlist = document.createElement("li");<br>            itemlist.className = "product ";</span><span id="b171" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//build produt<br>            var prodcuthtml = "";<br>            //product image<br>            var prodcuthtml =<br>              prodcuthtml +<br>              '&lt;div class="product-image"&gt;&lt;a href="#0"&gt;&lt;img src="img/product-preview.png" alt="placeholder"&gt;&lt;/a&gt;&lt;/div&gt;';<br>            //product name<br>            prodcuthtml =<br>              prodcuthtml +<br>              '&lt;div class=""&gt;&lt;h3&gt;&lt;a href="#0"&gt;' +<br>              name +<br>              "&lt;/a&gt;&lt;/h3&gt;";<br>            //product price<br>            prodcuthtml =<br>              prodcuthtml + '&lt;span class="price"&gt;' + price + " BTC&lt;/span&gt;";<br>            //actions div<br>            prodcuthtml = prodcuthtml + '&lt;div class="actions"&gt;';</span><span id="98b7" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//delete option<br>            prodcuthtml =<br>              prodcuthtml +<br>              '&lt;a href="javascript:SR.deleteitem()" class="delete-item"&gt;Delete&lt;/a&gt;';<br>            prodcuthtml = prodcuthtml + '&lt;div class="quantity"&gt;';<br>            //quantity label<br>            prodcuthtml =<br>              prodcuthtml +<br>              '&lt;label for="cd-product-' +<br>              productid +<br>              '"&gt;Qty&lt;/label&gt;';<br>            //quantity select<br>            prodcuthtml =<br>              prodcuthtml +<br>              '&lt;span class="select"&gt;&lt;select id="productquantity" name="productquantity" onchange="SR.changequantity()"&gt;';<br>            var i = 0;<br>            for (i = 1; i &lt; quantity; i++) {<br>              if (i == itemcount)<br>                prodcuthtml =<br>                  prodcuthtml +<br>                  '&lt;option value="' +<br>                  i +<br>                  '" selected&gt;' +<br>                  i +<br>                  "&lt;/option&gt;";<br>              else<br>                prodcuthtml =<br>                  prodcuthtml + '&lt;option value="' + i + '"&gt;' + i + "&lt;/option&gt;";<br>            }<br>            prodcuthtml = prodcuthtml + "&lt;/select&gt;&lt;/span&gt;";<br>            //end of quantiy div<br>            var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>            //end of actions div<br>            var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>            //end of products details div<br>            var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>            //end of product div<br>            //add to the list<br>            itemlist.innerHTML = prodcuthtml;<br>            // append  to the end of theParent<br>            productlist.innerHTML = "";<br>            productlist.appendChild(itemlist);<br>          }<br>        });<br>      //cart clicked element<br>      document<br>        .querySelector(".cd-cart-trigger")<br>        .addEventListener("click", function() {<br>          //check if cart shoud be shown<br>          //debug<br>          //itemcount = 1;<br>          if (itemcount == 0) {<br>            //always remove as its 0<br>            removeClass(<br>              document.querySelector(".cd-cart-container"),<br>              "cart-open"<br>            );<br>          } else {<br>            //see if the cart is open and toggle it<br>            var res = hasClass(<br>              document.querySelector(".cd-cart-container"),<br>              "cart-open"<br>            );<br>            if (res == 1) {<br>              //close it<br>              removeClass(<br>                document.querySelector(".cd-cart-container"),<br>                "cart-open"<br>              );<br>            } else {<br>              cartstate(1);<br>            }<br>          }<br>        });<br>      /*<br>  *===============================<br>  *END OF ELEMENT CLICK FUNCTIONS<br>  *================================<br>  */<br>    }<br>    return {<br>      init: function(Args) {<br>        /*</span><span id="81f5" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >Server vars you can pass set to "" to ignore<br>         0 = server url. string<br>         1 = animating.  True or false<br>         2 = quantity<br>   3 = cdnurl<br>   4 = uid<br>   5 = theme</span><span id="fc57" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >*/<br>        _args = Args;</span><span id="4280" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//override the server url<br>        if (_args[0] != "") {<br>          serverurl = _args[0];<br>          //alert(serverurl);<br>        }<br>        //check if it is a boolean and if so then set it.<br>        if (typeof _args[1] === "boolean") {<br>          animating = _args[1];<br>        }<br>        //quantity<br>        if (_args[2] != "") {<br>          quantity = _args[2];<br>        }<br>        //cdn url<br>        if (_args[3] != "") {<br>          cdnurl = _args[3];<br>        }<br>        //uid<br>        if (_args[4] != "") {<br>          uid = _args[4];<br>        }<br>        //theme<br>        if (_args[5] != "") {<br>          theme = _args[5];<br>        }</span><span id="0656" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//load css</span><span id="a18d" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >document.head.innerHTML =<br>          document.head.innerHTML +<br>          '&lt;link href="' +<br>          cdnurl +<br>          "theme/" +<br>          theme +<br>          '.css" rel="stylesheet"&gt;';</span><span id="a56d" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//fetch the template so we can use themes<br>        fetchurl(cdnurl + "theme/" + theme + ".html", "carttemplate");<br>      },<br>      //this function changes the quantity of the item in the cart<br>      //note : it is in the name space like this as the cart items are created dynamically so the dom does not always know about it's existence<br>      //   which means that we have to call it from the onchange in the select old school I.E javascript:SR.chanagequantity() which is not ideal<br>      //   and we will fix it later.<br>      changequantity: function() {<br>        var elquantity = document.getElementById("productquantity");<br>        itemcountq = elquantity.options[elquantity.selectedIndex];<br>        itemcount = parseInt(itemcountq.value);<br>        carttotal();<br>      },<br>      //this function deletes an item in the cart<br>      //note : it is in the name space like this as the cart items are created dynamically so the dom does not always know about it's existence<br>      //   which means that we have to call it from the onchange in the select old school I.E javascript:SR.chanagequantity() which is not ideal<br>      //   and we will fix it later.<br>      deleteitem: function() {<br>        itemcount = 0;<br>        var productlist = document.getElementById("cartlistitems");<br>        productlist.innerHTML = "";<br>        carttotal();<br>        //close it<br>        removeClass(document.querySelector(".cd-cart-container"), "cart-open");<br>      }<br>    };<br>  })();</span></pre>
<p id="4d7f" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Wowsers, that is a chunk of code maybe we should break that down a little.</p>
<p id="7c57" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The first thing we do it create a "<strong><a href="https://addyosmani.com/blog/essential-js-namespacing/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">namespace</a></strong>" where we can store all of the e-commerce code. It is really important we put all the code in here or we can easily have conflicts or even worse, "<strong><a href="https://medium.freecodecamp.org/how-javascript-variable-scoping-is-just-like-multiple-levels-of-government-d7ddabc49bf1" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">scoping issues!</a></strong>"</p>
<pre class="ke kf kg kh ki dv ge df"><span id="3c23" class="mf kv bf av mr b dz ms mt l mu" >var SR = SR ||<br>  (function() {</span><span id="8ab0" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >  })();</span></pre>
<p id="5986" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we have a few global variables. Now we know some of the hotshot kids out there hate global variables. We do not, they have a place and we use them accordingly if you do not like global variables please fork and refactor accordingly.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="7b68" class="mf kv bf av mr b dz ms mt l mu" >//holdthe number of product<br>var itemcount = 0;<br>//hold the price of the product<br>var price = "";<br>//hold the name of the product<br>var name = "";<br>//hold the addres of the product<br>var address = "";<br>//hold the email<br>var email = "";<br>//hold the user id<br>var uid = "";<br>//hold the server url can be overridden in init<br>var serverurl = "<a href="http://srcryptoapi.eu-west-1.elasticbeanstalk.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://srcryptoapi.eu-west-1.elasticbeanstalk.com/</a>";<br>//hold the cdn url can be overridden in init<br>var cdnurl = "<a href="http://s3.eu-west-1.amazonaws.com/srcrypto/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://s3.eu-west-1.amazonaws.com/srcrypto/</a>";</span></pre>
<p id="95e0" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we have our init function. This is where we take the parameters you pass in from the index page of WWW and add them to global variables where appropriate.</p>
<p id="e4b2" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Once the vars have been set we inject our CSS into the dom via the code line using the URL of the theme.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="d889" class="mf kv bf av mr b dz ms mt l mu" ><strong class="mr lz">document.head.innerHTML = document.head.innerHTML +’&lt;link href=”’+cdnurl+’theme/’+theme+’.css” rel=”stylesheet”&gt;</strong>’</span></pre>
<p id="dffd" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Lastly, we make an AJAX call via the fetchurl function to get the cart.html</p>
<pre class="ke kf kg kh ki dv ge df"><span id="2568" class="mf kv bf av mr b dz ms mt l mu" >init : function(Args) <br>{<br><br>   _args = Args;</span><span id="94f7" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >   //override the server url<br>   if (_args[0] != '')<br>   {<br>    serverurl = _args[0];<br>    //alert(serverurl);<br>   }<br>   //check if it is a boolean and if so then set it.<br>   if (typeof(_args[1]) === "boolean")<br>   {<br>    animating = _args[1]<br>   }<br>   //quantity<br>   if (_args[2] != "")<br>   {<br>    quantity = _args[2]<br>   }<br>   //cdn url<br>   if (_args[3] != "")<br>   {<br>    cdnurl = _args[3]<br>   } <br>   //uid<br>   if (_args[4] != "")<br>   {<br>    uid = _args[4]<br>   }<br>   //theme<br>   if (_args[5] != "")<br>   {<br>    theme = _args[5]<br>   }</span><span id="1c5f" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//load css</span><span id="2237" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >document.head.innerHTML = document.head.innerHTML +'&lt;link href="'+cdnurl+'theme/'+theme+'.css" rel="stylesheet"&gt;'</span><span id="d4e2" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//fetch the template so we can use themes <br>   fetchurl(cdnurl+'theme/'+theme+'.html','carttemplate');<br>}</span></pre>
<p id="d55a" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">Fetchurl</strong></p>
<p id="f72e" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >This function calls endpoints on the server. and has a simple if structure to deal with the response ideally, it should use callbacks and events but that would mean delving into async functionality and all the fun that comes with that. We will do this later but for now, let’s keep it nice and simple.</p>
<p id="e02b" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >From the code below you can see it calls four endpoints</p>
<ul class="">
<li id="1170" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu np nq nr" >getaddress</li>
<li id="d274" class="lh li bf av lj b lk ns lm nt lo nu lq nv ls nw lu np nq nr" >storeproduct</li>
<li id="e7be" class="lh li bf av lj b lk ns lm nt lo nu lq nv ls nw lu np nq nr" >carttemplate</li>
<li id="4324" class="lh li bf av lj b lk ns lm nt lo nu lq nv ls nw lu np nq nr" >storeuserdetails</li>
</ul>
<p id="1d05" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >the above with the exception of <strong class="lj lz">carttemplate</strong> (calls in the cart HTML in theme, explained in the themes section) are endpoints on the server and.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="1b75" class="mf kv bf av mr b dz ms mt l mu" > function fetchurl(url,method)<br> {<br>  var request = new XMLHttpRequest();<br>  request.open('GET',url, true);<br>  //call it<br>  request.onload = function() {<br>    if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {<br>      if (method == "getaddress")<br>      {<br>       // parse the data<br>       var data = JSON.parse(request.responseText);<br>       //debug<br>       //console.log(data)<br>       //set the address<br>       address = data.address;<br>       //set the address in the checkout<br>       var elbtcaddress = document.getElementById('bitcoinaddress');<br>       //set the href<br>       elbtcaddress.setAttribute('href', "bitcoin:"+address);<br>       //set the address<br>       elbtcaddress.innerText =address;<br>       //debug<br>       //console.log(elbtcaddress)</span><span id="15c5" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//generate the qr code<br>       var elbtcqr = document.getElementById('bitcoinqrcode');<br>    elbtcqr.setAttribute('src', "<a href="https://chart.googleapis.com/chart?chs=250x250&amp;cht=qr&amp;chl=" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://chart.googleapis.com/chart?chs=250x250&amp;cht=qr&amp;chl=</a>"+address);<br>       //debug<br>       //console.log(elbtcqr)<br>      }<br>      if (method == "storeproduct")<br>      {<br>       //do stuff if you want.<br>      }<br>      if (method == "carttemplate")<br>      {<br>       //debug<br>       //console.log(request.responseText);</span><span id="4790" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//add the cart templatehtml<br>    document.body.insertAdjacentHTML("beforeend", request.responseText);<br>    //add the click elements listeners<br>    clickElements()<br>    //get an address<br>    var url = serverurl+"api/address?uid="+uid;<br>    fetchurl(url,'getaddress')<br>      }<br>      if (method == "storeuserdetails")<br>      {<br>       cartstate(4);<br>      }</span><span id="3374" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >} <br>    else<br>    {<br>      // We reached our target server, but it returned an error</span><span id="216a" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >}<br>  };<br>  request.onerror = function() {<br>     // There was a connection error of some sort<br>  };<br>  request.send();<br> }</span></pre>
<p id="d7be" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">Theme</strong></p>
<p id="de1a" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The code is designed to be themeable and as a result, we have a directory called theme and it contains the following files:</p>
<p id="33dc" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">"<a href="https://s3.eu-west-1.amazonaws.com/srcrypto/theme/cart.html" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cart.html</a>"</strong></p>
<p id="a723" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">"<a href="https://s3.eu-west-1.amazonaws.com/srcrypto/theme/cart.css" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cart.css</a>"</strong></p>
<p id="3678" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >These are inserted dynamically into the "<strong><a href="https://www.w3schools.com/js/js_htmldom.asp" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">DOM</a>"</strong> of the website from the "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/refactor1/cdn/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">SR.js</a>" </strong>and of course as they are being loaded externally take an amount of time to load you speed things up by putting these files directly into your WWW (if it is to slow for you). We will make this a paramater you can pass from the init section.</p>
<p id="53df" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >You can also point this to a theme URL of your own design if you want to apply your own styles. If you decide to do this please make sure that you configure your "<strong><a href="https://techblog.constantcontact.com/software-development/using-cors-for-cross-domain-ajax-requests/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">CORS</a>"</strong> correctly</p>
<p id="5aaf" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">ClickElements</strong></p>
<p id="f068" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Getting back to the flow of the code once we have called the “<strong class="lj lz">fetchurl”</strong>function with the “<strong class="lj lz">cartdetails”</strong> method we call the click elements function. Basically, this adds the listeners to the cart. The reason we have to do this after the cart load is that the elements do not exist if we tried to bind at this point it would throw all kind of errors. Luckily the core of Javascript has been coded quite badly, a lot of the time and we can take advantage of this fact and add the listeners at any point.</p>
<p id="43f7" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Now, I know you, javascript gods, out there are saying just refresh the DOM. Which technically this would work but we do not know <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">MVVM</a> you are using (if an) and when/if you update variables on your site. So better to keep it simple.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="3c5d" class="mf kv bf av mr b dz ms mt l mu" >function clickElements() {<br>  /*<br>  *===============================<br>  *START OF ELEMENT CLICK FUNCTIONS<br>  *================================<br>  */</span><span id="0373" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//bitcoin back click<br>  document<br>    .getElementById("checkoutbitocoin")<br>    .addEventListener("click", function() {<br>      cartstate(5);<br>    });<br>  //payment click<br>  document.getElementById("sr-pay").addEventListener("click", function() {<br>    //get the email<br>    //note: We want to update this when we collect more than email, shipping address etc.<br>    var useremail = document.getElementById("sr-email").value;<br>    //only send the email if it has not been sent<br>    if (email != useremail) {<br>      email = useremail;<br>      var url =<br>        serverurl +<br>        "api/storeuserdetails?email=" +<br>        email +<br>        "&amp;address=" +<br>        address;<br>      //call the store produt endpoint<br>      fetchurl(url, "storeuserdetails");<br>    } else {<br>      cartstate(4);<br>    }<br>  });<br>  //customer back click<br>  document<br>    .getElementById("checkoutcustomerdetailsback")<br>    .addEventListener("click", function() {<br>      cartstate(3);<br>    });<br>  //add to cart click element<br>  document.querySelector(".checkout").addEventListener("click", function() {<br>    cartstate(2);<br>  });</span><span id="97c6" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//add to cart click element<br>  document<br>    .querySelector(".cd-add-to-cart")<br>    .addEventListener("click", function() {<br>      //get details<br>      var elproduct = document.getElementById("cd-add-to-cart");<br>      price = elproduct.getAttribute("data-price");<br>      name = elproduct.getAttribute("data-name");<br>      //will update when we use multipile products<br>      var productid = 1;<br>      //todo<br>      var previewpic = "";<br>      //increment count (quantity)<br>      if (itemcount &lt;= quantity) {<br>        itemcount = itemcount + 1;<br>        carttotal(price);</span><span id="dac2" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//show it<br>        showClass(document.querySelector(".cd-cart-container"));</span><span id="c8e5" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//add item to cart<br>        var productlist = document.getElementById("cartlistitems");<br>        var itemlist = document.createElement("li");<br>        itemlist.className = "product ";</span><span id="2806" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//build produt<br>        var prodcuthtml = "";<br>        //product image<br>        var prodcuthtml =<br>          prodcuthtml +<br>          '&lt;div class="product-image"&gt;&lt;a href="#0"&gt;&lt;img src="img/product-preview.png" alt="placeholder"&gt;&lt;/a&gt;&lt;/div&gt;';<br>        //product name<br>        prodcuthtml =<br>          prodcuthtml + '&lt;div class=""&gt;&lt;h3&gt;&lt;a href="#0"&gt;' + name + "&lt;/a&gt;&lt;/h3&gt;";<br>        //product price<br>        prodcuthtml =<br>          prodcuthtml + '&lt;span class="price"&gt;' + price + " BTC&lt;/span&gt;";<br>        //actions div<br>        prodcuthtml = prodcuthtml + '&lt;div class="actions"&gt;';</span><span id="4ad7" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//delete option<br>        prodcuthtml =<br>          prodcuthtml +<br>          '&lt;a href="javascript:SR.deleteitem()" class="delete-item"&gt;Delete&lt;/a&gt;';<br>        prodcuthtml = prodcuthtml + '&lt;div class="quantity"&gt;';<br>        //quantity label<br>        prodcuthtml =<br>          prodcuthtml + '&lt;label for="cd-product-' + productid + '"&gt;Qty&lt;/label&gt;';<br>        //quantity select<br>        prodcuthtml =<br>          prodcuthtml +<br>          '&lt;span class="select"&gt;&lt;select id="productquantity" name="productquantity" onchange="SR.changequantity()"&gt;';<br>        var i = 0;<br>        for (i = 1; i &lt; quantity; i++) {<br>          if (i == itemcount)<br>            prodcuthtml =<br>              prodcuthtml +<br>              '&lt;option value="' +<br>              i +<br>              '" selected&gt;' +<br>              i +<br>              "&lt;/option&gt;";<br>          else<br>            prodcuthtml =<br>              prodcuthtml + '&lt;option value="' + i + '"&gt;' + i + "&lt;/option&gt;";<br>        }<br>        prodcuthtml = prodcuthtml + "&lt;/select&gt;&lt;/span&gt;";<br>        //end of quantiy div<br>        var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>        //end of actions div<br>        var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>        //end of products details div<br>        var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>        //end of product div<br>        //add to the list<br>        itemlist.innerHTML = prodcuthtml;<br>        // append  to the end of theParent<br>        productlist.innerHTML = "";<br>        productlist.appendChild(itemlist);<br>      }<br>    });<br>  //cart clicked element<br>  document<br>    .querySelector(".cd-cart-trigger")<br>    .addEventListener("click", function() {<br>      //check if cart shoud be shown<br>      //debug<br>      //itemcount = 1;<br>      if (itemcount == 0) {<br>        //always remove as its 0<br>        removeClass(document.querySelector(".cd-cart-container"), "cart-open");<br>      } else {<br>        //see if the cart is open and toggle it<br>        var res = hasClass(<br>          document.querySelector(".cd-cart-container"),<br>          "cart-open"<br>        );<br>        if (res == 1) {<br>          //close it<br>          removeClass(<br>            document.querySelector(".cd-cart-container"),<br>            "cart-open"<br>          );<br>        } else {<br>          cartstate(1);<br>        }<br>      }<br>    });<br>  /*<br>  *===============================<br>  *END OF ELEMENT CLICK FUNCTIONS<br>  *================================<br>  */<br>}</span></pre>
<p id="6433" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >After “<strong class="lj lz">clickelements</strong>” has finished processing we call “<strong class="lj lz">fetchurl”</strong> again this time with the “<strong class="lj lz">getaddress</strong>” method. This contacts the server and gets a new Bitcoin address for this session of the cart.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="b218" class="mf kv bf av mr b dz ms mt l mu" >var url = serverurl+"api/address?uid="+uid;<br>fetchurl(url,'getaddress')</span></pre>
<p id="0d7a" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Once the Bitcoin address has been returned we use this to set up the rest of the cart as you can see from the code snippet below we set the payment address to the Bitcoin address returned and call google chart API to generate a QR code</p>
<pre class="ke kf kg kh ki dv ge df"><span id="b028" class="mf kv bf av mr b dz ms mt l mu" >if (method == "getaddress") {<br>  // parse the data<br>  var data = JSON.parse(request.responseText);<br>  //debug<br>  //console.log(data)<br>  //set the address<br>  address = data.address;<br>  //set the address in the checkout<br>  var elbtcaddress = document.getElementById("bitcoinaddress");<br>  //set the href<br>  elbtcaddress.setAttribute("href", "bitcoin:" + address);<br>  //set the address<br>  elbtcaddress.innerText = address;<br>  //debug<br>  //console.log(elbtcaddress)</span><span id="440a" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//generate the qr code<br>  var elbtcqr = document.getElementById("bitcoinqrcode");<br>  elbtcqr.setAttribute(<br>    "src",<br>    "<a href="https://chart.googleapis.com/chart?chs=250x250&amp;cht=qr&amp;chl=" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://chart.googleapis.com/chart?chs=250x250&amp;cht=qr&amp;chl=</a>" + address<br>  );<br>  //debug<br>  //console.log(elbtcqr)<br>}</span></pre>
<p class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_ukrYWhpsLPw5PoJmv43rBA.png" alt="" width="162" height="167"></p>
<p id="b0c2" >That is the cart now fully set up and it is simply rendered into WWW and hidden. From this point on the cart just waits for one of the listeners we configured in the “<strong class="lj lz">clickelements</strong>” function to be "<strong><a href="https://www.w3schools.com/js/js_function_invocation.asp" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">invoked</a>"</strong>. If you go to the "<strong><a href="http://s3-eu-west-1.amazonaws.com/srcrypto/demo/index.html#0" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">demo</a>"</strong> and click at to cart you will the image below. The number in the red circle will increase every time you click the add to cart button</p>
<p id="3409" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >everytime you click the add to cart button the following event listener is called.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="4627" class="mf kv bf av mr b dz ms mt l mu" >document.querySelector(".cd-add-to-cart").addEventListener("click", function() {</span><span id="53ff" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >});</span></pre>
<p id="d73d" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The first thing this does is fetch the price and name from the add to cart button (as described in the WWW section of this site).</p>
<p id="d6a6" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Note we have not used “<strong class="lj lz">productid”</strong> and “<strong class="lj lz">previewpic”</strong> yet this is for a future update so please ignore for now.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="0250" class="mf kv bf av mr b dz ms mt l mu" >//get details<br>var elproduct = document.getElementById("cd-add-to-cart");<br>price = elproduct.getAttribute("data-price");<br>name = elproduct.getAttribute("data-name");<br>//will update when we use multipile products<br>var productid = 1;<br>//todo<br>var previewpic = "";</span></pre>
<p id="5b8b" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we increment the “<strong class="lj lz">itemcount”</strong> which is essentially the quantity and call the “<strong class="lj lz">carttotal”</strong> function. After that, we get an element called “<strong class="lj lz">cartlistitems</strong>” which is part of the “<strong class="lj lz">cartitems” </strong>HTML and add an item to it with the price and name of the product.</p>
<pre class="ke kf kg kh ki dv ge df"><span id="6be9" class="mf kv bf av mr b dz ms mt l mu" >if (itemcount &lt;= quantity) {<br>  itemcount = itemcount + 1;<br>  carttotal(price);</span><span id="32c1" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//show it<br>  showClass(document.querySelector(".cd-cart-container"));</span><span id="c25c" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//add item to cart<br>  var productlist = document.getElementById("cartlistitems");<br>  var itemlist = document.createElement("li");<br>  itemlist.className = "product ";</span><span id="23bc" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//build produt<br>  var prodcuthtml = "";<br>  //product image<br>  var prodcuthtml =<br>    prodcuthtml +<br>    '&lt;div class="product-image"&gt;&lt;a href="#0"&gt;&lt;img src="img/product-preview.png" alt="placeholder"&gt;&lt;/a&gt;&lt;/div&gt;';<br>  //product name<br>  prodcuthtml =<br>    prodcuthtml + '&lt;div class=""&gt;&lt;h3&gt;&lt;a href="#0"&gt;' + name + "&lt;/a&gt;&lt;/h3&gt;";<br>  //product price<br>  prodcuthtml = prodcuthtml + '&lt;span class="price"&gt;' + price + " BTC&lt;/span&gt;";<br>  //actions div<br>  prodcuthtml = prodcuthtml + '&lt;div class="actions"&gt;';</span><span id="c4de" class="mf kv bf av mr b dz ng nh ni nj nk mt l mu" >//delete option<br>  prodcuthtml =<br>    prodcuthtml +<br>    '&lt;a href="javascript:SR.deleteitem()" class="delete-item"&gt;Delete&lt;/a&gt;';<br>  prodcuthtml = prodcuthtml + '&lt;div class="quantity"&gt;';<br>  //quantity label<br>  prodcuthtml =<br>    prodcuthtml + '&lt;label for="cd-product-' + productid + '"&gt;Qty&lt;/label&gt;';<br>  //quantity select<br>  prodcuthtml =<br>    prodcuthtml +<br>    '&lt;span class="select"&gt;&lt;select id="productquantity" name="productquantity" onchange="SR.changequantity()"&gt;';<br>  var i = 0;<br>  for (i = 1; i &lt; quantity; i++) {<br>    if (i == itemcount)<br>      prodcuthtml =<br>        prodcuthtml + '&lt;option value="' + i + '" selected&gt;' + i + "&lt;/option&gt;";<br>    else<br>      prodcuthtml =<br>        prodcuthtml + '&lt;option value="' + i + '"&gt;' + i + "&lt;/option&gt;";<br>  }<br>  prodcuthtml = prodcuthtml + "&lt;/select&gt;&lt;/span&gt;";<br>  //end of quantiy div<br>  var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>  //end of actions div<br>  var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>  //end of products details div<br>  var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>  //end of product div<br>  //add to the list<br>  itemlist.innerHTML = prodcuthtml;<br>  // append  to the end of theParent<br>  productlist.innerHTML = "";<br>  productlist.appendChild(itemlist);</span></pre>
<p id="198c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">carttotal</strong></p>
<p id="fba7" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The cart total function gets the price of the product and times it by the itemcount (quantity), converts into a BTC friendly format and updates the checkout total.</p>
<p id="ca3f" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Finally, it call’s “<strong class="lj lz">storeproduct</strong>” endpoint on the server via the “<strong class="lj lz">fetchurl”</strong>function</p>
<pre class="ke kf kg kh ki dv ge df"><span id="6b5b" class="mf kv bf av mr b dz ms mt l mu" >//this functions updates the totals for the cart<br>function carttotal() {<br>  //multipily the price by the number of items in the cart<br>  var producttotal = price * itemcount;<br>  //set it to 8 decimal places as it's Bitcoin<br>  producttotal = parseFloat(producttotal).toFixed(8);<br>  changeClassText(document.getElementById("checkouttotal"), producttotal);<br>  //update counter<br>  changeClassText(document.querySelector(".cd-count"), itemcount);<br>  //store product<br>  var url =<br>    serverurl +<br>    "api/storeproduct?name=" +<br>    name +<br>    "&amp;quantity=" +<br>    itemcount +<br>    "&amp;address=" +<br>    address +<br>    "&amp;price=" +<br>    price;<br>  //call the store produt endpoint<br>  fetchurl(url, "storeproduct");<br>}</span></pre>
<p class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_ukrYWhpsLPw5PoJmv43rBA.png" alt="" width="162" height="167"></p>
<p id="3b6b" >Now, if we go ahead and click the cart icon (shown below) it will open the cart and display the correct details</p>
<p id="ab6e" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The above is controlled by the “<strong class="lj lz">cd-cart-trigger</strong>” listener which simply shows the cart container and calls the “<strong class="lj lz">cartstate</strong>” function</p>
<pre class="ke kf kg kh ki dv ge df"><span id="5c5b" class="mf kv bf av mr b dz ms mt l mu" >document<br>  .querySelector(".cd-cart-trigger")<br>  .addEventListener("click", function() {<br>    //check if cart shoud be shown<br>    //debug<br>    //itemcount = 1;<br>    if (itemcount == 0) {<br>      //always remove as its 0<br>      removeClass(document.querySelector(".cd-cart-container"), "cart-open");<br>    } else {<br>      //see if the cart is open and toggle it<br>      var res = hasClass(<br>        document.querySelector(".cd-cart-container"),<br>        "cart-open"<br>      );<br>      if (res == 1) {<br>        //close it<br>        removeClass(document.querySelector(".cd-cart-container"), "cart-open");<br>      } else {<br>        cartstate(1);<br>      }<br>    }<br>  });</span></pre>
<p id="5880" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">cartstate</strong></p>
<p id="5fd3" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The cartstate function simply loads the correct UX for the cart. It has 3 states it can be in (ignoring hidden)</p>
<h2 id="beb6" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" >product view</h2>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_d3KOm09LFsUazdibty6ayQ.png" alt="" width="927" height="828"></p>
<h2 id="a0fe" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" >customer details view (click checkout)</h2>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_XoKCGcsb-Qy45AOqGSASdQ.png" alt="" width="896" height="825"></p>
<h2 id="b5a2" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" >pay view</h2>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/9/1_BKxP1DTR8Qti-sAFKNDL0g.png" alt="" width="917" height="845"></p>
<pre class="ke kf kg kh ki dv ge df"><span id="015d" class="mf kv bf av mr b dz ms mt l mu" >//this function works with how the cart should look and sets the correct viusal elements<br>function cartstate(state) {<br>  /*<br>   1 = show cart product details<br>   2 = show customer details screen<br>   3 = customer detals back<br>   4 = custmer details pay click<br>   5 = bitcoin details back click<br>  */<br>  switch (state) {<br>    case 1:<br>      //hide btc stuff<br>      hideClass(document.getElementById("checkoutbitocoin"));<br>      hideClass(document.getElementById("bitcoinaddresswrapper"));<br>      //hide the customer details<br>      hideClass(document.getElementById("customerdetailswrapper"));<br>      //hide customer detals back<br>      hideClass(document.getElementById("checkoutcustomerdetailsback"));<br>      //open it<br>      addClass(document.querySelector(".cd-cart-container"), "cart-open");<br>      //show the product details<br>      showClass(document.getElementById("cartlistitems"));<br>      break;<br>    case 2:<br>      //hide the product details<br>      hideClass(document.getElementById("cartlistitems"));<br>      //show the customer details<br>      showClass(document.getElementById("customerdetailswrapper"));<br>      showClass(document.getElementById("checkoutcustomerdetailsback"));<br>      //hide btc stuff<br>      hideClass(document.getElementById("bitcoinaddresswrapper"));<br>      break;<br>    case 3:<br>      //show the product details<br>      showClass(document.getElementById("cartlistitems"));<br>      //hide btc stuff<br>      hideClass(document.getElementById("bitcoinaddresswrapper"));<br>      //hide the customer details<br>      hideClass(document.getElementById("customerdetailswrapper"));<br>      hideClass(document.getElementById("checkoutcustomerdetailsback"));<br>      break;<br>    case 4:<br>      //hide the product details<br>      hideClass(document.getElementById("cartlistitems"));<br>      //show btc stuff<br>      showClass(document.getElementById("bitcoinaddresswrapper"));<br>      showClass(document.getElementById("checkoutbitocoin"));<br>      //hide the customer details<br>      hideClass(document.getElementById("checkoutcustomerdetailsback"));<br>      hideClass(document.getElementById("customerdetailswrapper"));<br>      break;<br>    case 5:<br>      //hide the product details<br>      hideClass(document.getElementById("cartlistitems"));<br>      //show the customer details<br>      showClass(document.getElementById("checkoutcustomerdetailsback"));<br>      showClass(document.getElementById("customerdetailswrapper"));<br>      //show btc stuff<br>      hideClass(document.getElementById("bitcoinaddresswrapper"));<br>      hideClass(document.getElementById("checkoutbitocoin"));<br>      break;<br>  }<br>}</span></pre>
<p id="d585" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >There are various things on each those views such as back, delete and change quantity that does exactly what you think they will and have their own listeners that are clearly documented (in the "<strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/refactor1/cdn/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">code</a>"</strong>)</p>
<p > </p>
<h1 id="48f7" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Conclusion</h1>
<p id="efe5" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >So there we go we have a refactored CDN (sr.js) single line of coder injector that will play nicely with any environment you inject it into.</p>
<p id="57b8" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next time we will refactor the server and finally remove the block.io calls and replace them calls our own full now.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Create an Admin and hosting</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/create-an-admin-and-hosting.html"/>
        <id>https://cryptoskillz.com/blog/create-an-admin-and-hosting.html</id>

        <updated>2019-09-20T11:51:35+07:00</updated>
            <summary>
                <![CDATA[
                    <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/8/1_IRIyXKuOZEJK1K2cq2dB4w.jpeg" alt="" width="639" height="470"></p>
<p> </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/8/1_IRIyXKuOZEJK1K2cq2dB4w.jpeg" alt="" width="639" height="470"></p>
<p> </p>

<h1 id="16ac" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Introduction</h1>
<p id="dfde" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >In this part, we have created an admin as well as cleaned up the code and hosted it on "<strong><a href="http://aws.amazon.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">Amazon Web Services</a></strong>".</p>
<h1 id="2214" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The SQL</h1>
<p id="feea" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The keys table has had several fields added to it.</p>
<p id="0dc3" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >“<strong>u</strong><strong class="lj me">serid</strong>” is the user that this payment belongs to, “<strong class="lj me">net</strong>” is the network used (test or live) and the “amount” is the total amount of Bitcoin received.</p>
<p id="bf00" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >Really we should (and will) rename this table in the future.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="80cb" class="mk kv bf av ml b dz mm mn l mo" >CREATE TABLE "keys" ( <br>`id` INTEGER PRIMARY KEY AUTOINCREMENT,<br>`privatekey` TEXT,<br>`publickey` TEXT,<br>`address` TEXT,<br>`processed` INTEGER DEFAULT 0,<br>`swept` INTEGER DEFAULT 0,<br>`userid` INTEGER,<br>`net` INTEGER DEFAULT 1,<br>`amount` TEXT DEFAULT 0 <br>)</span></pre>
<p id="f06a" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >We have also added a user table which stores the user settings.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="aff3" class="mk kv bf av ml b dz mm mn l mo" >CREATE TABLE "user" ( <br>`id` INTEGER PRIMARY KEY AUTOINCREMENT,<br>`username` TEXT,<br>`password` TEXT,<br>`isadmin` INTEGER,<br>`sessiontoken` TEXT )</span></pre>
<p id="24bc" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >and a user settings table to store, well the settings.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="f9de" class="mk kv bf av ml b dz mm mn l mo" >CREATE TABLE `usersettings` (<br> `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `userid` INTEGER,<br> `coldstorageaddress` TEXT <br>)</span></pre>
<h1 id="47bb" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Code sections</h1>
<p id="a8a5" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >As discussed in the previous "<strong><a class="cb bx lv lw lx ly" target="_blank" href="https://medium.com/@cryptoskillz_58791/using-bitcoin-to-accept-payments-part-5-b9f5df2499f4" rel="noopener noreferrer">tutorial</a></strong>" we have modularised the code to make it work in a microservice(ish) architecture. Although for learning purposes, we keep it all in one GIT repo we should really have a separate one for each service.</p>
<p id="9981" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >You can find the code for this part of the tutorial "<strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/admin" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a></strong>".</p>
<h2 id="561e" class="mk kv bf av au el mp mq mr ms mt mu mv mw mx my mz" >Admin</h2>
<p id="2089" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The admin part of the service is static HTML site which gets interacts with the API to fetch and store information. We have hosted on amazon s3 (bucket) set up to host static websites. You can see a demo admin by clicking the link below:</p>
<p id="8e19" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" ><strong>"<a href="https://cryptoskillz.com/srcrypto/prod/admin/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://cryptoskillz.com/srcrypto/prod/admin/</a>"</strong></p>
<p id="d373" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >Please note this is a very simple admin and should not be considered for a production app, it is purely to show and allow us to easier run test transactions. Ideally, we would rebuild it in "<strong><a href="https://reactjs.org/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">react</a></strong>" with "<strong><a href="https://jwt.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">JWT</a></strong>" in the future.</p>
<p id="1a5c" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >It is made up of 4 pages and all of the interactions is done via REST API with the server. The 4 pages are listed below:</p>
<h2 id="6c54" class="mk kv bf av au el mp mq mr ms mt mu mv mw mx my mz" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/admin/admin/login.html" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">login.html</a></h2>
<p id="1351" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >This page is the simple login page and it will verify that you have logged in by returning a session token that you then use to access the other parts of the admin</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/8/1_x4W7U4k_2MIfK5vaJyrqOQ.png" alt="" width="2015" height="472"></p>
<h2 id="b9fc" class="mk kv bf av au el mp mq mr ms mt mu mv mw mx my mz" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/admin/admin/index.html" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">Index.html</a>:</h2>
<p id="450b" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The first page you see when you are logged in</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/8/1_D16UkqMOHPXDrUq_Q2_VAw.png" alt="" width="1825" height="426"></p>
<h2 id="f4a4" class="mk kv bf av au el mp mq mr ms mt mu mv mw mx my mz" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/admin/admin/payments.html" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">payments.html</a></h2>
<p id="e236" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >the payments table page allowing you to check payments/sweep to cold wallet etc.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/8/1_zvsAj4x93kGlB178CBA6cw.png" alt="" width="2200" height="523"></p>
<h2 id="9168" class="mk kv bf av au el mp mq mr ms mt mu mv mw mx my mz" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/admin/admin/settings.html" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">settings.html</a></h2>
<p id="6a96" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >the settings page</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/8/1_SN_mvUI6uohqrIse8YLY5w.png" alt="" width="2146" height="426"></p>
<p id="f94a" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >All of the REST API interaction with the server is done inside main.js which is shown below.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="69ca" class="mk kv bf av ml b dz mm mn l mo" >//server call to make the AJAX calls to<br>//set url to production<br>var serverurl = "<a href="http://srcryptoapi.eu-west-1.elasticbeanstalk.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://srcryptoapi.eu-west-1.elasticbeanstalk.com/</a>";<br>//check if we are local<br>//note : set this whatever your local instance is 127.0.0.1 for example<br>if (window.location.href.indexOf("srcrypto") &gt; -1) {<br>  serverurl = "<a href="http://127.0.0.1:3000/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://127.0.0.1:3000/</a>";<br>}</span><span id="4934" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//hold the return from the server<br>var ajaxdata = "";<br>//hold the session token<br>var token = "";</span><span id="2cb7" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//set a cookie<br>function setCookie(cname, cvalue) {<br>  document.cookie = cname + "=" + cvalue + "; path=/";<br>}</span><span id="bbc6" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//get a cookie<br>function getCookie(cname) {<br>  var i,<br>    c,<br>    ca,<br>    nameEQ = cname + "=";<br>  ca = document.cookie.split(";");<br>  for (i = 0; i &lt; ca.length; i++) {<br>    c = ca[i];<br>    while (c.charAt(0) == " ") {<br>      c = c.substring(1, c.length);<br>    }<br>    if (c.indexOf(nameEQ) == 0) {<br>      return c.substring(nameEQ.length, c.length);<br>    }<br>  }<br>  return "";<br>}</span><span id="5618" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//process the return from the server settings calls<br>function settingsDone() {<br>  var result = $.parseJSON(ajaxdata);<br>  //debug<br>  //console.log(result.results[0]);<br>  if (result.results[0] != "0") {<br>    //alert(result.results[0].coldstorageaddress);<br>    $("#address").val(result.results[0].coldstorageaddress);<br>  } else {<br>    alert("settings not updated");<br>  }<br>}</span><span id="03f2" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//process he return form the update settings call<br>//note: I know this should be on the post for the settings endpoint but I have been lazy.  Will refactor it later.<br>function updatesettigsDone() {<br>  //get the result<br>  var result = $.parseJSON(ajaxdata);<br>  //debug<br>  //console.log(result.results);<br>  //check update status<br>  if (result.results == "ok") {<br>    alert("settings updated");<br>  } else {<br>    alert("eror updating settings");<br>  }<br>}</span><span id="7919" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//check the result from the processed server call<br>function checkProcessedDone() {<br>  //process the result<br>  var result = $.parseJSON(ajaxdata);<br>  //check the status<br>  if (result.status == "confirmed") {<br>    //refresh the payment table<br>    var geturl = serverurl + "admin/payments?token=" + token;<br>    ajaxGET(geturl, "paymentsDone()");<br>  } else {<br>    //alert the user to an error<br>    alert("Payment not confirmed");<br>  }<br>}</span><span id="3159" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//call the server to see if the payment has been processed<br>function checkProcessed(address) {<br>  var geturl = serverurl + "api/monitor?address=" + address + "&amp;token=" + token;<br>  //alert(geturl);<br>  ajaxGET(geturl, "checkProcessedDone()");<br>}</span><span id="e074" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//call the server and move the payment to cold storage.<br>function checkSwept(address) {<br>  var geturl = serverurl + "api/sweep?address=" + address + "&amp;token=" + token;<br>  //alert(geturl);<br>  ajaxGET(geturl, "checkSweptDone()");<br>}</span><span id="4b37" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//check the results of the sever<br>function checkSweptDone() {<br>  //process results<br>  var result = $.parseJSON(ajaxdata);<br>  //check if it ws swept<br>  if (result.status == "swept") {<br>    //reload the payments page<br>    var geturl = serverurl + "admin/payments?token=" + token;<br>    ajaxGET(geturl, "paymentsDone()");<br>  } else {<br>    //check the error<br>    if (result.status == "already swept") {<br>      //already moved to cold storage<br>      alert("Payment already swept");<br>      var geturl = serverurl + "admin/payments?token=" + token;<br>      ajaxGET(geturl, "paymentsDone()");<br>    }<br>    if (result.status == "not swept") {<br>      //unknown error<br>      alert("Payment not swept");<br>    }<br>  }<br>}</span><span id="92fa" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//process the payments done<br>function paymentsDone() {<br>  //parse the result<br>  var result = $.parseJSON(ajaxdata);<br>  //console.log(result.results);<br>  //console.log(ajaxdata);</span><span id="7c2d" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//grab the table<br>  var t = $("#example").DataTable();<br>  //empty the table<br>  t.clear().draw();<br>  //loop through the results returned from the server<br>  jQuery.each(result.results, function(index, res) {<br>    //console.log(res);<br>    //net 1 = live 2 = test</span><span id="2b63" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//vars<br>    var processed = "Yes";<br>    var swept = "Yes";<br>    //set the block explorer url<br>    var blockexplorerurl = "<a href="https://live.blockcypher.com/btc-testnet/address/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://live.blockcypher.com/btc-testnet/address/</a>";<br>    blockexplorerurl = blockexplorerurl + res.address + "/";<br>    //actions column<br>    var actions =<br>      '&lt;a href="' +<br>      blockexplorerurl +<br>      '" target="_blank"&gt;&lt;i class="fas fa-external-link-square-alt"&gt;&lt;/i&gt;View&lt;/a&gt;';<br>    //check if the payment was processed<br>    if (res.processed == 0) {<br>      //set processed to no<br>      processed = "No";<br>      //add to the action<br>      actions =<br>        actions +<br>        "&lt;a href=\"javascript:checkProcessed('" +<br>        res.address +<br>        '\')"&gt;&lt;i class="fas fa-external-link-square-alt"&gt;&lt;/i&gt;Process&lt;/a&gt;';<br>    } else {<br>      //check if it was swept<br>      //note: you should never have an unprocessed payment that was swept but it does not harm to have this additional check.<br>      if (res.swept == 0) {<br>        //add to the acction<br>        swept = "No";<br>        actions =<br>          actions +<br>          "&lt;a href=\"javascript:checkSwept('" +<br>          res.address +<br>          '\')"&gt;&lt;i class="fas fa-external-link-square-alt"&gt;&lt;/i&gt;Sweep&lt;/a&gt;';<br>      }<br>    }</span><span id="1c4d" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//add the row to the table<br>    t.row<br>      .add([<br>        res.id,<br>        '&lt;a href="' +<br>          blockexplorerurl +<br>          '" target="_blank"&gt;' +<br>          res.address +<br>          "&lt;/a&gt;",<br>        processed,<br>        swept,<br>        res.amount,<br>        actions<br>      ])<br>      .draw(false);<br>  });<br>}</span><span id="ec66" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//process the server return call from login<br>function loginDone() {<br>  //parse the results<br>  var result = $.parseJSON(ajaxdata);<br>  //debug<br>  //console.log(result.token)</span><span id="559c" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//check for token<br>  if (result.token != 0) {<br>    //get the cookie<br>    setCookie("srcookie", result.token);<br>    //redirect to index page<br>    window.location.href = "index.html";<br>  } else {<br>    //issue with login<br>    alert("invalid login details");<br>  }<br>}</span><span id="812d" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//generic ajax call function<br>function ajaxGET(url, parentcallback) {<br>  //debug<br>  //console.log('url'+url);<br>  //console.log(parentcallback);</span><span id="e3f8" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//setup<br>  $.ajaxSetup({<br>    cache: false<br>  });<br>  //make the call<br>  var jqxhr = $.get(url, function(data) {})<br>    .success(function(result) {<br>      //logIt(result);</span><span id="27bb" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//store the result<br>      ajaxdata = result;<br>      //set the done funtion<br>      var tmpFunc = new Function(parentcallback);<br>      //call the done funtion<br>      tmpFunc();<br>    })<br>    .error(function(result) {})<br>    .complete(function() {});<br>}</span><span id="1572" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//update settings click<br>$("#updatesettings").click(function() {<br>  //get the address<br>  address = $("#address").val();<br>  //debug<br>  //alert(address);</span><span id="93e6" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//call the server updatesettings url<br>  var geturl =<br>    serverurl + "admin/updatesettigs?address=" + address + "&amp;token=" + token;<br>  ajaxGET(geturl, "updatesettigsDone()");<br>});</span><span id="f150" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//login click<br>$("#login").click(function() {<br>  //get detals<br>  uname = $("#username").val();<br>  pass = $("#password").val();<br>  //call the login server url<br>  var geturl = serverurl + "admin/login?uname=" + uname + "&amp;pass=" + pass;<br>  ajaxGET(geturl, "loginDone()");<br>});</span><span id="4294" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >$(document).ready(function() {<br>  //get the cookie<br>  token = getCookie("srcookie");<br>  //debug<br>  //console.log(token);<br>  //setCookie('srcookie','12345');<br>  //force login<br>  //setCookie('srcookie','');<br>  //get the url<br>  var url = window.location.href;</span><span id="2d4e" class="mk kv bf av ml b dz nl nm nn no np mn l mo" >//check if it is blank<br>  if (token == "") {<br>    //check if it is not login and redirect<br>    if (url.substr(url.lastIndexOf("/") + 1) != "login.html") {<br>      window.location.href = "login.html";<br>    }<br>  } else {<br>    //check what page we are on<br>    //check if it is the payment page<br>    if (url.substr(url.lastIndexOf("/") + 1) == "payments.html") {<br>      //alert(token);<br>      //make a server call<br>      var geturl = serverurl + "admin/payments?token=" + token;<br>      ajaxGET(geturl, "paymentsDone()");<br>    }<br>    if (url.substr(url.lastIndexOf("/") + 1) == "settings.html") {<br>      //make a server call<br>      var geturl = serverurl + "admin/settings?token=" + token;<br>      ajaxGET(geturl, "settingsDone()");<br>    }<br>    $("#wrapper").removeClass("d-none");<br>    //load the table<br>  }<br>});</span></pre>
<h2 id="55f4" class="mk kv bf av au el mp mq mr ms mt mu mv mw mx my mz" >Hosting the admin</h2>
<p id="d1b4" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >You are free to host on any platform you wish I use Amazon as I find it the best and easiest to use. If you want to a good article on how to set up S3 hosting please click "<strong><a href="https://medium.freecodecamp.org/how-to-host-a-website-on-s3-without-getting-lost-in-the-sea-e2b82aa6cd38" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong> and a good video on how to do it is shown below:</p>
<figure class="mf mg mh mi mj fr">
<div class="jt l ds">
<div class="nq l"><iframe width="640" height="480" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fg9NbuTcos18%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dg9NbuTcos18&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fg9NbuTcos18%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" frameborder="0" title="Hosting a static website on Amazon S3 (AWS howto)" class="du n o jq ab" scrolling="auto" ></iframe></div>
</div>
</figure>
<h2 id="8a0b" class="mk kv bf av au el mp mq mr ms mt mu mv mw mx my mz" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/admin/www" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">WWW</a> and <a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/admin/cdn" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">CDN</a></h2>
<p id="73c3" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >To host "<strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/admin/www" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">WWW</a>"</strong> and "<strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/admin/cdn" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">CDN</a>"</strong> just create two more buckets and move the files above it as shown above. I have hosted both sections on the URLs below.</p>
<p id="6c7b" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" ><strong>"<a href="https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js</a></strong>"</p>
<p id="13f4" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >"<strong><a href="https://cryptoskillz.com/srcrypto/prod/www/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://cryptoskillz.com/srcrypto/prod/www/</a></strong>"</p>
<h2 id="4236" class="mk kv bf av au el mp mq mr ms mt mu mv mw mx my mz" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/admin/server" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">Server</a></h2>
<p id="8aa9" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We have hosted the server on "<strong class="lj me"><a href="https://www.digitalocean.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">Digital Ocean</a>"</strong> but you can use any provider as it is just a simple node js application.</p>
<p id="4787" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" ><strong>"<a href="https://ecstestnet.cryptoskillz.com/api/">https://ecstestnet.cryptoskillz.com/api/</a>"</strong></p>
<p id="011d" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" >Once you have hosted your own server you have to update the server URL in the following files so that they are all pointing to the correct server. If you are running locally you may also have to update the local URL.</p>
<blockquote class="nr ns nt">
<p id="8ff9" class="lh li bf nu lj b lk lz lm ma lo mb lq mc ls md lu" ><strong class="lj me">Note* cryptoskillz from the future here. Laters code uses an SR.init to pass in all these parameters making it easier to configure. Also the URL's changed.</strong></p>
</blockquote>
<p id="9869" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" ><strong>admin <a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/admin/admin/assets/js/main.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">main.js</a></strong></p>
<pre class="mf mg mh mi mj dv ge df"><span id="40b8" class="mk kv bf av ml b dz mm mn l mo" >//server call to make the AJAX calls to//set url to productionvar serverurl = "<a href="http://ecs.cryptoskillz.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://ecs.cryptoskillz.com/</a>";</span></pre>
<p id="ec97" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" ><strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/admin/cdn/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cdn sr.js</a></strong></p>
<pre class="mf mg mh mi mj dv ge df"><span id="416d" class="mk kv bf av ml b dz mm mn l mo" >jQuery(document).ready(function($){ //set url to production var serverurl = "<a href="http://ecs.cryptoskillz.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://ecs.cryptoskillz.com/</a>";</span></pre>
<p id="fa80" class="lh li bf av lj b lk lz lm ma lo mb lq mc ls md lu" ><strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/admin/www/js/main.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">www main.js</a></strong></p>
<pre class="mf mg mh mi mj dv ge df"><span id="4076" class="mk kv bf av ml b dz mm mn l mo" >jQuery(document).ready(function($){  //set the server url. var serverurl = "<a href="http://ecs.cryptoskillz.com/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://ecs.cryptoskillz.com/</a>";</span></pre>
<h1 id="2a9f" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Conclusion</h1>
<p id="3282" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >Now we have a simple admin we have done all of the WWW elements and can get back to the Bitcoin coding and we will be doing that in the next part. We aim to remove all the dependencies from the system and interact with our own full node.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>WWW and modularisation</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/www-and-modularisation.html"/>
        <id>https://cryptoskillz.com/blog/www-and-modularisation.html</id>

        <updated>2019-09-20T11:50:52+07:00</updated>
            <summary>
                <![CDATA[
                    <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/7/1_KOjqZHotBNn9-PIMA9XTHQ.jpeg" alt="" width="638" height="478"></p>
<p> </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/7/1_KOjqZHotBNn9-PIMA9XTHQ.jpeg" alt="" width="638" height="478"></p>
<p> </p>

<h1 id="40c8" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Introduction</h1>
<p id="dfde" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >This guide aims to program a website to accept Bitcoin. In the previous part, we coded "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/server/sweep.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">sweep.js</a>"</strong> which allowed us to move payments to our cold storage.</p>
<p id="d59d" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >In this section, we are going to modularise the code (a little) and create a "<a href="http://s3-eu-west-1.amazonaws.com/srcrypto/demo/index.html" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">WWW</strong></a>" page to allow us to sell something and accept "<strong class="lj lz"><a href="https://en.wikipedia.org/wiki/Bitcoin" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">Bitcoin</a>"</strong> as payment, yay.</p>
<p id="7977" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The branch for this tutorial can be found "<strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/www" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a></strong>".</p>
<h1 id="bedb" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The Modularisation</h1>
<p id="da7f" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >If you look at the code you will see it has been broken down into 3 sections.</p>
<h2 id="2a53" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/www/server" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="ch">Server</strong></a></h2>
<p id="c8de" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >Basically, all the "<strong class="lj lz"><a href="https://nodejs.org/en/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">Node.js</a>"</strong> code we have written has been moved into the server directory. On top of this, there has been a number of changes have been made to make the code flow better.</p>
<p id="e5ba" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">“monitor.js”</strong> and “<strong class="lj lz">generate.js</strong>” have been combined into one file "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/server/index.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">index.js</a>"</strong>.</p>
<p id="e55f" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Note the "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/server/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">monitor.js</a>"</strong> is still there but it has been changed to function as a back-end tool. Imagine the scenario where the user pays for something in the website ("<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/www/www" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">WWW</a>"</strong>) they are not likely to leave the webpage open until the transaction confirms (though they may) so that is why we have the 2 ways of checking for a payment. Api/monitor (in "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/server/index.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">index.js</a>"</strong>) is meant for the website to check for the payment and "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/server/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">monitor.js</a>"</strong> has been designed to be used as a back office tool that will check for payment on a schedule and call the back office task as appropriate.</p>
<pre class="mr ms mt mu mv dv ge df"><span id="8944" class="mf kv bf av mw b dz mx my l mz" >//pass it an address and it will check if payment has been made.  See this just like monitor js does but it is not on a timer.<br>app.get('/api/monitor', (req, res) =&gt; {<br>})</span><span id="d3bd" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//generate an address and output it<br>app.get('/api/address', (req, res) =&gt; {<br>})</span></pre>
<p id="1314" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><span class="lj lz">"<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/server/sweep.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer" style="font-weight: bold;">sweep.js</a>"</span> is unchanged at this point. In a later tutorial, we will add an admin and wrap this into to allow a back office administrator to sweep payments.</p>
<h2 id="d1d4" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/master/cdn" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">CDN</a></h2>
<p id="5c22" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/master/cdn" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">CDN</a>"</strong> folder contains all of the javascript that is required to generate a cart and process a payment. This has been referenced directly by "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/www/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">WWW</a>"</strong> via "<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/www/index.html" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">index.</strong></a><strong class="lj lz">html"</strong> however in the future we will recode this so it can be injected into any site with one line of code from a "<strong class="lj lz"><a href="https://en.wikipedia.org/wiki/Content_delivery_network" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">CDN</a>"</strong></p>
<p id="baf3" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >It has been coded in jQuery (as most people know this) but later it will be recoded as pure javascript so it deploys into websites with zero friction. You can grab this file ("<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/cdn/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">sr.js</a>"</strong>) and put in your local assets directory and access it this ay if you prefer.</p>
<p id="e37d" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >I will not go into detail of what each of these functions is doing as it is quite a simple piece of Javascript and fully documented. However in the future when we do the upgrades proposed above then we will break it down in detail.</p>
<pre class="mr ms mt mu mv dv ge df"><span id="f3cd" class="mf kv bf av mw b dz mx my l mz" >jQuery(document).ready(function($) {<br>  //set the server url.<br>  var serverurl = "<a href="http://127.0.0.1:3000/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">http://127.0.0.1:3000/</a>";<br>  //set the address<br>  var address = "";<br>  //init price var<br>  var productPrice = 0;<br>  var cartWrapper = $(".cd-cart-container");<br>  //set the cart wrapper<br>  var productCustomization = $(".cd-customization"),<br>    //set the cart<br>    cart = $(".cd-cart"),<br>    //set animating boolean<br>    animating = false;</span><span id="2fcd" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//call the server to get a btc address<br>  $.get(serverurl + "api/address", function(data) {<br>    //get the data<br>    data = jQuery.parseJSON(data);<br>    //console.log(data.address);<br>    address = data.address;<br>    //set the address<br>    $("#bitcoinaddress").text(address);<br>    //set the href of the bitcoin address<br>    $("#bitcoinaddress").attr("href", "bitcoin:" + address);<br>    //generate the qr code<br>    $("#bitcoinqrcode").attr(<br>      "src",<br>      "<a href="https://chart.googleapis.com/chart?chs=250x250&amp;cht=qr&amp;chl=" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://chart.googleapis.com/chart?chs=250x250&amp;cht=qr&amp;chl=</a>" + address<br>    );<br>    //init the product<br>  });</span><span id="2ff8" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >initCustomization(productCustomization);</span><span id="d85b" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//check we have a cart<br>  if (cartWrapper.length &gt; 0) {<br>    //store jQuery objects for later use<br>    var cartBody = cartWrapper.find(".body");<br>    var cartList = cartBody.find("ul").eq(0);<br>    var cartTotal = cartWrapper.find(".checkout").find("span");<br>    //console.log(cartTotal);<br>    var cartTrigger = cartWrapper.children(".cd-cart-trigger");<br>    var cartCount = cartTrigger.children(".count");<br>    var addToCartBtn = $(".sr-add-to-cart");<br>    var bitcoinback = cartWrapper.find(".bitcoinback");</span><span id="2ba2" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//add product to cart<br>    addToCartBtn.on("click", function(event) {<br>      event.preventDefault();<br>      addToCart($(this));<br>    });</span><span id="3c1e" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//open/close cart<br>    cartTrigger.on("click", function(event) {<br>      event.preventDefault();<br>      toggleCart();<br>    });</span><span id="5fe2" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//close cart when clicking on the .cd-cart-container::before (bg layer)<br>    cartWrapper.on("click", function(event) {<br>      if ($(event.target).is($(this))) toggleCart(true);<br>    });</span><span id="5231" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//delete an item from the cart<br>    cartList.on("click", ".delete-item", function(event) {<br>      event.preventDefault();<br>      //remove the product<br>      removeProduct($(event.target).parents(".product"));<br>    });</span><span id="7162" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//load btc address for payment<br>    cartWrapper.on("click", ".checkout", function(event) {<br>      event.preventDefault();<br>      bitcoinback.addClass("visible");<br>      ///$('#bitcoin-address-template').show();<br>      $("#bitcoinaddresswrapper").show();<br>      //hide the cart items<br>      $("#cartlistitems").hide();<br>    });</span><span id="1bfd" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//copy the btc address to the clipboard<br>    cartWrapper.on("click", ".bitcoinaddresscopy", function(event) {<br>      event.preventDefault();<br>      /* Get the text field */<br>      var element = document.getElementById("bitcoinaddress");<br>      var $temp = $("&lt;input&gt;");<br>      $("body").append($temp);<br>      $temp.val($(element).text()).select();<br>      document.execCommand("copy");<br>      //$temp.remove();<br>    });</span><span id="3f43" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//back button is clicked so show items<br>    cartWrapper.on("click", "#checkoutbitocoin", function(event) {<br>      event.preventDefault();<br>      bitcoinback.removeClass("visible");<br>      $("#bitcoinaddresswrapper").hide();<br>      //$('#bitcoin-address-template').hide();<br>      $("#cartlistitems").show();<br>    });<br>  }</span><span id="acb0" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >function initCustomization(items) {<br>    items.each(function() {<br>      var actual = $(this),<br>        selectOptions = actual.find('[]'),<br>        addToCartBtn = actual.find(".sr-add-to-cart"),<br>        touchSettings = actual.next(".cd-customization-trigger");</span><span id="6af4" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//detect click on ul.size/ul.color list elements<br>      selectOptions.on("click", function(event) {<br>        var selected = $(this);<br>        //open/close options list<br>        selected.toggleClass("is-open");<br>        resetCustomization(selected);</span><span id="edc0" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >if ($(event.target).is("li")) {<br>          // update selected option<br>          var activeItem = $(event.target),<br>            index = activeItem.index() + 1;</span><span id="7285" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >activeItem<br>            .addClass("active")<br>            .siblings()<br>            .removeClass("active");<br>          selected<br>            .removeClass("selected-1 selected-2 selected-3")<br>            .addClass("selected-" + index);<br>          // if color has been changed, update the visible product image<br>          selected.hasClass("sr-color") &amp;&amp; updateSlider(selected, index - 1);<br>        }<br>      });</span><span id="cca0" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//detect click on the add-to-cart button<br>      addToCartBtn.on("click", function() {<br>        if (!animating) {<br>          //animate if not already animating<br>          animating = true;<br>          resetCustomization(addToCartBtn);</span><span id="7b73" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >addToCartBtn<br>            .addClass("is-added")<br>            .find("path")<br>            .eq(0)<br>            .animate(<br>              {<br>                //draw the check icon<br>                "stroke-dashoffset": 0<br>              },<br>              300,<br>              function() {<br>                setTimeout(function() {<br>                  //updateCart();<br>                  addToCartBtn<br>                    .removeClass("is-added")<br>                    .find("em")<br>                    .on(<br>                      "webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",<br>                      function() {<br>                        //wait for the end of the transition to reset the check icon<br>                        addToCartBtn<br>                          .find("path")<br>                          .eq(0)<br>                          .css("stroke-dashoffset", "19.79");<br>                        animating = false;<br>                      }<br>                    );</span><span id="c724" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >if ($(".no-csstransitions").length &gt; 0) {<br>                    // check if browser doesn't support css transitions<br>                    addToCartBtn<br>                      .find("path")<br>                      .eq(0)<br>                      .css("stroke-dashoffset", "19.79");<br>                    animating = false;<br>                  }<br>                }, 600);<br>              }<br>            );<br>        }<br>      });</span><span id="3e78" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//detect click on the settings icon - touch devices only<br>      touchSettings.on("click", function(event) {<br>        event.preventDefault();<br>        resetCustomization(addToCartBtn);<br>      });<br>    });<br>  }</span><span id="4a25" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >/*<br>  This function deals with showing or hiding the cart.<br> */<br>  function toggleCart(bool) {<br>    //always hide the address regardless of the toggle state as we never want to show this unless the<br>    //checkout button has been clicked<br>    $("#bitcoinaddresswrapper").hide();<br>    //check if the cart is open or not<br>    var cartIsOpen =<br>      typeof bool === "undefined" ? cartWrapper.hasClass("cart-open") : bool;</span><span id="360c" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >if (cartIsOpen) {<br>      cartWrapper.removeClass("cart-open");<br>      bitcoinback.removeClass("visible");<br>      cartList.find(".deleted").remove();<br>      bitcoinback.removeClass("visible");<br>      $("#bitcoin-address-template").hide();<br>      $("#cartlistitems").show();</span><span id="ef26" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >setTimeout(function() {<br>        cartBody.scrollTop(0);<br>        //check if cart empty to hide it<br>        if (<br>          Number(<br>            cartCount<br>              .find("li")<br>              .eq(0)<br>              .text()<br>          ) == 0<br>        )<br>          cartWrapper.addClass("empty");<br>      }, 500);<br>    } else {<br>      cartWrapper.addClass("cart-open");<br>    }<br>  }</span><span id="07b8" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >function addToCart(trigger) {<br>    var cartIsEmpty = cartWrapper.hasClass("empty");<br>    //update cart product list<br>    addProduct(trigger.data("price"), trigger.data("name"), trigger.data("id"));<br>    //update number of items<br>    updateCartCount(cartIsEmpty);<br>    //update total price<br>    updateCartTotal(trigger.data("price"), true);<br>    //show cart<br>    cartWrapper.removeClass("empty");<br>  }</span><span id="bbfd" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >function addProduct(price, name, productId) {<br>    //get the product quantity<br>    prodcutquantity = $("#productquantity").val();<br>    //check if its set or not if not then set it<br>    if (prodcutquantity == undefined) prodcutquantity = 0;<br>    //increment it by 1<br>    prodcutquantity++;<br>    //empty  the car contents<br>    cartList.empty();<br>    //build the row html<br>    //main product div<br>    var prodcuthtml = "";<br>    var prodcuthtml = prodcuthtml + '&lt;li class="product"&gt;';<br>    //product image<br>    var prodcuthtml =<br>      prodcuthtml +<br>      '&lt;div class="product-image"&gt;&lt;a href="#0"&gt;&lt;img src="img/product-preview.png" alt="placeholder"&gt;&lt;/a&gt;&lt;/div&gt;';<br>    //product details div<br>    var prodcuthtml = prodcuthtml + '&lt;div class="product-details"&gt;';<br>    //product name<br>    var prodcuthtml = prodcuthtml + '&lt;h3&gt;&lt;a href="#0"&gt;' + name + "&lt;/a&gt;&lt;/h3&gt;";<br>    //product price<br>    var prodcuthtml =<br>      prodcuthtml + '&lt;span class="productprice"&gt;$' + price + "&lt;/span&gt;";<br>    //delete option<br>    var prodcuthtml =<br>      prodcuthtml + '&lt;a href="#0" class="delete-item"&gt;Delete&lt;/a&gt;';<br>    //actions div<br>    var prodcuthtml = prodcuthtml + '&lt;div class="actions"&gt;';<br>    //quantity label<br>    var prodcuthtml =<br>      prodcuthtml + '&lt;label for="cd-product-' + productId + '"&gt;Qty&lt;/label&gt;';<br>    //quantity select<br>    var prodcuthtml =<br>      prodcuthtml +<br>      '&lt;span class="select"&gt;&lt;select id="productquantity" name="productquantity"&gt;';<br>    var i = 0;<br>    for (i = 1; i &lt; 11; i++) {<br>      if (i == prodcutquantity)<br>        var prodcuthtml =<br>          prodcuthtml + '&lt;option value="' + i + '" selected&gt;' + i + "&lt;/option&gt;";<br>      else<br>        var prodcuthtml =<br>          prodcuthtml + '&lt;option value="' + i + '"&gt;' + i + "&lt;/option&gt;";<br>    }<br>    //end of actions div<br>    var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>    //end of products details div<br>    var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>    //end of product div<br>    var prodcuthtml = prodcuthtml + "&lt;/div&gt;";<br>    //end of li<br>    var prodcuthtml = prodcuthtml + "&lt;/li&gt;";<br>    //add it<br>    //console.log(prodcuthtml);<br>    cartList.prepend(prodcuthtml);<br>    //updateCart()<br>  }</span><span id="5620" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//remove the product<br>  function removeProduct(product) {<br>    var topPosition =<br>        product.offset().top - cartBody.children("ul").offset().top,<br>      productTotPrice = productPrice;<br>    product.css("top", topPosition + "px").addClass("deleted");<br>    cartTotal.text(0);<br>    productQuantity = 0;<br>    updateCartCount(true, 0);<br>  }</span><span id="d142" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >//update the counter<br>  function updateCartCount(emptyCart, quantity) {<br>    //check if cart is empty<br>    if (emptyCart == true &amp;&amp; quantity == 0) {<br>      var actual = 0;<br>      var next = 1;<br>      cartCount<br>        .find("li")<br>        .eq(0)<br>        .text(actual);<br>      cartCount<br>        .find("li")<br>        .eq(1)<br>        .text(next);<br>    } else {<br>      //check if it is the first time the cart is launched<br>      if (typeof quantity === "undefined") {<br>        var actual =<br>          Number(<br>            cartCount<br>              .find("li")<br>              .eq(0)<br>              .text()<br>          ) + 1;<br>        var next = actual + 1;</span><span id="8db6" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >if (emptyCart) {<br>          cartCount<br>            .find("li")<br>            .eq(0)<br>            .text(actual);<br>          cartCount<br>            .find("li")<br>            .eq(1)<br>            .text(next);<br>        } else {<br>          cartCount.addClass("update-count");</span><span id="1b74" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >setTimeout(function() {<br>            cartCount<br>              .find("li")<br>              .eq(0)<br>              .text(actual);<br>          }, 150);</span><span id="ea88" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >setTimeout(function() {<br>            cartCount.removeClass("update-count");<br>          }, 200);</span><span id="96db" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >setTimeout(function() {<br>            cartCount<br>              .find("li")<br>              .eq(1)<br>              .text(next);<br>          }, 230);<br>        }<br>      } else {<br>        var actual =<br>          Number(<br>            cartCount<br>              .find("li")<br>              .eq(0)<br>              .text()<br>          ) + quantity;<br>        var next = actual + 1;</span><span id="553c" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >cartCount<br>          .find("li")<br>          .eq(0)<br>          .text(actual);<br>        cartCount<br>          .find("li")<br>          .eq(1)<br>          .text(next);<br>      }<br>    }<br>  }</span><span id="c8f0" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >function updateCartTotal(price, bool) {<br>    //console.log(cartTotal);<br>    bool<br>      ? cartTotal.text((Number(cartTotal.text()) + Number(price)).toFixed(2))<br>      : cartTotal.text((Number(cartTotal.text()) - Number(price)).toFixed(2));<br>    //cartTotal.text( (Number(cartTotal.text()) + Number(price)).toFixed(2);<br>    //cartTotal.text( (Number(cartTotal.text()) - Number(price)).toFixed(2) );<br>  }</span><span id="9ac0" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >function updateSlider(actual, index) {<br>    var slider = actual<br>        .parent(".cd-customization")<br>        .prev("a")<br>        .children(".cd-slider-wrapper"),<br>      slides = slider.children("li");<br>    slides<br>      .eq(index)<br>      .removeClass("move-left")<br>      .addClass("selected")<br>      .prevAll()<br>      .removeClass("selected")<br>      .addClass("move-left")<br>      .end()<br>      .nextAll()<br>      .removeClass("selected move-left");<br>  }</span><span id="01f8" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >function resetCustomization(selectOptions) {<br>    //close ul.clor/ul.size if they were left open and user is not interacting with them anymore<br>    //remove the .hover class from items if user is interacting with a different one<br>    selectOptions<br>      .siblings('[]')<br>      .removeClass("is-open")<br>      .end()<br>      .parents(".cd-single-item")<br>      .addClass("hover")<br>      .parent("li")<br>      .siblings("li")<br>      .find(".cd-single-item")<br>      .removeClass("hover")<br>      .end()<br>      .find('[]')<br>      .removeClass("is-open");<br>  }<br>});</span></pre>
<h2 id="8680" class="mf kv bf av au el mg mh mi mj mk ml mm mn mo mp mq" ><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/www/www" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">WWW</a></h2>
<p id="cbe6" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/www/www" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">WWW</a>"</strong> directory contains an example website that renders one product and the includes the js file ("<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/cdn/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">sr.js</a>"</strong>) to render the cart and accept payment. Let’s look at the key parts of it.</p>
<p id="78cf" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >You can see a demo of this running "<strong><a href="https://cryptoskillz.com/srcrypto" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a></strong>".</p>
<p id="a57c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The code below creates a gallery of products. Though I am only listing one it has the ability to list many. This will be covered in a future refactor to "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/www/cdn/js/sr.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">sr.js</a>"</strong></p>
<pre class="mr ms mt mu mv dv ge df"><span id="833b" class="mf kv bf av mw b dz mx my l mz" >&lt;ul class="cd-gallery"&gt;<br>  &lt;li&gt;<br>   &lt;div class="cd-single-item"&gt;<br>    &lt;a href="#0"&gt;<br>     &lt;ul class="cd-slider-wrapper"&gt;<br>      &lt;li&gt;&lt;img src="img/thumb-1.jpg" alt="Preview image"&gt;&lt;/li&gt;<br>      &lt;li class="selected"&gt;&lt;img src="img/thumb-2.jpg" alt="Preview image"&gt;&lt;/li&gt;<br>      &lt;li&gt;&lt;img src="img/thumb-3.jpg" alt="Preview image"&gt;&lt;/li&gt;<br>     &lt;/ul&gt;<br>    &lt;/a&gt;</span><span id="bb2f" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;div class="cd-customization"&gt;<br>     &lt;div class="sr-color selected-2" &gt;<br>      &lt;ul&gt;<br>       &lt;li class="sr-color-1"&gt;color-1&lt;/li&gt;<br>       &lt;li class="sr-color-2 active"&gt;color-2&lt;/li&gt;<br>       &lt;li class="sr-color-3"&gt;color-3&lt;/li&gt;<br>      &lt;/ul&gt;<br>     &lt;/div&gt;<br>     <br>     &lt;div class="sr-size" &gt;<br>      &lt;ul&gt;<br>       &lt;li class="small active"&gt;Small&lt;/li&gt;<br>       &lt;li class="medium"&gt;Medium&lt;/li&gt;<br>       &lt;li class="large"&gt;Large&lt;/li&gt;<br>      &lt;/ul&gt;<br>     &lt;/div&gt;</span><span id="aab9" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;button class="sr-add-to-cart"  data-name='T Shirt' data-id='1'&gt;<br>      &lt;em&gt;Add to Cart&lt;/em&gt;<br>      &lt;svg x="0px" y="0px" width="32px" height="32px" viewBox="0 0 32 32"&gt;<br>       &lt;path stroke-dasharray="19.79 19.79" stroke-dashoffset="19.79" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="square" stroke-miterlimit="10" d="M9,17l3.9,3.9c0.1,0.1,0.2,0.1,0.3,0L23,11"/&gt;<br>      &lt;/svg&gt;<br>     &lt;/button&gt;<br>    &lt;/div&gt; &lt;!-- .cd-customization --&gt;</span><span id="bbb0" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;button class="cd-customization-trigger"&gt;Customize&lt;/button&gt;<br>   &lt;/div&gt; &lt;!-- .cd-single-item --&gt;</span><span id="472d" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;div class="cd-item-info"&gt;<br>    &lt;b&gt;&lt;a href="#0"&gt;T Shirt&lt;/a&gt;&lt;/b&gt;<br>    &lt;em&gt;$9.99&lt;/em&gt;<br>   &lt;/div&gt; &lt;!-- cd-item-info --&gt;<br>  &lt;/li&gt;<br> &lt;/ul&gt; &lt;!-- cd-gallery --&gt;</span></pre>
<p id="f4d3" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The code below renders the cart.</p>
<pre class="mr ms mt mu mv dv ge df"><span id="efe7" class="mf kv bf av mw b dz mx my l mz" >&lt;div class="cd-cart-container empty"&gt;<br> &lt;a href="#0" class="cd-cart-trigger"&gt;<br>  Cart<br>  &lt;ul class="count"&gt; &lt;!-- cart items count --&gt;<br>   &lt;li&gt;0&lt;/li&gt;<br>   &lt;li&gt;0&lt;/li&gt;<br>  &lt;/ul&gt; &lt;!-- .count --&gt;<br> &lt;/a&gt;</span><span id="cae4" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;div class="cd-cart"&gt;<br>  &lt;div class="wrapper"&gt;<br>   &lt;header&gt;<br>    &lt;h2&gt;Cart&lt;/h2&gt;<br>    &lt;span class="bitcoinback" &gt;&lt;a id="checkoutbitocoin" href="#0"&gt;Back&lt;/a&gt;&lt;/span&gt;</span><span id="af20" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;/header&gt;<br>   <br>   &lt;div class="body"&gt;<br>    &lt;ul id='cartlistitems'&gt;<br>     &lt;!-- products added to the cart will be inserted here using JavaScript --&gt;<br>    &lt;/ul&gt;</span><span id="9a23" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;div id="bitcoinaddresswrapper"&gt;<br>     &lt;div &gt;<br>            &lt;a id="bitcoinaddress" class="bitcoinaddress" href="bitcoin:2N3Xtg7pBjUG4RPaiwfc2t3wftvLGWv6i2K" &gt;19356KxTs9Bw5AAdxens5hoxDSp5bsUKse&lt;/a&gt;<br>        &lt;/div&gt;<br>        &lt;div class="bitcoinoptions" &gt;<br>         &lt;a href="#" class="bitcoinaddresscopy"&gt;<br>            &lt;i class="fa fa-copy"&gt;&lt;/i&gt;<br>            Copy<br>        &lt;/a&gt;<br>        <br>        &lt;a href="bitcoin:2N3Xtg7pBjUG4RPaiwfc2t3wftvLGWv6i2K" class=""&gt;<br>            &lt;i class="fa fa-btc"&gt;&lt;/i&gt;<br>            Pay from wallet<br>        &lt;/a&gt;<br>        &lt;/div&gt;</span><span id="7177" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;img id="bitcoinqrcode" src="" /&gt;<br>    &lt;/div&gt;</span><span id="5170" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;/div&gt;</span><span id="792f" class="mf kv bf av mw b dz na nb nc nd ne my l mz" >&lt;footer&gt;<br>    &lt;a href="#0" class="checkout btn"&gt;&lt;em&gt;Checkout - $&lt;span&gt;0&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;<br>   &lt;/footer&gt;<br>  &lt;/div&gt;<br> &lt;/div&gt; &lt;!-- .cd-cart --&gt;<br>&lt;/div&gt; &lt;!-- cd-cart-container --&gt;</span></pre>
<h1 id="c235" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The SQL</h1>
<p id="fa99" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >No changes to the SQL this time.</p>
<pre class="mr ms mt mu mv dv ge df"><span id="56d4" class="mf kv bf av mw b dz mx my l mz" >CREATE TABLE "keys" ( <br>`id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `privatekey` TEXT,<br> `publickey` TEXT,<br> `address` TEXT,<br> `processed` INTEGER DEFAULT 0,<br> `swept` INTEGER DEFAULT 0 <br>)</span></pre>
<h1 id="0cfa" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Conclusion</h1>
<p id="8dde" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >That is it we now have a system that allows us to build a simple website and take and process payments in Bitcoin. The following parts of this tutorial are not required reading but will get very granular in a certain section of this project including.</p>
<p id="ece2" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Adding a SAAS admin area<br>Removing all dependencies <br>Adding our own full node</p>
<p id="53c6" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Anything else that crops up with the eventual aim of having a Bitcoin-based e-commerce system.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Move payment to cold storage</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/move-payment-to-cold-storage.html"/>
        <id>https://cryptoskillz.com/blog/move-payment-to-cold-storage.html</id>

        <updated>2019-09-11T04:34:01+07:00</updated>
            <summary>
                <![CDATA[
                    <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_YYI3zd3a5mRDlodesvewtw.jpeg" alt="" width="639" height="426"></p>
<p> </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_YYI3zd3a5mRDlodesvewtw.jpeg" alt="" width="639" height="426"></p>
<p> </p>

<h1 id="d179" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Introduction</h1>
<p id="dfde" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >This guide aims to program a website to accept Bitcoin. In the previous part, we monitored the blockchain with "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> to let us know when the payment was successful.</p>
<p id="d59d" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Now we aim to take processed funds and sweep them into a "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cold storage</a>" </strong>wallet. We do this with a new script called “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/sweep.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">sweep.js</strong></a>”.</p>
<blockquote class="mf mg mh">
<p id="770b" class="lh li bf mi lj b lk ma lm mb lo mc lq md ls me lu" >Note cryptoskillz from the future here. It turns out we did this bit really badly you can read about in part 10 "<strong><a href="https://cryptoskillz.com/blog/address-101.html" target="_blank" rel="noopener noreferrer">here</a>"</strong> . As a result we would ignore this and instead wait to part 11 which fixes the issues. Ok, Bye, friend :]</p>
</blockquote>
<h1 id="05f0" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The SQL</h1>
<p id="fa99" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We have added a field called swept which is to check if we have moved the payment to our "<strong><a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cold storage</a>"</strong> or not.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="56d4" class="mo kv bf av mp b dz mq mr l ms" >CREATE TABLE "keys" ( <br>`id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `privatekey` TEXT,<br> `publickey` TEXT,<br> `address` TEXT,<br> `processed` INTEGER DEFAULT 0,<br> `swept` INTEGER DEFAULT 0 <br>)</span></pre>
<h1 id="6cb3" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The Code</h1>
<p id="ff28" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The latest (branch sweep) code can be found "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/sweep" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong> and it is listed below.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="9ca2" class="mo kv bf av mp b dz mq mr l ms" >/*<br>This is the sweep script that moves payment to our hard wallet.<br>*/<br>//init block.io<br>var BlockIo = require("block_io");<br>var version = 2; // API version<br>var block_io = new BlockIo(<br>  process.env.blockiokey,<br>  process.env.blockiosecret,<br>  version<br>);<br>//load express<br>const express = require("express");<br>//load body parser<br>const bodyParser = require("body-parser");<br>//load the bitcoin js files<br>var bitcoin = require("bitcoinjs-lib");<br>//load SQLlite (use any database you want or none)<br>//init it<br>const sqlite3 = require("sqlite3").verbose();<br>var request = require("request");<br>//init it<br>const app = express();<br>//open a database connection<br>let db = new sqlite3.Database("./db/db.db", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});<br>//set up the network we would like to connect to. in this case test net.<br>const TestNet = bitcoin.networks.testnet;<br>//build the query<br>let sql = `SELECT * FROM keys where processed = 1 and swept = 0 limit 0,1`;<br>//run the query<br>db.all(sql, [], (err, rows) =&gt; {<br>  if (err) {<br>    throw err;<br>  }<br>  rows.forEach(row =&gt; {<br>    //get the address<br>    var address = row.address;<br>    //get the private key<br>    var privateKey = row.privatekey;</span><span id="9328" class="mo kv bf av mp b dz mt mu mv mw mx mr l ms" >block_io.get_transactions(<br>      { type: "received", addresses: address },<br>      function(error, data) {<br>        //get the tx transaction id<br>        var txid = data.data.txs[0].txid;<br>        //get the amount in the transaction<br>        let amountReceived = data.data.txs[0].amounts_received[0].amount;<br>        //estimate the fee<br>        block_io.get_network_fee_estimate(<br>          { amounts: amountReceived, to_addresses: process.env.toaddress },<br>          function(error2, data2) {<br>            //store the network fee.<br>            var networkfee = data2.data.estimated_network_fee;<br>            //init a new transaction<br>            let tx = new bitcoin.TransactionBuilder(TestNet);<br>            //get the WIF from the private key so we can sign the transaction later.<br>            let hotKeyPair = new bitcoin.ECPair.fromWIF(privateKey, TestNet);<br>            //work out the amount to send<br>            let amountToSend = amountReceived - networkfee;<br>            //turn the amount recieved into satoshis<br>            amountToSendSatoshi = amountToSend * 100000000;<br>            tx.addInput(txid, 0, 0xfffffffe);<br>            //note : this seems to do the fee on of its own accord.<br>            tx.addOutput(process.env.toaddress, amountToSendSatoshi);<br>            //sign the transaction with our private key<br>            tx.sign(0, hotKeyPair);<br>            //output it<br>            //note we have to figure out how to push this to the network and not use <a href="https://testnet.blockchain.info/pushtx" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://testnet.blockchain.info/pushtx</a><br>            console.log(tx.build().toHex());<br>            // Set the headers<br>            var headers = {<br>              "User-Agent": "Super Agent/0.0.1",<br>              "Content-Type": "application/x-www-form-urlencoded"<br>            };<br>            // Configure the request<br>            var options = {<br>              url: "<a href="https://testnet.blockchain.info/pushtx" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://testnet.blockchain.info/pushtx</a>",<br>              method: "POST",<br>              headers: headers,<br>              form: { tx: tx.build().toHex() }<br>            };<br>            // Start the request<br>            request(options, function(error, response, body) {<br>              //console.log(response)<br>              if (!error &amp;&amp; response.statusCode == 200) {<br>                // Print out the response body<br>                console.log(body);<br>                let sqldata = ["1", address];<br>                let sql = `UPDATE keys<br>                 SET swept = ?<br>                 WHERE address = ?`;<br>                db.run(sql, sqldata, function(err) {<br>                  if (err) {<br>                    return console.error(err.message);<br>                  }<br>                  console.log(`Row(s) updated: ${this.changes}`);<br>                });<br>              }<br>            });<br>          }<br>        );<br>      }<br>    );<br>  });<br>});<br>app.listen(3000, () =&gt; {});</span></pre>
<p id="6d5b" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">What is going in the code above?</strong></p>
<p id="c316" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >We will skip to the new code check out the previous parts of this tutorial for an explanation on what "<strong class="lj lz"><a href="http://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> is etc.</p>
<p id="d591" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The first new thing you will see is we have included the package called "<strong class="lj lz"><a href="https://www.npmjs.com/package/request" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">request</a>"</strong> this is so we can post to the signing service later.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="238d" class="mo kv bf av mp b dz mq mr l ms" >var request = require('request');</span></pre>
<p id="8bc7" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >We have also set a new environment variable which holds the address of the "<a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">cold storage</strong></a> <strong class="lj lz"><a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">wallet</a>"</strong>. At the moment this is just one address but we could create a new address for each transaction (and we will) we could interface with our "<a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong>hardware wallet</strong></a>" and generate an address (and we will). There are a number of things we can do here and will be looking to make this more secure and private later.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="a464" class="mo kv bf av mp b dz mq mr l ms" >process.env.toaddress</span></pre>
<p id="08a4" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we are pulling out all of the processed payments from the table. A processed payment basically means that the monitor script has picked up this payment as it has been "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Confirmation" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">confirmed</a>"</strong> in the "<strong class="lj lz"><a href="https://en.wikipedia.org/wiki/Blockchain" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">blockchain</a>"</strong>.</p>
<p id="2653" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Note we are storing the private keys in the database just to make this part of the tutorials easy to understand. In the future, we will refactor this so the private keys are stored by the "<strong class="lj lz"><a href="https://bitcoin.org/en/full-node" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">fullnode</a>"</strong> and secured by your "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Passphrase_generation" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">passphrase</a>"</strong> (as they should be)</p>
<pre class="mj mk ml mm mn dv ge df"><span id="aa2b" class="mo kv bf av mp b dz mq mr l ms" >let sql = `SELECT * FROM keys where processed = 1 and swept = 0 limit 0,1`;<br>//run the query<br>db.all(sql, [], (err, rows) =&gt; {<br>  if (err) {<br>    throw err;<br>  }<br>  rows.forEach(row =&gt; {});<br>});</span></pre>
<p id="ff92" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >After that, we grab the address and "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Private_key" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">private key</a>"</strong> from the database.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="f0d4" class="mo kv bf av mp b dz mq mr l ms" >var address = row.address;<br>//get the private key<br>var privateKey = row.privatekey;<br>block_io.get_transactions({ type: "received", addresses: address }, function(<br>  error,<br>  data<br>) {});</span></pre>
<p id="47bf" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we want to use this address to contact "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> and get the transaction information. Note we are storing the "<strong class="lj lz"><a href="https://bitcoin.org/en/glossary/txid" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">txid</a>"</strong> and amount as we are about to use this estimate the fee and sign the transaction.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="a227" class="mo kv bf av mp b dz mq mr l ms" >block_io.get_transactions({ type: "received", addresses: address }, function(<br>  error,<br>  data<br>) {<br>  //todo : check for no transactions<br>  //console.dir(data, { depth: null });<br>  //get the tx transaction id<br>  var txid = data.data.txs[0].txid;<br>  //get the amount in the transaction<br>  let amountReceived = data.data.txs[0].amounts_received[0].amount;<br>});</span></pre>
<p id="790b" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we want to get the estimated network fee from "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong></p>
<pre class="mj mk ml mm mn dv ge df"><span id="7fda" class="mo kv bf av mp b dz mq mr l ms" >block_io.get_network_fee_estimate(<br>  { amounts: amountReceived, to_addresses: process.env.toaddress },<br>  function(error2, data2) {<br>    //store the network fee.<br>    var networkfee = data2.data.estimated_network_fee;<br>  }<br>);</span></pre>
<p id="a629" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we want to create and sign a "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Transaction" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">transaction</a>"</strong>. We do this by using the transaction builder to work out the amount send and sign it. Note this was one of the hardest things to do out of all the steps so if this does not immediately click do not worry, it will eventually.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="f472" class="mo kv bf av mp b dz mq mr l ms" >//init a new transaction<br>let tx = new bitcoin.TransactionBuilder(TestNet);<br>//get the WIF from the private key so we can sign the transaction later.<br>let hotKeyPair = new bitcoin.ECPair.fromWIF(privateKey, TestNet);<br>//work out the amount to send<br>let amountToSend = amountReceived - networkfee;<br>//turn the amount recieved into satoshis<br>amountToSendSatoshi = amountToSend * 100000000;<br>tx.addInput(txid, 0, 0xfffffffe);<br>tx.addOutput(process.env.toaddress, amountToSendSatoshi);<br>//sign the transaction with our private key<br>tx.sign(0, hotKeyPair);</span></pre>
<p id="770c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The next thing we want to do is "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Transaction_broadcasting" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">broadcast</a>"</strong> this transaction to the network. We are using blockchain.info tool which can be found "<strong class="lj lz"><a href="https://testnet.blockchain.info/pushtx" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong>. There are many of these tools and they all do the same thing and yes we will be doing this ourselves once we upgrade to a "<strong class="lj lz"><a href="https://bitcoin.org/en/full-node" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">fullnode</a>"</strong>.</p>
<p id="f0a9" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Lastly, we update the database so we do not have to process this entry again.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="0308" class="mo kv bf av mp b dz mq mr l ms" >// Set the headers<br>   var headers = {<br>       'User-Agent':       'Super Agent/0.0.1',<br>       'Content-Type':     'application/x-www-form-urlencoded'<br>   }</span><span id="8507" class="mo kv bf av mp b dz mt mu mv mw mx mr l ms" >// Configure the request<br>var options = {<br>  url: "<a href="https://testnet.blockchain.info/pushtx" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://testnet.blockchain.info/pushtx</a>",<br>  method: "POST",<br>  headers: headers,<br>  form: { tx: tx.build().toHex() }<br>};<br>// Start the request<br>request(options, function(error, response, body) {<br>  if (!error &amp;&amp; response.statusCode == 200) {<br>    // Print out the response body<br>    console.log(body);<br>    let sqldata = ["1", address];<br>    let sql = `UPDATE keys<br>                 SET swept = ?<br>                 WHERE address = ?`;</span><span id="b384" class="mo kv bf av mp b dz mt mu mv mw mx mr l ms" >db.run(sql, sqldata, function(err) {<br>      if (err) {<br>        return console.error(err.message);<br>      }<br>      console.log(`Row(s) updated: ${this.changes}`);<br>    });<br>  }<br>});</span></pre>
<p id="e322" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >That’s it we now have a “server” which allows us to generate an address, monitor the blockchain for payment and finally move the funds to "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cold storage</a>"</strong>, neat. Let’s test it, shall we?</p>
<h2 id="1904" class="mo kv bf av au el my mz na nb nc nd ne nf ng nh ni" >Step 1: Generate an address</h2>
<p id="c6ba" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >go to your terminal client and type and navigate to the directory with your code and type.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="762f" class="mo kv bf av mp b dz mq mr l ms" >node generate.js</span></pre>
<p id="830b" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >You will be presented with an address in the console (as shown in the screenshot below).</p>
<p id="b33a" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Note, it will be a different address than the in the screenshot obviously.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_sfCOFd3iVkx79EiQIgdkPQ.png" alt="" width="778" height="64"></p>
<p >Copy this and load "<a href="https://bitcoin.org/en/download" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">bitcoin-qt</a>" and send some Bitcoin to this address. As shown below.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_274A47zh3h_-0QVr4MruKg.png" alt="" width="3334" height="586"></p>
<p id="88bf" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Let's see if it is on the network. You can use a blockchain explorer to monitor the status of the transaction. An example of a blockchain explorer with our address can be found "<strong class="lj lz"><a href="https://live.blockcypher.com/btc-testnet/address/muSjmRdrwhjxpXFa8BBEd3BduGvh7YEYwX/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong> as shown in the screenshot below.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_Qtu_mUMozmlzF5chhGH2TQ.png" alt="" width="2839" height="1719"></p>
<p id="3b85" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Because this is a public blockchain anyone can write a block explorer. In fact, this is essentially what we have done with “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">monitor.js</strong></a><strong class="lj lz">”</strong> it is a simple, hyper-focused blockchain explorer.</p>
<h2 id="0fbe" class="mo kv bf av au el my mz na nb nc nd ne nf ng nh ni" >Step2: Monitor for the confirmed transaction</h2>
<p id="a31c" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >Now let’s run monitor by going to the terminal (stopping generate.js if it still running by pressing control &amp; c) and type the following:</p>
<pre class="mj mk ml mm mn dv ge df"><span id="c43f" class="mo kv bf av mp b dz mq mr l ms" >node monitor.js</span></pre>
<p id="fb7c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >When you do this you will see the following (screenshot below). What is happening here is that “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">monitor.js</strong></a>” checking the blockchain to make sure the payment has been <a href="https://en.bitcoin.it/wiki/Confirmation" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">confirmed</strong></a>. This takes a period of time, usually 10 minutes for each confirmation and you free to set whatever confirmation threshold you want (3 confirmations is normal). Note you could also do something when it is in it’s pending state. Though in the case we have not.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_ik2rljI2JifzxC9KC8fmkg.png" alt="" width="967" height="933"></p>
<p ><strong class="lj lz">“</strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">Monitor.js</strong></a><strong class="lj lz">” </strong>is on a timer that is set to check every 3 seconds, again you can set this to whatever time you want to. Eventually, you will see a confirmation (as shown in the screenshot below) and you will be able to go ahead and do the last step which moves the funds to our <a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">cold storage</strong></a><a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">wallet</strong></a> using “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/sweep.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">sweep.js</strong></a><strong class="lj lz">”</strong></p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_BdGYeoOQ3q4IsnF2-cjEIQ.png" alt="" width="1015" height="336"></p>
<p id="7943" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >To move the funds back again go to terminal and type the following. Note make sure the funds have confirmed or this will not work.</p>
<h2 id="647b" class="mo kv bf av au el my mz na nb nc nd ne nf ng nh ni" >Step3: Move funds back to cold storage</h2>
<pre class="mj mk ml mm mn dv ge df"><span id="2007" class="mo kv bf av mp b dz mq mr l ms" >node sweep.js</span></pre>
<p id="e95e" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >This will sign a transaction and move it back to "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cold storage</a>" </strong>and you will see the following output which is the hex transaction as shown in the screenshot below</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_Zw-wQmKdWACYfL49PDGWpA.png" alt="" width="2886" height="121"></p>
<p id="3873" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Again we can monitor this transaction with a blockchain explorer we could also modify “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">monitor.js</strong></a>” to check these payments (and we will later) but after about the same period of time as it took to receive the payment you will see this transaction has been confirmed and is now in your "<a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">cold storage</strong></a><strong class="lj lz"> </strong><strong class="lj lz"><a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">wallet</a>"</strong>.</p>
<p id="fc5c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Note for the purposes of this demo I have used "<strong class="lj lz"><a href="https://bitcoin.org/en/download" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">bitcoin-qt</a>"</strong> (later renamed to Bitcoin Core) to send these funds back to but I recommend you use a hardware wallet such as a "<strong class="lj lz"><a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">ledger nano s</a>"</strong>.</p>
<p id="73ca" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >As you can see from the screenshot below that the funds are now safely in our wallet.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_Tt4n_Jgl8BcrDpHDN51uEA.png" alt="" width="2279" height="942"></p>
<p > </p>
<h1 id="4ea9" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Conclusion</h1>
<p id="c76f" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >Now we pretty much have a functional bitcoin payment server written in “<a href="https://nodejs.org/en/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">node.js</strong></a>”. Of course, you would never use this in production we have to do a lot more to it for that to be the case. It does, however, serve its purpose of showing how to do all the major components of the Bitcoin network and how to use them to process Bitcoin transactions.</p>
<p id="6888" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >In the next tutorial, we are going to start to turn this into a microservice architecture with a rest API and build a front end to take advantage of the code we have written in the previous tutorials. You can check out a demo "<strong class="lj lz"><a href="https://cryptoskillz.com/" target="_blank" rel="noopener noreferrer">here</a>"</strong> and if you would like to check out the active branch then go "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/www" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Monitor blockchain for payment</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/monitor-blockchain-for-payment.html"/>
        <id>https://cryptoskillz.com/blog/monitor-blockchain-for-payment.html</id>

        <updated>2019-09-10T20:42:33+07:00</updated>
            <summary>
                <![CDATA[
                    <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/5/1_aPTfDYe3RFisRnvYO5xIpQ.jpeg" alt="" width="640" height="480"></p>
<p> </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/5/1_aPTfDYe3RFisRnvYO5xIpQ.jpeg" alt="" width="640" height="480"></p>
<p> </p>

<h1 id="ce3c" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Introduction</h1>
<p id="dfde" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >This guide aims to program a website to accept Bitcoin. In the previous "<strong><a href="https://cryptoskillz.com/blog/generate-a-btc-address.html">article</a></strong>", we replaced "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> with custom "<strong class="lj lz"><a href="https://nodejs.org/en/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">node.js</a>"</strong> code.</p>
<p id="82ab" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Now we successfully generated an address and sent some Bitcoin to it we have to monitor the blockchain and monitor it so we know that the payment has been made and "<strong class="lj lz"><a href="https://www.buybitcoinworldwide.com/confirmations/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">confirmed</a>"</strong>.</p>
<p > </p>
<h1 id="2e4a" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The SQL</h1>
<p id="fa99" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We have added a field called processed to the database so that when “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/monitor/generate.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">generate.js</strong></a>” is run and a record has been added to the database the <strong class="lj lz">processed</strong> field is set to 0 to stop it from being reprocessed.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="9ae3" class="mk kv bf av ml b dz mm mn l mo" >CREATE TABLE "keys" <br>( `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `privatekey` TEXT,<br> `publickey` TEXT,<br> `address` TEXT,<br> `processed` INTEGER DEFAULT 0<br>)</span></pre>
<h1 id="76f1" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The Code</h1>
<p id="ff28" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The latest code can be found "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/monitor" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong> and it is listed below.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="7f75" class="mk kv bf av ml b dz mm mn l mo" >//load express<br>const express = require("express");<br>//load body parser<br>const bodyParser = require("body-parser");<br>//set up block.io<br>var BlockIo = require("block_io");<br>var version = 2; // API version<br>//set up block.io<br>var block_io = new BlockIo(<br>  process.env.blockiokey,<br>  process.env.blockiosecret,<br>  version<br>);<br>const sqlite3 = require("sqlite3").verbose();<br>//init it<br>const app = express();<br>//open a database connection<br>let db = new sqlite3.Database("./db/db.db", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});<br>//check var<br>var checkIt;<br>//set an interval to 10 seconds<br>checkIt = setInterval(checkForPayment, 3000);<br>//function to check for payment<br>function checkForPayment() {<br>  //get the entrys<br>  let sql = `SELECT * FROM keys where processed = 0 `;</span><span id="8aaa" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >db.all(sql, [], (err, rows) =&gt; {<br>    if (err) {<br>      throw err;<br>    }<br>    rows.forEach(row =&gt; {<br>      var address = row.address;<br>      block_io.get_address_balance({ address: address }, function(error, data) {<br>        //some kind of error, deal with it (literately )<br>        if (error) return console.log("Error occurred:", error.message);<br>        //store the balance<br>        var balance = data.data.available_balance;<br>        //store the pending balance<br>        var pendingbalance = data.data.pending_received_balance;<br>        if (balance &gt; 0) {<br>          console.log("we got it");<br>          //update the database that the payment is successful<br>          let data = ["1", address];<br>          let sql = `UPDATE keys<br>                SET processed = ?<br>                WHERE address = ?`;<br>db.run(sql, data, function(err) {<br>            if (err) {<br>              return console.error(err.message);<br>            }<br>            console.log(`Row(s) updated: ${this.changes}`);<br>          });<br>        } else {<br>          if (pendingbalance &gt; 0) {<br>            console.log("awaiting confirmation for " + address);<br>          }<br>        }<br>      });<br>    });<br>  });<br>  console.log("finished checking");<br>}<br>app.listen(3000, () =&gt; {});</span></pre>
<p id="2a9a" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">What is going in the code above?</strong></p>
<p id="71c3" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Most of this code is covered in the previous “<a class="cb bx lv lw lx ly" target="_blank" href="https://medium.com/bitcoin-e-commerce-development/using-bitcoin-to-accept-payments-part-2-421fe7803f34" rel="noopener noreferrer"><strong class="lj lz">tutorial</strong></a><strong class="lj lz">” </strong>so we are only going to cover the new code in this tutorial.</p>
<p id="1ad3" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >We are using environment variables to store the private information (such as our block.io API keys) you can find out how to set an env var "<strong><a class="cb bx lv lw lx ly" target="_blank" href="https://medium.com/ibm-watson-data-lab/environment-variables-or-keeping-your-secrets-secret-in-a-node-js-app-99019dfff716" rel="noopener noreferrer">here</a></strong>". We use mac and terminal so we set our env vars in the following manner. If you use some other configuration of hardware and software please adjust the code accordingly.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="b9ea" class="mk kv bf av ml b dz mm mn l mo" >export blockiokey=BLOCKIOKEY<br>export blockiosecret=BLOCKIOSECRET</span><span id="5f2b" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >BlockIo(process.env.blockiokey,process.env.blockiosecret, version);<br>const sqlite3 = require('sqlite3').verbose();</span></pre>
<p id="d688" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we start a timer so that and check the blockchain every 3 seconds. It would be more likely that we would set this to 1 minute but for development, this is a reasonable time.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="3555" class="mk kv bf av ml b dz mm mn l mo" >//check var<br>var checkIt;<br>//set an interval to 10 seconds<br>checkIt = setInterval(checkForPayment, 3000);</span><span id="4542" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >//function to check for payment<br>function checkForPayment() <br>{</span><span id="d0c4" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >}</span></pre>
<p id="d7c3" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we are run a SQL query to get all unprocessed transactions. Note we pull out the address as this is what we want to check for.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="0300" class="mk kv bf av ml b dz mm mn l mo" >//get the entrys <br> let sql = `SELECT * FROM keys where processed = 0 `;<br> <br> db.all(sql, [], (err, rows) =&gt; {<br>   if (err) {<br>     throw err;<br>   }<br>  rows.forEach((row) =&gt; {<br>     <br>     var address =  row.address;<br>   });<br> });</span></pre>
<p id="396c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we call the "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">bock.io</a>"</strong> API’s "<strong class="lj lz"><a href="https://block.io/api/simple/nodejs" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">getaddress balance</a>"</strong> function and process the results. As we only use each address once we can make some assumptions</p>
<p id="5130" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >1 It should never have a balance higher than we are looking for<br>2 It will always be the first transaction (0) <br>3 we are not going to do anything with pending balance <br>4 We are not going to do anything until it has been confirmed.</p>
<p id="8a4e" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >To make a more robust code base we would check and deal with all of the above but for the sake of this simple tutorial, this is more than enough logic.</p>
<p id="ab73" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The last thing we do is update the table so that <strong class="lj lz">processed</strong> is equal to 1</p>
<pre class="mf mg mh mi mj dv ge df"><span id="95bc" class="mk kv bf av ml b dz mm mn l mo" >block_io.get_address_balance({ address: address }, function(error, data) {<br>  //some kind of error, deal with it (literately )<br>  if (error) return console.log("Error occurred:", error.message);<br>  //store the balance<br>  var balance = data.data.available_balance;<br>  //store the pending balance<br>  var pendingbalance = data.data.pending_received_balance;<br>  //debug<br>  //console.log(balance);<br>  //console.log(pendingbalance);<br>  if (balance &gt; 0) {<br>    //update the database that the payment is successful<br>    let data = ["1", address];<br>    let sql = `UPDATE keys<br>                SET processed = ?<br>                WHERE address = ?`;</span><span id="c21a" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >db.run(sql, data, function(err) {<br>      if (err) {<br>        return console.error(err.message);<br>      }<br>      console.log(`Row(s) updated: ${this.changes}`);<br>    });<br>  } else {<br>    console.log("payment not received for " + address);<br>    if (pendingbalance &gt; 0) {<br>      console.log("awaiting confirmation for " + address);<br>    }<br>  }<br>});</span></pre>
<h1 id="2789" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Conclusion</h1>
<p id="711d" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >And that’s it. Very simply isn't it? we have checked the blockchain for the payment and once it has been confirmed we simply updated the database. However, we will add more functionality in the future such as sending emails to clients updating back-office systems etc.</p>
<p id="4ab2" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Also, this is the script that relies extensively on the block.io as a 3rd party and of course we want to be our own bank so in the future we will replace this by using our own "<strong class="lj lz"><a href="https://bitcoin.org/en/full-node" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">fullnode</a>"</strong> in a later tutorial.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Generate a BTC address</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/generate-a-btc-address.html"/>
        <id>https://cryptoskillz.com/blog/generate-a-btc-address.html</id>

        <updated>2019-09-10T20:35:25+07:00</updated>
            <summary>
                <![CDATA[
                    <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_FOAkdC5qviQuoNH-UUQY8Q.jpeg" alt="" width="640" height="360"></p>
<p> </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_FOAkdC5qviQuoNH-UUQY8Q.jpeg" alt="" width="640" height="360"></p>
<p> </p>

<h1 id="1f98" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Introduction</h1>
<p id="dfde" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >This guide aims to program a website to accept Bitcoin. In the previous <strong>"<a href="https://cryptoskillz.com/blog/using-3rd-party-providers.html" target="_blank" rel="noopener noreferrer">article</a>"</strong>, we used "<strong class="ll mb"><a href="https://block.io/" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> to easily create a bitcoin address and check for payment using "<strong class="ll mb"><a href="https://nodejs.org/en/" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">node.js</a>"</strong>. This time we are going to remove that dependency and do it using "<a href="https://github.com/bitcoinjs/bitcoinjs-lib" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">b<strong class="ll mb">itcoinjs-lib</strong></a>"</p>
<p > </p>
<h1 id="0a13" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >The SQL</h1>
<p id="fced" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We have implemented a database to store the payment details. We have used SQLlite here as it is simple to use and set up. This would not be recommended for any production application but it is good enough for this tutorial.</p>
<p id="9d4d" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >To the database, we added a table called keys to store the information on the address we generated. We will add more fields to this table as we go on.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="9ae3" class="mm kx bf av mn b dz mo mp l mq" >CREATE TABLE "keys" <br>( `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `privatekey` TEXT,<br> `publickey` TEXT,<br> `address` TEXT<br>)</span></pre>
<h1 id="cc83" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >The Code</h1>
<p id="ff28" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >From this point as the code is going to get a little more complex, we are going to have a git "<strong class="ll mb"><a href="https://git-scm.com/docs/git-branch" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">branch</a>"</strong> to keep a snapshot of the code for each tutorial.</p>
<p id="2c5a" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >The latest code can be found "<strong class="ll mb"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/generateaddress" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">here</a>"</strong> and it is also listed below.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="45c9" class="mm kx bf av mn b dz mo mp l mq" >//load express<br>const express = require("express");<br>//load body parser<br>const bodyParser = require("body-parser");<br>//load the bitcoin js files<br>var bitcoin = require("bitcoinjs-lib");<br>//load SQLlite (use any database you want or none)<br>const sqlite3 = require("sqlite3").verbose();<br>//init it<br>const app = express();<br>//set up the network we would like to connect to. in this case test net.<br>const TestNet = bitcoin.networks.testnet;<br>//open a database connection<br>let db = new sqlite3.Database("./db/db.db", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});<br>//generate the key pair using the makeRandom functions (there a bunch of ways to make an address btw)<br>let keyPair = bitcoin.ECPair.makeRandom({ network: TestNet });<br>//extract the publickey<br>let publicKey = keyPair.publicKey;<br>//get the private key<br>let privateKey = keyPair.toWIF();<br>//get an address from the keyPair we generated above.<br>let { address } = bitcoin.payments.p2pkh({<br>  pubkey: publicKey,<br>  network: TestNet<br>});<br>db.run(<br>  `INSERT INTO keys(address,privatekey,publickey) VALUES(?,?,?)`,<br>  [address, privateKey, publicKey],<br>  function(err) {<br>    if (err) {<br>      return console.log(err.message);<br>    }<br>    // get the last insert id<br>    //debug<br>    //console.log(this.lastID);<br>  }<br>);<br>//display it to the user<br>console.log("Pay me f00l " + address);<br>app.listen(3000, () =&gt; {});</span></pre>
<p id="207b" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" ><strong class="ll mb">What is going in the code above?</strong></p>
<p id="56ca" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Firstly we have cleaned up the code, removed block.io dependency and instead added "<strong class="ll mb"><a href="https://github.com/bitcoinjs/bitcoinjs-lib" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">bitcoinjs-lib</a>"</strong> which is included in our application with the code line below.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="3e0e" class="mm kx bf av mn b dz mo mp l mq" >var bitcoin = require(‘bitcoinjs-lib’);</span></pre>
<p id="6765" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >After that, we set the network to “testnet” when you remove this it will default to the live network as shown below.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="1e47" class="mm kx bf av mn b dz mo mp l mq" >const TestNet = bitcoin.networks.testnet</span></pre>
<p id="884f" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >After that, we open a connection to the "<strong class="ll mb"><a href="https://www.sqlite.org/about.html" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">SQLLite</a>"</strong> database, feel free to swap this with whatever database that you want.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="6d75" class="mm kx bf av mn b dz mo mp l mq" >//open a database connection<br>let db = new sqlite3.Database("./db/db.db", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});</span></pre>
<p id="79cf" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Next, we generate a random key pair. There are a number of ways to generate Bitcoin address but this the simplest way to do so. Also, note that we pass in the “testnet” parameter that we created earlier inside the config part {}.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="bf35" class="mm kx bf av mn b dz mo mp l mq" >let keyPair = bitcoin.ECPair.makeRandom({ network: TestNet });</span></pre>
<p id="0a16" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Next, we extract the public and private key in variables, this is not essential is just makes the variables easier to use later on in the code.</p>
<p id="758d" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >The "<strong class="ll mb"><a href="https://en.bitcoin.it/wiki/Wallet_import_format" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">toWIF</a>"</strong> function is worth talking about here it stands and basically stands for Wallet Import Format (WIF, also known as Wallet Export Format) is a way of encoding a private "<strong class="ll mb"><a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">ECDSA key</a>"</strong> so as to make it easier to copy.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="1c77" class="mm kx bf av mn b dz mo mp l mq" >//extract the publickey<br>let publicKey = keyPair.publicKey</span><span id="9438" class="mm kx bf av mn b dz mr ms mt mu mv mp l mq" >//get the private key<br>let privateKey = keyPair.toWIF();</span></pre>
<p id="15d6" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Next, we want to extract the address to allow so that someone can pay us/ As you can see we pass in the <strong class="ll mb">publicKey</strong> we extracted earlier as well as setting it to the test network (again this gets boring fast)</p>
<p id="fee6" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >To get the address we have to call the <strong class="ll mb">p2pkh</strong> (Pay-to-PubkeyHash) function. you can read about it in more detail "<strong><a href="https://en.bitcoin.it/wiki/Transaction#Pay-to-PubkeyHash" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">here</a></strong>".</p>
<pre class="mh mi mj mk ml dv gg df"><span id="46e5" class="mm kx bf av mn b dz mo mp l mq" >let { address } = bitcoin.payments.p2pkh({ pubkey: publicKey,network: TestNet });</span></pre>
<p id="631f" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Lastly, we simply store it in our database. Note we know this is super insecure but it is just a test, for now, we will make it much more secure later on.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="bbb6" class="mm kx bf av mn b dz mo mp l mq" >db.run(`INSERT INTO keys(address,privatekey,publickey) VALUES(?,?,?)`, [address,privateKey,publicKey], function(err) {<br>if (err) {<br> return console.log(err.message);<br>}</span></pre>
<h1 id="5cbd" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" ><strong class="ch">Does it work?</strong></h1>
<p id="3917" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >Let’s run the program and find out. Open a terminal session (Mac/Linux), putty on windows or whatever method you use to run your note app. We use terminal so this is what we will document going forward.</p>
<p id="f765" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Run the generate script.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="3d1f" class="mm kx bf av mn b dz mo mp l mq" >node generate.js</span></pre>
<p id="dc05" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >If everything goes well you will see the following output</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_gmZwW3S_AzI8oeNcf7XAsg.png" alt="" width="1218" height="97"></p>
<p id="8d5f" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >You will see the details in the database. This is not used now but in the next tutorial, we are going to claim this Bitcoin. You can view this database by using any "<strong class="ll mb"><a href="https://www.sqlite.org/about.html" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">SQLLite</a>"</strong> browser we use this "<strong><a href="http://sqlitebrowser.org/" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">one</a></strong>".</p>
<p id="72c2" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Now let’s send a payment to this address.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_dfIfiR_ewQPNidHuxkfwpg.png" alt="" width="3335" height="1300"></p>
<p >Now let’s see if it has shown up on the network. We use blockchain as our blockchain "<strong class="ll mb"><a href="https://testnet.blockchain.info/" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">explorer</a>"</strong>.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_zxANBApe6C4npY_R6Rz8nQ.png" alt="" width="2797" height="1158"></p>
<h1 id="mcetoc_1dkdm5agm0" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" > </h1>
<h1 id="8655" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Conclusion</h1>
<p id="a570" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We have managed to connect to the Bitcoin network generate an address and send some Bitcoin to it and store the keys. Next time we will use the private key to claim those coins.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Using 3rd Party providers</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/using-3rd-party-providers.html"/>
        <id>https://cryptoskillz.com/blog/using-3rd-party-providers.html</id>

        <updated>2019-09-10T20:26:56+07:00</updated>
            <summary>
                <![CDATA[
                    <div id="ea43" class="jl jm bf av jn b jo jp jq jr js jt ju">
<h2 id="mcetoc_1dk42k11v0" class="jn b jo jv bf"><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_iHh_BRR4Zc-RPTc1RraJyQ.jpeg" alt="" width="639" height="473"></h2>
</div>
<div class="jw">
<div class="ag af">
<div> </div>
<div>
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div id="ea43" class="jl jm bf av jn b jo jp jq jr js jt ju">
<h2 id="mcetoc_1dk42k11v0" class="jn b jo jv bf"><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_iHh_BRR4Zc-RPTc1RraJyQ.jpeg" alt="" width="639" height="473"></h2>
</div>
<div class="jw">
<div class="ag af">
<div> </div>
<div>
<h1 id="b76a" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Introduction</h1>
<p id="b675" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We decided to be paid in BTC for all of our future endeavours. After a few weeks of research, we found that there are many tutorials that show you how to do just about everything with Bitcoin. What we could not find was a tutorial that explained how to do one of it’s most simple use cases and that was put a Bitcoin address on a webpage and accept payment.</p>
<p id="946e" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >You can go the hosted solution and this is what I did with the first experiment, we went with the rather excellent “<a href="https://globee.com/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer"><strong class="ll mg">Globlee</strong></a><strong class="ll mg">”.</strong></p>
<p class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" ><strong class="ll mg"><br>*cryptoskillz from the future we are at a state in the project that we no longer require "</strong><strong class="ll mg"><a href="https://www.shopify.com/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">Shopify</a>"</strong><strong class="ll mg">/</strong><strong>"<a href="https://globee.com/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">Globlee</a>"</strong><strong class="ll mg"> </strong>so it has been shut down, the screenshot below shows what it looked like.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_7L2zVI88OJjct_TFmUEvyw.png" alt="" width="2654" height="1287"></p>
<p id="37a4" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >However, this is <strong>"<a class="cb bx mc md me mf" target="_blank" href="https://medium.com/@jimmysong/why-bitcoin-is-different-e17b813fd947" rel="noopener noreferrer">Bitcoin we want to be the bank</a>"</strong>, decentralise everything etc. This obviously leads me to dive deeper into the murky water of Bitcoin what are PUB keys WIF’s. How do we create them why does the testnet mempool take forever to clear, what the hell is a mempool? These and many other questions sprung up and the answers were not readily forthcoming, it is fair to say the Bitcoin community expects a certain level of knowledge before you can play in their waters.</p>
<p id="7cb8" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >As we where solving these issues for ourselves we thought we may as well document the process and this is what this tutorial is.</p>
<p id="8d76" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >It has been broken down into many parts and each tutorial has it’s own matching branch in Github this way you can literally track the progress, changes made etc to the code base as it develops. The latest version of the code is always in master if you want to ignore these tutorials and jump right in, go ahead.</p>
<p id="554b" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >The overreaching goal of this tutorial is to have:</p>
<ol class="">
<li id="addc" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw mm mn mo" >A full node (with lighting running atop of it)</li>
<li id="a2ab" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >A single line of code JS (that is agnostic) that is used to give e-commerce functionality to any website</li>
<li id="4dff" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >A REST API for processing all Bitcoin-related tasks (generateaddress, estimatefee etc)</li>
<li id="010f" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >An admin server for processing order</li>
<li id="a32e" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >A series of web components to give WWW sites e-commerce layout (checkout, pay button, product gallery etc)</li>
</ol>
<p id="a93c" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >More than just the above it is meant to serve as a teaching aid as every step successes, failures and everything in-between is documented both in this tutorial and in the Github.</p>
<p > </p>
<h1 id="113f" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Overreaching Goal</h1>
<p id="ca45" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >The purpose of this tutorial is to do the following</p>
<p id="ff77" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >1 Generate a unique address for each payment request on a webpage<br>2 Monitor the blockchain for payment <br>3 Inform the buyer when the payment is successful<br>4 Inform the seller when the payment is successful</p>
<p id="fdcd" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >That is it, how hard can that be? Let’s begin shall we</p>
<p > </p>
<h1 id="dd57" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Technology choices</h1>
<p id="a905" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We will be using a microservice architecture(ish) and will be using Node.js (for servers / REST API’s etc) and static HTML for everything else (interacting with the REST API for content delivery) and some flavour of SQL (most likely <strong>"<a href="https://www.sqlite.org/about.html" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">SQLLite</a>"</strong> to begin with)</p>
<p id="9d09" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >For our first foray into the world of accepting Bitcoins, we thought it would be wise to look at the various API companies out there (and there are a lot) and see how much of the heavy lifting can be removed if you are happy to rely on a third party. Note this is probably the most simple way (outside of fully hosted) way to process a Bitcoin payment and as a result will be of the most useful to most people.</p>
<p id="af2f" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >We also discounted any provider who converted your Bitcoin back to dollars, pounds euros, in fact, any FIAT currency as soon as the item was sold as this is not what we were looking to do at all.</p>
<p id="bff5" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >There are many Bitcoin as service companies out there they range from expensive and bad to cheap and good (and everything in between) the one I chose was "<strong class="ll mg"><a href="https://block.io/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">Block.io</a>"</strong> we found it to have the best API. If you do not like Block.io the concepts are simple enough to be interchangeable.</p>
<p id="8ac7" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >Go ahead sign up for a Blox account and click the skip button in the account page as the free is good enough for us for now.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_JCuWVZXAa23_M1L1Uil_bw.png" alt="" width="2240" height="1243"></p>
<p id="19a3" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >Next, we have to set your secret pin. Do so and keep it secret.</p>
<p > </p>
</div>
<div><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_ZO-9zptaX9bCLivOglpI8A.png" alt="" width="1208" height="697"></div>
<div> </div>
<div>After this Blox will get you a <strong>"<a href="https://en.bitcoin.it/wiki/Seed_phrase" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">mnemonic</a>"</strong> make a note of this and click on the “I have saved this information” box, then click done.</div>
<div> </div>
<div><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_ZO-9zptaX9bCLivOglpI8A.png" alt="" width="1208" height="697"></div>
<div> </div>
<div>
<p id="9ee8" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >Lastly, click on the drop-down and click “Bitcoin (Testnet”) and we are ready to go.</p>
<p id="e5db" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >*Note the “show API keys” link has your API keys that should be obvious but these are required to interact with the Block API.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_ZsnH6hueK2oJitI1zn1A9g.png" alt="" width="2133" height="223"></p>
<h2 id="c00c" class="ng kx bf av au el nh ni nj nk nl nm nn no np nq nr" >The code</h2>
<p id="37da" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >Now we are up and running we have a wallet and access to a Testnet, go us. Now let’s sling some code and interact with it. If you read their <strong>"<a href="https://block.io/docs/basic" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">docs</a>"</strong> you will see that are fairly extensive but don’t worry we are only going to use 2 of the commands at this point in time.</p>
<p id="a369" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >The code below is using the "<strong class="ll mg"><a href="https://www.npmjs.com/package/block_io" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">block_io</a>"</strong> and uses a simple "<strong class="ll mg"><a href="https://nodejs.org/en/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">Node.js</a>"</strong><strong class="ll mg"> "</strong><strong class="ll mg"><a href="https://expressjs.com/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">express</a>" </strong>application. The source code can be found "<strong class="ll mg"><a href="https://github.com/cryptoskillz/block_ioTurotial" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">here</a>"</strong>.</p>
<p id="4fae" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >*Note we have left my API keys in here, it is intentional just so you can see how they are meant to be used. We do not use the Block.io account for anything so there is no way you can compromise anything.</p>
<pre class="kg kh ki kj kk dv gg df"><span id="e933" class="ng kx bf av ns b dz nt nu l nv" >//load express<br>const express = require('express');<br>//load body parser<br>const bodyParser = require('body-parser');<br>//load block io<br>var BlockIo = require('block_io');<br>//set the version of the API to 2<br>var version = 2; // API version<br>//init it<br>const app = express();</span><span id="e564" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >//this function just creates a random label so we can generate the address.<br>function makeLabel() {<br>  var text = "";<br>  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";<br>  for (var i = 0; i &lt; 5; i++)<br>    text += possible.charAt(Math.floor(Math.random() * possible.length));<br>  return text;<br>}</span><span id="07aa" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >//init the block.io server <br>var block_io = new BlockIo('9ccb-fad0-7811-4dfb', 'TFcce3dNxcfk7E3D', version);</span><span id="3e3e" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >//get a random label<br>var label = makeLabel();<br>console.log('Generating new address')<br>/*<br>create a new address using a label.  You do not have to use a label but it just makes it easier to work with later.<br>Later on we wil store this address in a databse for further processing.<br>*/<br>block_io.get_new_address({'label': label}, console.log);<br>/*<br>Set a timer to check for a payment.  Using the label we created allows us to check faster but you could move this to <br>a backend server function and have it check for balances etc<br>*/<br>setInterval(function()<br>{<br> console.log('Checking for payment');<br> block_io.get_address_balance({'label': label}, console.log);<br>},10000);</span><span id="73fa" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >app.use(bodyParser.urlencoded({ extend: false }));  <br>app.use(bodyParser.json());</span><span id="7c8d" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >app.listen(3000, () =&gt; {<br>});</span></pre>
<p id="59fa" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >Let us go ahead and explain the code below:</p>
<ol class="">
<li id="9a9e" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw mm mn mo" >We call the <strong class="ll mg">makeLabel</strong> function to generate a unique label.</li>
<li id="c8d2" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >Then we generate a new address via the <strong class="ll mg">get_new_address function. *</strong>Note we use the label function just so it is easier to spot in the wallet. This address will now show up in your block.io wallet.</li>
</ol>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_HjTienzdr2kGlRmx293EFQ.png" alt="" width="2343" height="1128"></p>
<p id="563d" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >3. We use the <strong class="ll mg">setInterval</strong> function to check for the payment via its label (<strong class="ll mg">get_address_balance</strong>) every 10 seconds</p>
<p id="4985" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >That’s it, super simple once you have downloaded the code simply change the API keys to your own open a terminal and type <strong class="ll mg">node server.js </strong>and<strong class="ll mg"> </strong>you will see the following output</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_KT325oU_qhTm3KqCTDdVMQ.png" alt="" width="2831" height="489"></p>
<h1 id="mcetoc_1dk43ek4n0" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" > </h1>
<h1 id="6ebc" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Conclusion</h1>
<p id="ff2a" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We have set up an account with a Bitcoin API service and wrote the code to generate a new address and then check if any Bitcoin has been sent to it over the Testnet. Yay, go us. In "<strong class="ll mg"><a href="https://cryptoskillz.com/blog/generate-a-btc-address.html" target="_blank" rel="noopener noreferrer">part 2</a>" </strong>we will set up a bitcoin core wallet, get some test coins and send them to our new address.</p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Table of contents &amp; prereqs</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/table-of-contents-and-prereqs.html"/>
        <id>https://cryptoskillz.com/blog/table-of-contents-and-prereqs.html</id>

        <updated>2019-09-10T20:37:54+07:00</updated>
            <summary>
                <![CDATA[
                    <div id="259d" class="jf jg bf av jh b ji jj jk jl jm jn jo">
<h1 id="mcetoc_1dk4283no0" class="jh b ji jp bf"> </h1>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/1/part0.jpeg" alt="" width="640" height="480"></p>
</div>
<div class="jq">
<div class="ag af">
<div> </div>
<div>
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div id="259d" class="jf jg bf av jh b ji jj jk jl jm jn jo">
<h1 id="mcetoc_1dk4283no0" class="jh b ji jp bf"> </h1>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/1/part0.jpeg" alt="" width="640" height="480"></p>
</div>
<div class="jq">
<div class="ag af">
<div> </div>
<div>
<h2 id="ac85" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc">Pledge</h2>
<p id="ec2f" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >We pledge to keep this tutorial up to date and change each tutorial as and when it is appropriate. One of the biggest issues with BTC documentation is it becomes out of date (really quickly) and this literally costs 1000’s of devs hours when people are starting out to learn how to develop for BTC.</p>
<h2 id="aa0a" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc">External Resources</h2>
<p id="99f7" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >Below are the links to the code and the demos of the various services that make up this package.</p>
<p id="acb2" class="ld le bf av lf b lg lr li ls lk lt lm lu lo lv lq" >Note, these demos only work the latest branch being worked and the master branch.</p>
<p id="f88a" class="ld le bf av lf b lg lr li ls lk lt lm lu lo lv lq" ><a href="https://github.com/cryptoskillz/ECS" target="_blank" rel="noopener noreferrer">Code<br></a><a href="https://cryptoskillz.com/" target="_blank" rel="noopener noreferrer">WWW site</a><a href="https://s3-eu-west-1.amazonaws.com/cryptoskillz.com/srcrypto/prod/admin/login.html" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer"><br></a><a href="https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">CDN (sr.js)<br></a><a href="https://ecstestnet.cryptoskillz.com/" target="_blank" rel="noopener noreferrer">Testnet Server<br></a><a href="https://ecslive.cryptoskillz.com/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Mainnet Server</a><br><a href="https://cryptoskillz.com/blog/ecs/">Tutorial homepage</a><br><a href="https://cryptoskillz.com/light.html" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Lightning Demo</a></p>
<p > </p>
<h1 id="mcetoc_1dk429mug1" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc" >Quick links</h1>
<h3 id="21b7" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Git Branches</h3>
<p id="45e5" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >Part 1: Using 3rd Party providers: <strong class="lf mm">no branch</strong><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/generateaddress" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 2: Generate BTC address</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/monitor" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 3: Monitor blockchain for payment</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/sweep" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 4: Move payment to cold storage</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/www" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 5: WWW and modularisation</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/admin" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 6: Create an Admin and hosting</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/refactor1" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 7: Recode CDN to use plain js</a><br>Part 8: Working with Fullnodes: <strong class="lf mm">no branch<br></strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/9-fullnode-part-2" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 9: Working with Fullnodes 2</a><br>Part 10: Address 10: <strong class="lf mm">no branch<br></strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/part11-sweep-refactor/admin" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 11: Refactor of cold storage</a><br><a class="cb bx lw lx ly lz" target="_blank" href="https://medium.com/bitcoin-e-commerce-development/part-12-backoffice-and-server-refactor-45dbc05dcebb" rel="noopener noreferrer">Part 12: Backoffice and server refactor</a><br>Part 13: Working with Fullnodes 3<br><a href="https://github.com/cryptoskillz/ECS/tree/part14-replace-globee-2" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 14: Finally removing GloBee</a></p>
<h3 id="8494" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Environment Variables</h3>
<p id="a189" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >We keep all of the environment in a .env file. For security reasons, this has been added to the git ignore. You will see a file called .env_copy which contains all of the variables just rename this to .env and add your details.</p>
<h4 id="f507" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">emailsmtp</h4>
<p id="8529" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >Hold the email SMTP server. For development, we are using <a href="https://ethereal.email/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">https://ethereal.email/</a> which fakes an email server allowing us to test the functionality without actually sending emails.</p>
<h4 id="826d" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">emailusername</h4>
<p id="2e61" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >This is the username for the SMTP service</p>
<h4 id="b249" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">emailpassword</h4>
<p id="9baf" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >This is the email password for the SMTP service</p>
<h4 id="a667" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">walletpassphrase</h4>
<p id="7667" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The wallet passphrase for bitcoin core</p>
<h4 id="fe24" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">walletaccount</h4>
<p id="70e5" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >the wallet account we are using for bitcoin core</p>
<h4 id="1852" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">blockiokey</h4>
<p id="c75e" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The key that was supplied to us by “<a href="https://block.io/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer"><strong class="lf mm">block.io</strong></a>” when we signed up</p>
<h4 id="082f" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">blockiosecret</h4>
<p id="5dd3" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The API secret that was supplied to us by “<a href="https://block.io/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer"><strong class="lf mm">block.io</strong></a>” when we signed up</p>
<h4 id="e247" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">toaddress</h4>
<p id="8572" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The cold storage address we were sweeping funds to. Note this was replaced as of part 11 and is no longer required.</p>
<h3 id="1613" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Port</h3>
<p id="a8e9" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The port you want to run the server on.</p>
<h3 id="d709" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Mock</h3>
<p id="3ed6" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >Whenever we are using mock API calls or not (beta)</p>
<h3 id="adea" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Confirmations</h3>
<p id="cf86" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >How many confirmations we wait for</p>
<h3 id="8684" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Strikeendpoint</h3>
<p id="f0d1" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The endpoint for strike <a href="https://strike.acinq.co/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">https://strike.acinq.co/</a></p>
<h3 id="16cc" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Strikepaikey</h3>
<p id="fe52" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The API key for strike <a href="https://strike.acinq.co/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">https://strike.acinq.co/</a></p>
<h2 id="mcetoc_1dk42endh2" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc">Run it youself.</h2>
<p id="mcetoc_1dkdkr1vk0" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc">We have recently released ECS as a SAAS (software as a service) product, it is free and takes a few minutes to step up read more about it "<a href="https://ecs-2.gitbook.io/ecs/" target="_blank" rel="noopener noreferrer">here</a>".</p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
</feed>
