<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>cryptoskillz</title>
    <link href="https://cryptoskillz.com/blog/feed.xml" rel="self" />
    <link href="https://cryptoskillz.com/blog" />
    <updated>2019-09-12T22:53:30+01:00</updated>
    <author>
        <name>cryptoskillz</name>
    </author>
    <id>https://cryptoskillz.com/blog</id>

    <entry>
        <title>Move payment to cold storage</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/move-payment-to-cold-storage.html"/>
        <id>https://cryptoskillz.com/blog/move-payment-to-cold-storage.html</id>

        <updated>2019-09-10T22:34:01+01:00</updated>
            <summary>
                <![CDATA[
                    <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_YYI3zd3a5mRDlodesvewtw.jpeg" alt="" width="639" height="426"></p>
<p> </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_YYI3zd3a5mRDlodesvewtw.jpeg" alt="" width="639" height="426"></p>
<p> </p>

<h1 id="d179" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Introduction</h1>
<p id="dfde" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >This guide aims to program a website to accept Bitcoin. In the previous part, we monitored the blockchain with "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> to let us know when the payment was successful.</p>
<p id="d59d" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Now we aim to take processed funds and sweep them into a "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cold storage</a>" </strong>wallet. We do this with a new script called “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/sweep.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">sweep.js</strong></a>”.</p>
<blockquote class="mf mg mh">
<p id="770b" class="lh li bf mi lj b lk ma lm mb lo mc lq md ls me lu" >Note cryptoskillz from the future here. It turns out we did this bit really badly you can read about in part 10 "<strong><a href="https://cryptoskillz.com/blog/address-101.html" target="_blank" rel="noopener noreferrer">here</a>"</strong> . As a result we would ignore this and instead wait to part 11 which fixes the issues. Ok, Bye, friend :]</p>
</blockquote>
<h1 id="05f0" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The SQL</h1>
<p id="fa99" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We have added a field called swept which is to check if we have moved the payment to our "<strong><a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cold storage</a>"</strong> or not.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="56d4" class="mo kv bf av mp b dz mq mr l ms" >CREATE TABLE "keys" ( <br>`id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `privatekey` TEXT,<br> `publickey` TEXT,<br> `address` TEXT,<br> `processed` INTEGER DEFAULT 0,<br> `swept` INTEGER DEFAULT 0 <br>)</span></pre>
<h1 id="6cb3" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The Code</h1>
<p id="ff28" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The latest (branch sweep) code can be found "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/sweep" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong> and it is listed below.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="9ca2" class="mo kv bf av mp b dz mq mr l ms" >/*<br>This is the sweep script that moves payment to our hard wallet.<br>*/<br>//init block.io<br>var BlockIo = require("block_io");<br>var version = 2; // API version<br>var block_io = new BlockIo(<br>  process.env.blockiokey,<br>  process.env.blockiosecret,<br>  version<br>);<br>//load express<br>const express = require("express");<br>//load body parser<br>const bodyParser = require("body-parser");<br>//load the bitcoin js files<br>var bitcoin = require("bitcoinjs-lib");<br>//load SQLlite (use any database you want or none)<br>//init it<br>const sqlite3 = require("sqlite3").verbose();<br>var request = require("request");<br>//init it<br>const app = express();<br>//open a database connection<br>let db = new sqlite3.Database("./db/db.db", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});<br>//set up the network we would like to connect to. in this case test net.<br>const TestNet = bitcoin.networks.testnet;<br>//build the query<br>let sql = `SELECT * FROM keys where processed = 1 and swept = 0 limit 0,1`;<br>//run the query<br>db.all(sql, [], (err, rows) =&gt; {<br>  if (err) {<br>    throw err;<br>  }<br>  rows.forEach(row =&gt; {<br>    //get the address<br>    var address = row.address;<br>    //get the private key<br>    var privateKey = row.privatekey;</span><span id="9328" class="mo kv bf av mp b dz mt mu mv mw mx mr l ms" >block_io.get_transactions(<br>      { type: "received", addresses: address },<br>      function(error, data) {<br>        //get the tx transaction id<br>        var txid = data.data.txs[0].txid;<br>        //get the amount in the transaction<br>        let amountReceived = data.data.txs[0].amounts_received[0].amount;<br>        //estimate the fee<br>        block_io.get_network_fee_estimate(<br>          { amounts: amountReceived, to_addresses: process.env.toaddress },<br>          function(error2, data2) {<br>            //store the network fee.<br>            var networkfee = data2.data.estimated_network_fee;<br>            //init a new transaction<br>            let tx = new bitcoin.TransactionBuilder(TestNet);<br>            //get the WIF from the private key so we can sign the transaction later.<br>            let hotKeyPair = new bitcoin.ECPair.fromWIF(privateKey, TestNet);<br>            //work out the amount to send<br>            let amountToSend = amountReceived - networkfee;<br>            //turn the amount recieved into satoshis<br>            amountToSendSatoshi = amountToSend * 100000000;<br>            tx.addInput(txid, 0, 0xfffffffe);<br>            //note : this seems to do the fee on of its own accord.<br>            tx.addOutput(process.env.toaddress, amountToSendSatoshi);<br>            //sign the transaction with our private key<br>            tx.sign(0, hotKeyPair);<br>            //output it<br>            //note we have to figure out how to push this to the network and not use <a href="https://testnet.blockchain.info/pushtx" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://testnet.blockchain.info/pushtx</a><br>            console.log(tx.build().toHex());<br>            // Set the headers<br>            var headers = {<br>              "User-Agent": "Super Agent/0.0.1",<br>              "Content-Type": "application/x-www-form-urlencoded"<br>            };<br>            // Configure the request<br>            var options = {<br>              url: "<a href="https://testnet.blockchain.info/pushtx" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://testnet.blockchain.info/pushtx</a>",<br>              method: "POST",<br>              headers: headers,<br>              form: { tx: tx.build().toHex() }<br>            };<br>            // Start the request<br>            request(options, function(error, response, body) {<br>              //console.log(response)<br>              if (!error &amp;&amp; response.statusCode == 200) {<br>                // Print out the response body<br>                console.log(body);<br>                let sqldata = ["1", address];<br>                let sql = `UPDATE keys<br>                 SET swept = ?<br>                 WHERE address = ?`;<br>                db.run(sql, sqldata, function(err) {<br>                  if (err) {<br>                    return console.error(err.message);<br>                  }<br>                  console.log(`Row(s) updated: ${this.changes}`);<br>                });<br>              }<br>            });<br>          }<br>        );<br>      }<br>    );<br>  });<br>});<br>app.listen(3000, () =&gt; {});</span></pre>
<p id="6d5b" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">What is going in the code above?</strong></p>
<p id="c316" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >We will skip to the new code check out the previous parts of this tutorial for an explanation on what "<strong class="lj lz"><a href="http://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> is etc.</p>
<p id="d591" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The first new thing you will see is we have included the package called "<strong class="lj lz"><a href="https://www.npmjs.com/package/request" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">request</a>"</strong> this is so we can post to the signing service later.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="238d" class="mo kv bf av mp b dz mq mr l ms" >var request = require('request');</span></pre>
<p id="8bc7" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >We have also set a new environment variable which holds the address of the "<a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">cold storage</strong></a> <strong class="lj lz"><a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">wallet</a>"</strong>. At the moment this is just one address but we could create a new address for each transaction (and we will) we could interface with our "<a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong>hardware wallet</strong></a>" and generate an address (and we will). There are a number of things we can do here and will be looking to make this more secure and private later.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="a464" class="mo kv bf av mp b dz mq mr l ms" >process.env.toaddress</span></pre>
<p id="08a4" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we are pulling out all of the processed payments from the table. A processed payment basically means that the monitor script has picked up this payment as it has been "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Confirmation" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">confirmed</a>"</strong> in the "<strong class="lj lz"><a href="https://en.wikipedia.org/wiki/Blockchain" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">blockchain</a>"</strong>.</p>
<p id="2653" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Note we are storing the private keys in the database just to make this part of the tutorials easy to understand. In the future, we will refactor this so the private keys are stored by the "<strong class="lj lz"><a href="https://bitcoin.org/en/full-node" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">fullnode</a>"</strong> and secured by your "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Passphrase_generation" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">passphrase</a>"</strong> (as they should be)</p>
<pre class="mj mk ml mm mn dv ge df"><span id="aa2b" class="mo kv bf av mp b dz mq mr l ms" >let sql = `SELECT * FROM keys where processed = 1 and swept = 0 limit 0,1`;<br>//run the query<br>db.all(sql, [], (err, rows) =&gt; {<br>  if (err) {<br>    throw err;<br>  }<br>  rows.forEach(row =&gt; {});<br>});</span></pre>
<p id="ff92" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >After that, we grab the address and "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Private_key" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">private key</a>"</strong> from the database.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="f0d4" class="mo kv bf av mp b dz mq mr l ms" >var address = row.address;<br>//get the private key<br>var privateKey = row.privatekey;<br>block_io.get_transactions({ type: "received", addresses: address }, function(<br>  error,<br>  data<br>) {});</span></pre>
<p id="47bf" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we want to use this address to contact "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> and get the transaction information. Note we are storing the "<strong class="lj lz"><a href="https://bitcoin.org/en/glossary/txid" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">txid</a>"</strong> and amount as we are about to use this estimate the fee and sign the transaction.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="a227" class="mo kv bf av mp b dz mq mr l ms" >block_io.get_transactions({ type: "received", addresses: address }, function(<br>  error,<br>  data<br>) {<br>  //todo : check for no transactions<br>  //console.dir(data, { depth: null });<br>  //get the tx transaction id<br>  var txid = data.data.txs[0].txid;<br>  //get the amount in the transaction<br>  let amountReceived = data.data.txs[0].amounts_received[0].amount;<br>});</span></pre>
<p id="790b" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we want to get the estimated network fee from "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong></p>
<pre class="mj mk ml mm mn dv ge df"><span id="7fda" class="mo kv bf av mp b dz mq mr l ms" >block_io.get_network_fee_estimate(<br>  { amounts: amountReceived, to_addresses: process.env.toaddress },<br>  function(error2, data2) {<br>    //store the network fee.<br>    var networkfee = data2.data.estimated_network_fee;<br>  }<br>);</span></pre>
<p id="a629" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we want to create and sign a "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Transaction" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">transaction</a>"</strong>. We do this by using the transaction builder to work out the amount send and sign it. Note this was one of the hardest things to do out of all the steps so if this does not immediately click do not worry, it will eventually.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="f472" class="mo kv bf av mp b dz mq mr l ms" >//init a new transaction<br>let tx = new bitcoin.TransactionBuilder(TestNet);<br>//get the WIF from the private key so we can sign the transaction later.<br>let hotKeyPair = new bitcoin.ECPair.fromWIF(privateKey, TestNet);<br>//work out the amount to send<br>let amountToSend = amountReceived - networkfee;<br>//turn the amount recieved into satoshis<br>amountToSendSatoshi = amountToSend * 100000000;<br>tx.addInput(txid, 0, 0xfffffffe);<br>tx.addOutput(process.env.toaddress, amountToSendSatoshi);<br>//sign the transaction with our private key<br>tx.sign(0, hotKeyPair);</span></pre>
<p id="770c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The next thing we want to do is "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Transaction_broadcasting" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">broadcast</a>"</strong> this transaction to the network. We are using blockchain.info tool which can be found "<strong class="lj lz"><a href="https://testnet.blockchain.info/pushtx" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong>. There are many of these tools and they all do the same thing and yes we will be doing this ourselves once we upgrade to a "<strong class="lj lz"><a href="https://bitcoin.org/en/full-node" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">fullnode</a>"</strong>.</p>
<p id="f0a9" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Lastly, we update the database so we do not have to process this entry again.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="0308" class="mo kv bf av mp b dz mq mr l ms" >// Set the headers<br>   var headers = {<br>       'User-Agent':       'Super Agent/0.0.1',<br>       'Content-Type':     'application/x-www-form-urlencoded'<br>   }</span><span id="8507" class="mo kv bf av mp b dz mt mu mv mw mx mr l ms" >// Configure the request<br>var options = {<br>  url: "<a href="https://testnet.blockchain.info/pushtx" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">https://testnet.blockchain.info/pushtx</a>",<br>  method: "POST",<br>  headers: headers,<br>  form: { tx: tx.build().toHex() }<br>};<br>// Start the request<br>request(options, function(error, response, body) {<br>  if (!error &amp;&amp; response.statusCode == 200) {<br>    // Print out the response body<br>    console.log(body);<br>    let sqldata = ["1", address];<br>    let sql = `UPDATE keys<br>                 SET swept = ?<br>                 WHERE address = ?`;</span><span id="b384" class="mo kv bf av mp b dz mt mu mv mw mx mr l ms" >db.run(sql, sqldata, function(err) {<br>      if (err) {<br>        return console.error(err.message);<br>      }<br>      console.log(`Row(s) updated: ${this.changes}`);<br>    });<br>  }<br>});</span></pre>
<p id="e322" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >That’s it we now have a “server” which allows us to generate an address, monitor the blockchain for payment and finally move the funds to "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cold storage</a>"</strong>, neat. Let’s test it, shall we?</p>
<h2 id="1904" class="mo kv bf av au el my mz na nb nc nd ne nf ng nh ni" >Step 1: Generate an address</h2>
<p id="c6ba" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >go to your terminal client and type and navigate to the directory with your code and type.</p>
<pre class="mj mk ml mm mn dv ge df"><span id="762f" class="mo kv bf av mp b dz mq mr l ms" >node generate.js</span></pre>
<p id="830b" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >You will be presented with an address in the console (as shown in the screenshot below).</p>
<p id="b33a" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Note, it will be a different address than the in the screenshot obviously.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_sfCOFd3iVkx79EiQIgdkPQ.png" alt="" width="778" height="64"></p>
<p >Copy this and load "<a href="https://bitcoin.org/en/download" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">bitcoin-qt</a>" and send some Bitcoin to this address. As shown below.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_274A47zh3h_-0QVr4MruKg.png" alt="" width="3334" height="586"></p>
<p id="88bf" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Let's see if it is on the network. You can use a blockchain explorer to monitor the status of the transaction. An example of a blockchain explorer with our address can be found "<strong class="lj lz"><a href="https://live.blockcypher.com/btc-testnet/address/muSjmRdrwhjxpXFa8BBEd3BduGvh7YEYwX/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong> as shown in the screenshot below.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_Qtu_mUMozmlzF5chhGH2TQ.png" alt="" width="2839" height="1719"></p>
<p id="3b85" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Because this is a public blockchain anyone can write a block explorer. In fact, this is essentially what we have done with “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">monitor.js</strong></a><strong class="lj lz">”</strong> it is a simple, hyper-focused blockchain explorer.</p>
<h2 id="0fbe" class="mo kv bf av au el my mz na nb nc nd ne nf ng nh ni" >Step2: Monitor for the confirmed transaction</h2>
<p id="a31c" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >Now let’s run monitor by going to the terminal (stopping generate.js if it still running by pressing control &amp; c) and type the following:</p>
<pre class="mj mk ml mm mn dv ge df"><span id="c43f" class="mo kv bf av mp b dz mq mr l ms" >node monitor.js</span></pre>
<p id="fb7c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >When you do this you will see the following (screenshot below). What is happening here is that “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">monitor.js</strong></a>” checking the blockchain to make sure the payment has been <a href="https://en.bitcoin.it/wiki/Confirmation" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">confirmed</strong></a>. This takes a period of time, usually 10 minutes for each confirmation and you free to set whatever confirmation threshold you want (3 confirmations is normal). Note you could also do something when it is in it’s pending state. Though in the case we have not.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_ik2rljI2JifzxC9KC8fmkg.png" alt="" width="967" height="933"></p>
<p ><strong class="lj lz">“</strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">Monitor.js</strong></a><strong class="lj lz">” </strong>is on a timer that is set to check every 3 seconds, again you can set this to whatever time you want to. Eventually, you will see a confirmation (as shown in the screenshot below) and you will be able to go ahead and do the last step which moves the funds to our <a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">cold storage</strong></a><a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">wallet</strong></a> using “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/sweep.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">sweep.js</strong></a><strong class="lj lz">”</strong></p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_BdGYeoOQ3q4IsnF2-cjEIQ.png" alt="" width="1015" height="336"></p>
<p id="7943" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >To move the funds back again go to terminal and type the following. Note make sure the funds have confirmed or this will not work.</p>
<h2 id="647b" class="mo kv bf av au el my mz na nb nc nd ne nf ng nh ni" >Step3: Move funds back to cold storage</h2>
<pre class="mj mk ml mm mn dv ge df"><span id="2007" class="mo kv bf av mp b dz mq mr l ms" >node sweep.js</span></pre>
<p id="e95e" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >This will sign a transaction and move it back to "<strong class="lj lz"><a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">cold storage</a>" </strong>and you will see the following output which is the hex transaction as shown in the screenshot below</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_Zw-wQmKdWACYfL49PDGWpA.png" alt="" width="2886" height="121"></p>
<p id="3873" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Again we can monitor this transaction with a blockchain explorer we could also modify “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/sweep/monitor.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">monitor.js</strong></a>” to check these payments (and we will later) but after about the same period of time as it took to receive the payment you will see this transaction has been confirmed and is now in your "<a href="https://en.bitcoin.it/wiki/Cold_storage" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">cold storage</strong></a><strong class="lj lz"> </strong><strong class="lj lz"><a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">wallet</a>"</strong>.</p>
<p id="fc5c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Note for the purposes of this demo I have used "<strong class="lj lz"><a href="https://bitcoin.org/en/download" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">bitcoin-qt</a>"</strong> (later renamed to Bitcoin Core) to send these funds back to but I recommend you use a hardware wallet such as a "<strong class="lj lz"><a href="https://www.ledger.com/products/ledger-nano-s?r=d90edb4fab8c&amp;tracker=MY_TRACKER" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">ledger nano s</a>"</strong>.</p>
<p id="73ca" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >As you can see from the screenshot below that the funds are now safely in our wallet.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/6/1_Tt4n_Jgl8BcrDpHDN51uEA.png" alt="" width="2279" height="942"></p>
<p > </p>
<h1 id="4ea9" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Conclusion</h1>
<p id="c76f" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >Now we pretty much have a functional bitcoin payment server written in “<a href="https://nodejs.org/en/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">node.js</strong></a>”. Of course, you would never use this in production we have to do a lot more to it for that to be the case. It does, however, serve its purpose of showing how to do all the major components of the Bitcoin network and how to use them to process Bitcoin transactions.</p>
<p id="6888" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >In the next tutorial, we are going to start to turn this into a microservice architecture with a rest API and build a front end to take advantage of the code we have written in the previous tutorials. You can check out a demo "<strong class="lj lz"><a href="https://cryptoskillz.com/" target="_blank" rel="noopener noreferrer">here</a>"</strong> and if you would like to check out the active branch then go "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/www" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Monitor blockchain for payment</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/monitor-blockchain-for-payment.html"/>
        <id>https://cryptoskillz.com/blog/monitor-blockchain-for-payment.html</id>

        <updated>2019-09-10T14:42:33+01:00</updated>
            <summary>
                <![CDATA[
                    <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/5/1_aPTfDYe3RFisRnvYO5xIpQ.jpeg" alt="" width="640" height="480"></p>
<p> </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/5/1_aPTfDYe3RFisRnvYO5xIpQ.jpeg" alt="" width="640" height="480"></p>
<p> </p>

<h1 id="ce3c" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Introduction</h1>
<p id="dfde" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >This guide aims to program a website to accept Bitcoin. In the previous "<strong><a href="https://cryptoskillz.com/blog/generate-a-btc-address.html">article</a></strong>", we replaced "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> with custom "<strong class="lj lz"><a href="https://nodejs.org/en/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">node.js</a>"</strong> code.</p>
<p id="82ab" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Now we successfully generated an address and sent some Bitcoin to it we have to monitor the blockchain and monitor it so we know that the payment has been made and "<strong class="lj lz"><a href="https://www.buybitcoinworldwide.com/confirmations/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">confirmed</a>"</strong>.</p>
<p > </p>
<h1 id="2e4a" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The SQL</h1>
<p id="fa99" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >We have added a field called processed to the database so that when “<a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/blob/monitor/generate.js" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer"><strong class="lj lz">generate.js</strong></a>” is run and a record has been added to the database the <strong class="lj lz">processed</strong> field is set to 0 to stop it from being reprocessed.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="9ae3" class="mk kv bf av ml b dz mm mn l mo" >CREATE TABLE "keys" <br>( `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `privatekey` TEXT,<br> `publickey` TEXT,<br> `address` TEXT,<br> `processed` INTEGER DEFAULT 0<br>)</span></pre>
<h1 id="76f1" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >The Code</h1>
<p id="ff28" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >The latest code can be found "<strong class="lj lz"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/monitor" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">here</a>"</strong> and it is listed below.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="7f75" class="mk kv bf av ml b dz mm mn l mo" >//load express<br>const express = require("express");<br>//load body parser<br>const bodyParser = require("body-parser");<br>//set up block.io<br>var BlockIo = require("block_io");<br>var version = 2; // API version<br>//set up block.io<br>var block_io = new BlockIo(<br>  process.env.blockiokey,<br>  process.env.blockiosecret,<br>  version<br>);<br>const sqlite3 = require("sqlite3").verbose();<br>//init it<br>const app = express();<br>//open a database connection<br>let db = new sqlite3.Database("./db/db.db", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});<br>//check var<br>var checkIt;<br>//set an interval to 10 seconds<br>checkIt = setInterval(checkForPayment, 3000);<br>//function to check for payment<br>function checkForPayment() {<br>  //get the entrys<br>  let sql = `SELECT * FROM keys where processed = 0 `;</span><span id="8aaa" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >db.all(sql, [], (err, rows) =&gt; {<br>    if (err) {<br>      throw err;<br>    }<br>    rows.forEach(row =&gt; {<br>      var address = row.address;<br>      block_io.get_address_balance({ address: address }, function(error, data) {<br>        //some kind of error, deal with it (literately )<br>        if (error) return console.log("Error occurred:", error.message);<br>        //store the balance<br>        var balance = data.data.available_balance;<br>        //store the pending balance<br>        var pendingbalance = data.data.pending_received_balance;<br>        if (balance &gt; 0) {<br>          console.log("we got it");<br>          //update the database that the payment is successful<br>          let data = ["1", address];<br>          let sql = `UPDATE keys<br>                SET processed = ?<br>                WHERE address = ?`;<br>db.run(sql, data, function(err) {<br>            if (err) {<br>              return console.error(err.message);<br>            }<br>            console.log(`Row(s) updated: ${this.changes}`);<br>          });<br>        } else {<br>          if (pendingbalance &gt; 0) {<br>            console.log("awaiting confirmation for " + address);<br>          }<br>        }<br>      });<br>    });<br>  });<br>  console.log("finished checking");<br>}<br>app.listen(3000, () =&gt; {});</span></pre>
<p id="2a9a" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" ><strong class="lj lz">What is going in the code above?</strong></p>
<p id="71c3" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Most of this code is covered in the previous “<a class="cb bx lv lw lx ly" target="_blank" href="https://medium.com/bitcoin-e-commerce-development/using-bitcoin-to-accept-payments-part-2-421fe7803f34" rel="noopener noreferrer"><strong class="lj lz">tutorial</strong></a><strong class="lj lz">” </strong>so we are only going to cover the new code in this tutorial.</p>
<p id="1ad3" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >We are using environment variables to store the private information (such as our block.io API keys) you can find out how to set an env var "<strong><a class="cb bx lv lw lx ly" target="_blank" href="https://medium.com/ibm-watson-data-lab/environment-variables-or-keeping-your-secrets-secret-in-a-node-js-app-99019dfff716" rel="noopener noreferrer">here</a></strong>". We use mac and terminal so we set our env vars in the following manner. If you use some other configuration of hardware and software please adjust the code accordingly.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="b9ea" class="mk kv bf av ml b dz mm mn l mo" >export blockiokey=BLOCKIOKEY<br>export blockiosecret=BLOCKIOSECRET</span><span id="5f2b" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >BlockIo(process.env.blockiokey,process.env.blockiosecret, version);<br>const sqlite3 = require('sqlite3').verbose();</span></pre>
<p id="d688" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we start a timer so that and check the blockchain every 3 seconds. It would be more likely that we would set this to 1 minute but for development, this is a reasonable time.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="3555" class="mk kv bf av ml b dz mm mn l mo" >//check var<br>var checkIt;<br>//set an interval to 10 seconds<br>checkIt = setInterval(checkForPayment, 3000);</span><span id="4542" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >//function to check for payment<br>function checkForPayment() <br>{</span><span id="d0c4" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >}</span></pre>
<p id="d7c3" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we are run a SQL query to get all unprocessed transactions. Note we pull out the address as this is what we want to check for.</p>
<pre class="mf mg mh mi mj dv ge df"><span id="0300" class="mk kv bf av ml b dz mm mn l mo" >//get the entrys <br> let sql = `SELECT * FROM keys where processed = 0 `;<br> <br> db.all(sql, [], (err, rows) =&gt; {<br>   if (err) {<br>     throw err;<br>   }<br>  rows.forEach((row) =&gt; {<br>     <br>     var address =  row.address;<br>   });<br> });</span></pre>
<p id="396c" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Next, we call the "<strong class="lj lz"><a href="https://block.io/" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">bock.io</a>"</strong> API’s "<strong class="lj lz"><a href="https://block.io/api/simple/nodejs" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">getaddress balance</a>"</strong> function and process the results. As we only use each address once we can make some assumptions</p>
<p id="5130" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >1 It should never have a balance higher than we are looking for<br>2 It will always be the first transaction (0) <br>3 we are not going to do anything with pending balance <br>4 We are not going to do anything until it has been confirmed.</p>
<p id="8a4e" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >To make a more robust code base we would check and deal with all of the above but for the sake of this simple tutorial, this is more than enough logic.</p>
<p id="ab73" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >The last thing we do is update the table so that <strong class="lj lz">processed</strong> is equal to 1</p>
<pre class="mf mg mh mi mj dv ge df"><span id="95bc" class="mk kv bf av ml b dz mm mn l mo" >block_io.get_address_balance({ address: address }, function(error, data) {<br>  //some kind of error, deal with it (literately )<br>  if (error) return console.log("Error occurred:", error.message);<br>  //store the balance<br>  var balance = data.data.available_balance;<br>  //store the pending balance<br>  var pendingbalance = data.data.pending_received_balance;<br>  //debug<br>  //console.log(balance);<br>  //console.log(pendingbalance);<br>  if (balance &gt; 0) {<br>    //update the database that the payment is successful<br>    let data = ["1", address];<br>    let sql = `UPDATE keys<br>                SET processed = ?<br>                WHERE address = ?`;</span><span id="c21a" class="mk kv bf av ml b dz mp mq mr ms mt mn l mo" >db.run(sql, data, function(err) {<br>      if (err) {<br>        return console.error(err.message);<br>      }<br>      console.log(`Row(s) updated: ${this.changes}`);<br>    });<br>  } else {<br>    console.log("payment not received for " + address);<br>    if (pendingbalance &gt; 0) {<br>      console.log("awaiting confirmation for " + address);<br>    }<br>  }<br>});</span></pre>
<h1 id="2789" class="ku kv bf av au el kw kx ky kz la lb lc ld le lf lg" >Conclusion</h1>
<p id="711d" class="lh li bf av lj b lk ll lm ln lo lp lq lr ls lt lu" >And that’s it. Very simply isn't it? we have checked the blockchain for the payment and once it has been confirmed we simply updated the database. However, we will add more functionality in the future such as sending emails to clients updating back-office systems etc.</p>
<p id="4ab2" class="lh li bf av lj b lk ma lm mb lo mc lq md ls me lu" >Also, this is the script that relies extensively on the block.io as a 3rd party and of course we want to be our own bank so in the future we will replace this by using our own "<strong class="lj lz"><a href="https://bitcoin.org/en/full-node" class="cb bx lv lw lx ly" target="_blank" rel="noopener noreferrer">fullnode</a>"</strong> in a later tutorial.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Generate a BTC address</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/generate-a-btc-address.html"/>
        <id>https://cryptoskillz.com/blog/generate-a-btc-address.html</id>

        <updated>2019-09-10T14:35:25+01:00</updated>
            <summary>
                <![CDATA[
                    <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_FOAkdC5qviQuoNH-UUQY8Q.jpeg" alt="" width="640" height="360"></p>
<p> </p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_FOAkdC5qviQuoNH-UUQY8Q.jpeg" alt="" width="640" height="360"></p>
<p> </p>

<h1 id="1f98" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Introduction</h1>
<p id="dfde" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >This guide aims to program a website to accept Bitcoin. In the previous <strong>"<a href="https://cryptoskillz.com/blog/using-3rd-party-providers.html" target="_blank" rel="noopener noreferrer">article</a>"</strong>, we used "<strong class="ll mb"><a href="https://block.io/" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">block.io</a>"</strong> to easily create a bitcoin address and check for payment using "<strong class="ll mb"><a href="https://nodejs.org/en/" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">node.js</a>"</strong>. This time we are going to remove that dependency and do it using "<a href="https://github.com/bitcoinjs/bitcoinjs-lib" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">b<strong class="ll mb">itcoinjs-lib</strong></a>"</p>
<p > </p>
<h1 id="0a13" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >The SQL</h1>
<p id="fced" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We have implemented a database to store the payment details. We have used SQLlite here as it is simple to use and set up. This would not be recommended for any production application but it is good enough for this tutorial.</p>
<p id="9d4d" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >To the database, we added a table called keys to store the information on the address we generated. We will add more fields to this table as we go on.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="9ae3" class="mm kx bf av mn b dz mo mp l mq" >CREATE TABLE "keys" <br>( `id` INTEGER PRIMARY KEY AUTOINCREMENT,<br> `privatekey` TEXT,<br> `publickey` TEXT,<br> `address` TEXT<br>)</span></pre>
<h1 id="cc83" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >The Code</h1>
<p id="ff28" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >From this point as the code is going to get a little more complex, we are going to have a git "<strong class="ll mb"><a href="https://git-scm.com/docs/git-branch" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">branch</a>"</strong> to keep a snapshot of the code for each tutorial.</p>
<p id="2c5a" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >The latest code can be found "<strong class="ll mb"><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/generateaddress" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">here</a>"</strong> and it is also listed below.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="45c9" class="mm kx bf av mn b dz mo mp l mq" >//load express<br>const express = require("express");<br>//load body parser<br>const bodyParser = require("body-parser");<br>//load the bitcoin js files<br>var bitcoin = require("bitcoinjs-lib");<br>//load SQLlite (use any database you want or none)<br>const sqlite3 = require("sqlite3").verbose();<br>//init it<br>const app = express();<br>//set up the network we would like to connect to. in this case test net.<br>const TestNet = bitcoin.networks.testnet;<br>//open a database connection<br>let db = new sqlite3.Database("./db/db.db", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});<br>//generate the key pair using the makeRandom functions (there a bunch of ways to make an address btw)<br>let keyPair = bitcoin.ECPair.makeRandom({ network: TestNet });<br>//extract the publickey<br>let publicKey = keyPair.publicKey;<br>//get the private key<br>let privateKey = keyPair.toWIF();<br>//get an address from the keyPair we generated above.<br>let { address } = bitcoin.payments.p2pkh({<br>  pubkey: publicKey,<br>  network: TestNet<br>});<br>db.run(<br>  `INSERT INTO keys(address,privatekey,publickey) VALUES(?,?,?)`,<br>  [address, privateKey, publicKey],<br>  function(err) {<br>    if (err) {<br>      return console.log(err.message);<br>    }<br>    // get the last insert id<br>    //debug<br>    //console.log(this.lastID);<br>  }<br>);<br>//display it to the user<br>console.log("Pay me f00l " + address);<br>app.listen(3000, () =&gt; {});</span></pre>
<p id="207b" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" ><strong class="ll mb">What is going in the code above?</strong></p>
<p id="56ca" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Firstly we have cleaned up the code, removed block.io dependency and instead added "<strong class="ll mb"><a href="https://github.com/bitcoinjs/bitcoinjs-lib" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">bitcoinjs-lib</a>"</strong> which is included in our application with the code line below.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="3e0e" class="mm kx bf av mn b dz mo mp l mq" >var bitcoin = require(‘bitcoinjs-lib’);</span></pre>
<p id="6765" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >After that, we set the network to “testnet” when you remove this it will default to the live network as shown below.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="1e47" class="mm kx bf av mn b dz mo mp l mq" >const TestNet = bitcoin.networks.testnet</span></pre>
<p id="884f" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >After that, we open a connection to the "<strong class="ll mb"><a href="https://www.sqlite.org/about.html" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">SQLLite</a>"</strong> database, feel free to swap this with whatever database that you want.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="6d75" class="mm kx bf av mn b dz mo mp l mq" >//open a database connection<br>let db = new sqlite3.Database("./db/db.db", err =&gt; {<br>  if (err) {<br>    console.error(err.message);<br>  }<br>});</span></pre>
<p id="79cf" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Next, we generate a random key pair. There are a number of ways to generate Bitcoin address but this the simplest way to do so. Also, note that we pass in the “testnet” parameter that we created earlier inside the config part {}.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="bf35" class="mm kx bf av mn b dz mo mp l mq" >let keyPair = bitcoin.ECPair.makeRandom({ network: TestNet });</span></pre>
<p id="0a16" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Next, we extract the public and private key in variables, this is not essential is just makes the variables easier to use later on in the code.</p>
<p id="758d" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >The "<strong class="ll mb"><a href="https://en.bitcoin.it/wiki/Wallet_import_format" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">toWIF</a>"</strong> function is worth talking about here it stands and basically stands for Wallet Import Format (WIF, also known as Wallet Export Format) is a way of encoding a private "<strong class="ll mb"><a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">ECDSA key</a>"</strong> so as to make it easier to copy.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="1c77" class="mm kx bf av mn b dz mo mp l mq" >//extract the publickey<br>let publicKey = keyPair.publicKey</span><span id="9438" class="mm kx bf av mn b dz mr ms mt mu mv mp l mq" >//get the private key<br>let privateKey = keyPair.toWIF();</span></pre>
<p id="15d6" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Next, we want to extract the address to allow so that someone can pay us/ As you can see we pass in the <strong class="ll mb">publicKey</strong> we extracted earlier as well as setting it to the test network (again this gets boring fast)</p>
<p id="fee6" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >To get the address we have to call the <strong class="ll mb">p2pkh</strong> (Pay-to-PubkeyHash) function. you can read about it in more detail "<strong><a href="https://en.bitcoin.it/wiki/Transaction#Pay-to-PubkeyHash" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">here</a></strong>".</p>
<pre class="mh mi mj mk ml dv gg df"><span id="46e5" class="mm kx bf av mn b dz mo mp l mq" >let { address } = bitcoin.payments.p2pkh({ pubkey: publicKey,network: TestNet });</span></pre>
<p id="631f" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Lastly, we simply store it in our database. Note we know this is super insecure but it is just a test, for now, we will make it much more secure later on.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="bbb6" class="mm kx bf av mn b dz mo mp l mq" >db.run(`INSERT INTO keys(address,privatekey,publickey) VALUES(?,?,?)`, [address,privateKey,publicKey], function(err) {<br>if (err) {<br> return console.log(err.message);<br>}</span></pre>
<h1 id="5cbd" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" ><strong class="ch">Does it work?</strong></h1>
<p id="3917" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >Let’s run the program and find out. Open a terminal session (Mac/Linux), putty on windows or whatever method you use to run your note app. We use terminal so this is what we will document going forward.</p>
<p id="f765" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Run the generate script.</p>
<pre class="mh mi mj mk ml dv gg df"><span id="3d1f" class="mm kx bf av mn b dz mo mp l mq" >node generate.js</span></pre>
<p id="dc05" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >If everything goes well you will see the following output</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_gmZwW3S_AzI8oeNcf7XAsg.png" alt="" width="1218" height="97"></p>
<p id="8d5f" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >You will see the details in the database. This is not used now but in the next tutorial, we are going to claim this Bitcoin. You can view this database by using any "<strong class="ll mb"><a href="https://www.sqlite.org/about.html" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">SQLLite</a>"</strong> browser we use this "<strong><a href="http://sqlitebrowser.org/" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">one</a></strong>".</p>
<p id="72c2" class="lj lk bf av ll b lm mc lo md lq me ls mf lu mg lw" >Now let’s send a payment to this address.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_dfIfiR_ewQPNidHuxkfwpg.png" alt="" width="3335" height="1300"></p>
<p >Now let’s see if it has shown up on the network. We use blockchain as our blockchain "<strong class="ll mb"><a href="https://testnet.blockchain.info/" class="cb bx lx ly lz ma" target="_blank" rel="noopener noreferrer">explorer</a>"</strong>.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/4/1_zxANBApe6C4npY_R6Rz8nQ.png" alt="" width="2797" height="1158"></p>
<h1 id="mcetoc_1dkdm5agm0" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" > </h1>
<h1 id="8655" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Conclusion</h1>
<p id="a570" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We have managed to connect to the Bitcoin network generate an address and send some Bitcoin to it and store the keys. Next time we will use the private key to claim those coins.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Using 3rd Party providers</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/using-3rd-party-providers.html"/>
        <id>https://cryptoskillz.com/blog/using-3rd-party-providers.html</id>

        <updated>2019-09-10T14:26:56+01:00</updated>
            <summary>
                <![CDATA[
                    <div id="ea43" class="jl jm bf av jn b jo jp jq jr js jt ju">
<h2 id="mcetoc_1dk42k11v0" class="jn b jo jv bf"><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_iHh_BRR4Zc-RPTc1RraJyQ.jpeg" alt="" width="639" height="473"></h2>
</div>
<div class="jw">
<div class="ag af">
<div> </div>
<div>
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div id="ea43" class="jl jm bf av jn b jo jp jq jr js jt ju">
<h2 id="mcetoc_1dk42k11v0" class="jn b jo jv bf"><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_iHh_BRR4Zc-RPTc1RraJyQ.jpeg" alt="" width="639" height="473"></h2>
</div>
<div class="jw">
<div class="ag af">
<div> </div>
<div>
<h1 id="b76a" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Introduction</h1>
<p id="b675" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We decided to be paid in BTC for all of our future endeavours. After a few weeks of research, we found that there are many tutorials that show you how to do just about everything with Bitcoin. What we could not find was a tutorial that explained how to do one of it’s most simple use cases and that was put a Bitcoin address on a webpage and accept payment.</p>
<p id="946e" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >You can go the hosted solution and this is what I did with the first experiment, we went with the rather excellent “<a href="https://globee.com/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer"><strong class="ll mg">Globlee</strong></a><strong class="ll mg">”.</strong></p>
<p class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" ><strong class="ll mg"><br>*cryptoskillz from the future we are at a state in the project that we no longer require "</strong><strong class="ll mg"><a href="https://www.shopify.com/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">Shopify</a>"</strong><strong class="ll mg">/</strong><strong>"<a href="https://globee.com/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">Globlee</a>"</strong><strong class="ll mg"> </strong>so it has been shut down, the screenshot below shows what it looked like.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_7L2zVI88OJjct_TFmUEvyw.png" alt="" width="2654" height="1287"></p>
<p id="37a4" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >However, this is <strong>"<a class="cb bx mc md me mf" target="_blank" href="https://medium.com/@jimmysong/why-bitcoin-is-different-e17b813fd947" rel="noopener noreferrer">Bitcoin we want to be the bank</a>"</strong>, decentralise everything etc. This obviously leads me to dive deeper into the murky water of Bitcoin what are PUB keys WIF’s. How do we create them why does the testnet mempool take forever to clear, what the hell is a mempool? These and many other questions sprung up and the answers were not readily forthcoming, it is fair to say the Bitcoin community expects a certain level of knowledge before you can play in their waters.</p>
<p id="7cb8" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >As we where solving these issues for ourselves we thought we may as well document the process and this is what this tutorial is.</p>
<p id="8d76" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >It has been broken down into many parts and each tutorial has it’s own matching branch in Github this way you can literally track the progress, changes made etc to the code base as it develops. The latest version of the code is always in master if you want to ignore these tutorials and jump right in, go ahead.</p>
<p id="554b" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >The overreaching goal of this tutorial is to have:</p>
<ol class="">
<li id="addc" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw mm mn mo" >A full node (with lighting running atop of it)</li>
<li id="a2ab" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >A single line of code JS (that is agnostic) that is used to give e-commerce functionality to any website</li>
<li id="4dff" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >A REST API for processing all Bitcoin-related tasks (generateaddress, estimatefee etc)</li>
<li id="010f" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >An admin server for processing order</li>
<li id="a32e" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >A series of web components to give WWW sites e-commerce layout (checkout, pay button, product gallery etc)</li>
</ol>
<p id="a93c" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >More than just the above it is meant to serve as a teaching aid as every step successes, failures and everything in-between is documented both in this tutorial and in the Github.</p>
<p > </p>
<h1 id="113f" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Overreaching Goal</h1>
<p id="ca45" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >The purpose of this tutorial is to do the following</p>
<p id="ff77" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >1 Generate a unique address for each payment request on a webpage<br>2 Monitor the blockchain for payment <br>3 Inform the buyer when the payment is successful<br>4 Inform the seller when the payment is successful</p>
<p id="fdcd" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >That is it, how hard can that be? Let’s begin shall we</p>
<p > </p>
<h1 id="dd57" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Technology choices</h1>
<p id="a905" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We will be using a microservice architecture(ish) and will be using Node.js (for servers / REST API’s etc) and static HTML for everything else (interacting with the REST API for content delivery) and some flavour of SQL (most likely <strong>"<a href="https://www.sqlite.org/about.html" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">SQLLite</a>"</strong> to begin with)</p>
<p id="9d09" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >For our first foray into the world of accepting Bitcoins, we thought it would be wise to look at the various API companies out there (and there are a lot) and see how much of the heavy lifting can be removed if you are happy to rely on a third party. Note this is probably the most simple way (outside of fully hosted) way to process a Bitcoin payment and as a result will be of the most useful to most people.</p>
<p id="af2f" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >We also discounted any provider who converted your Bitcoin back to dollars, pounds euros, in fact, any FIAT currency as soon as the item was sold as this is not what we were looking to do at all.</p>
<p id="bff5" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >There are many Bitcoin as service companies out there they range from expensive and bad to cheap and good (and everything in between) the one I chose was "<strong class="ll mg"><a href="https://block.io/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">Block.io</a>"</strong> we found it to have the best API. If you do not like Block.io the concepts are simple enough to be interchangeable.</p>
<p id="8ac7" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >Go ahead sign up for a Blox account and click the skip button in the account page as the free is good enough for us for now.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_JCuWVZXAa23_M1L1Uil_bw.png" alt="" width="2240" height="1243"></p>
<p id="19a3" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >Next, we have to set your secret pin. Do so and keep it secret.</p>
<p > </p>
</div>
<div><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_ZO-9zptaX9bCLivOglpI8A.png" alt="" width="1208" height="697"></div>
<div> </div>
<div>After this Blox will get you a <strong>"<a href="https://en.bitcoin.it/wiki/Seed_phrase" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">mnemonic</a>"</strong> make a note of this and click on the “I have saved this information” box, then click done.</div>
<div> </div>
<div><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_ZO-9zptaX9bCLivOglpI8A.png" alt="" width="1208" height="697"></div>
<div> </div>
<div>
<p id="9ee8" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >Lastly, click on the drop-down and click “Bitcoin (Testnet”) and we are ready to go.</p>
<p id="e5db" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >*Note the “show API keys” link has your API keys that should be obvious but these are required to interact with the Block API.</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_ZsnH6hueK2oJitI1zn1A9g.png" alt="" width="2133" height="223"></p>
<h2 id="c00c" class="ng kx bf av au el nh ni nj nk nl nm nn no np nq nr" >The code</h2>
<p id="37da" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >Now we are up and running we have a wallet and access to a Testnet, go us. Now let’s sling some code and interact with it. If you read their <strong>"<a href="https://block.io/docs/basic" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">docs</a>"</strong> you will see that are fairly extensive but don’t worry we are only going to use 2 of the commands at this point in time.</p>
<p id="a369" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >The code below is using the "<strong class="ll mg"><a href="https://www.npmjs.com/package/block_io" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">block_io</a>"</strong> and uses a simple "<strong class="ll mg"><a href="https://nodejs.org/en/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">Node.js</a>"</strong><strong class="ll mg"> "</strong><strong class="ll mg"><a href="https://expressjs.com/" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">express</a>" </strong>application. The source code can be found "<strong class="ll mg"><a href="https://github.com/cryptoskillz/block_ioTurotial" class="cb bx mc md me mf" target="_blank" rel="noopener noreferrer">here</a>"</strong>.</p>
<p id="4fae" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >*Note we have left my API keys in here, it is intentional just so you can see how they are meant to be used. We do not use the Block.io account for anything so there is no way you can compromise anything.</p>
<pre class="kg kh ki kj kk dv gg df"><span id="e933" class="ng kx bf av ns b dz nt nu l nv" >//load express<br>const express = require('express');<br>//load body parser<br>const bodyParser = require('body-parser');<br>//load block io<br>var BlockIo = require('block_io');<br>//set the version of the API to 2<br>var version = 2; // API version<br>//init it<br>const app = express();</span><span id="e564" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >//this function just creates a random label so we can generate the address.<br>function makeLabel() {<br>  var text = "";<br>  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";<br>  for (var i = 0; i &lt; 5; i++)<br>    text += possible.charAt(Math.floor(Math.random() * possible.length));<br>  return text;<br>}</span><span id="07aa" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >//init the block.io server <br>var block_io = new BlockIo('9ccb-fad0-7811-4dfb', 'TFcce3dNxcfk7E3D', version);</span><span id="3e3e" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >//get a random label<br>var label = makeLabel();<br>console.log('Generating new address')<br>/*<br>create a new address using a label.  You do not have to use a label but it just makes it easier to work with later.<br>Later on we wil store this address in a databse for further processing.<br>*/<br>block_io.get_new_address({'label': label}, console.log);<br>/*<br>Set a timer to check for a payment.  Using the label we created allows us to check faster but you could move this to <br>a backend server function and have it check for balances etc<br>*/<br>setInterval(function()<br>{<br> console.log('Checking for payment');<br> block_io.get_address_balance({'label': label}, console.log);<br>},10000);</span><span id="73fa" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >app.use(bodyParser.urlencoded({ extend: false }));  <br>app.use(bodyParser.json());</span><span id="7c8d" class="ng kx bf av ns b dz nw nx ny nz oa nu l nv" >app.listen(3000, () =&gt; {<br>});</span></pre>
<p id="59fa" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >Let us go ahead and explain the code below:</p>
<ol class="">
<li id="9a9e" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw mm mn mo" >We call the <strong class="ll mg">makeLabel</strong> function to generate a unique label.</li>
<li id="c8d2" class="lj lk bf av ll b lm mp lo mq lq mr ls ms lu mt lw mm mn mo" >Then we generate a new address via the <strong class="ll mg">get_new_address function. *</strong>Note we use the label function just so it is easier to spot in the wallet. This address will now show up in your block.io wallet.</li>
</ol>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_HjTienzdr2kGlRmx293EFQ.png" alt="" width="2343" height="1128"></p>
<p id="563d" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >3. We use the <strong class="ll mg">setInterval</strong> function to check for the payment via its label (<strong class="ll mg">get_address_balance</strong>) every 10 seconds</p>
<p id="4985" class="lj lk bf av ll b lm lx lo ly lq lz ls ma lu mb lw" >That’s it, super simple once you have downloaded the code simply change the API keys to your own open a terminal and type <strong class="ll mg">node server.js </strong>and<strong class="ll mg"> </strong>you will see the following output</p>
<p ><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/2/1_KT325oU_qhTm3KqCTDdVMQ.png" alt="" width="2831" height="489"></p>
<h1 id="mcetoc_1dk43ek4n0" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" > </h1>
<h1 id="6ebc" class="kw kx bf av au el ky kz la lb lc ld le lf lg lh li" >Conclusion</h1>
<p id="ff2a" class="lj lk bf av ll b lm ln lo lp lq lr ls lt lu lv lw" >We have set up an account with a Bitcoin API service and wrote the code to generate a new address and then check if any Bitcoin has been sent to it over the Testnet. Yay, go us. In "<strong class="ll mg"><a href="https://cryptoskillz.com/blog/generate-a-btc-address.html" target="_blank" rel="noopener noreferrer">part 2</a>" </strong>we will set up a bitcoin core wallet, get some test coins and send them to our new address.</p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Table of contents &amp; prereqs</title>
        <author>
            <name>cryptoskillz</name>
        </author>
        <link href="https://cryptoskillz.com/blog/table-of-contents-and-prereqs.html"/>
        <id>https://cryptoskillz.com/blog/table-of-contents-and-prereqs.html</id>

        <updated>2019-09-10T14:37:54+01:00</updated>
            <summary>
                <![CDATA[
                    <div id="259d" class="jf jg bf av jh b ji jj jk jl jm jn jo">
<h1 id="mcetoc_1dk4283no0" class="jh b ji jp bf"> </h1>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/1/part0.jpeg" alt="" width="640" height="480"></p>
</div>
<div class="jq">
<div class="ag af">
<div> </div>
<div>
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div id="259d" class="jf jg bf av jh b ji jj jk jl jm jn jo">
<h1 id="mcetoc_1dk4283no0" class="jh b ji jp bf"> </h1>
<p><img class="post__image" src="https://cryptoskillz.com/blog/media/posts/1/part0.jpeg" alt="" width="640" height="480"></p>
</div>
<div class="jq">
<div class="ag af">
<div> </div>
<div>
<h2 id="ac85" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc">Pledge</h2>
<p id="ec2f" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >We pledge to keep this tutorial up to date and change each tutorial as and when it is appropriate. One of the biggest issues with BTC documentation is it becomes out of date (really quickly) and this literally costs 1000’s of devs hours when people are starting out to learn how to develop for BTC.</p>
<h2 id="aa0a" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc">External Resources</h2>
<p id="99f7" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >Below are the links to the code and the demos of the various services that make up this package.</p>
<p id="acb2" class="ld le bf av lf b lg lr li ls lk lt lm lu lo lv lq" >Note, these demos only work the latest branch being worked and the master branch.</p>
<p id="f88a" class="ld le bf av lf b lg lr li ls lk lt lm lu lo lv lq" ><a href="https://github.com/cryptoskillz/ECS" target="_blank" rel="noopener noreferrer">Code<br></a><a href="https://cryptoskillz.com/" target="_blank" rel="noopener noreferrer">WWW site</a><a href="https://s3-eu-west-1.amazonaws.com/cryptoskillz.com/srcrypto/prod/admin/login.html" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer"><br></a><a href="https://cryptoskillz.com/srcrypto/prod/cdn/js/sr.js" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">CDN (sr.js)<br></a><a href="https://ecstestnet.cryptoskillz.com/" target="_blank" rel="noopener noreferrer">Testnet Server<br></a><a href="https://ecslive.cryptoskillz.com/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Mainnet Server</a><br><a href="https://cryptoskillz.com/blog/ecs/">Tutorial homepage</a><br><a href="https://cryptoskillz.com/light.html" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Lightning Demo</a></p>
<p > </p>
<h1 id="mcetoc_1dk429mug1" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc" >Quick links</h1>
<h3 id="21b7" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Git Branches</h3>
<p id="45e5" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >Part 1: Using 3rd Party providers: <strong class="lf mm">no branch</strong><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/generateaddress" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 2: Generate BTC address</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/monitor" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 3: Monitor blockchain for payment</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/sweep" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 4: Move payment to cold storage</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/www" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 5: WWW and modularisation</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/admin" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 6: Create an Admin and hosting</a><br><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/refactor1" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 7: Recode CDN to use plain js</a><br>Part 8: Working with Fullnodes: <strong class="lf mm">no branch<br></strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/9-fullnode-part-2" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 9: Working with Fullnodes 2</a><br>Part 10: Address 10: <strong class="lf mm">no branch<br></strong><a href="https://github.com/cryptoskillz/Bitcoin-Tutorial/tree/part11-sweep-refactor/admin" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 11: Refactor of cold storage</a><br><a class="cb bx lw lx ly lz" target="_blank" href="https://medium.com/bitcoin-e-commerce-development/part-12-backoffice-and-server-refactor-45dbc05dcebb" rel="noopener noreferrer">Part 12: Backoffice and server refactor</a><br>Part 13: Working with Fullnodes 3<br><a href="https://github.com/cryptoskillz/ECS/tree/part14-replace-globee-2" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">Part 14: Finally removing GloBee</a></p>
<h3 id="8494" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Environment Variables</h3>
<p id="a189" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >We keep all of the environment in a .env file. For security reasons, this has been added to the git ignore. You will see a file called .env_copy which contains all of the variables just rename this to .env and add your details.</p>
<h4 id="f507" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">emailsmtp</h4>
<p id="8529" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >Hold the email SMTP server. For development, we are using <a href="https://ethereal.email/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">https://ethereal.email/</a> which fakes an email server allowing us to test the functionality without actually sending emails.</p>
<h4 id="826d" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">emailusername</h4>
<p id="2e61" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >This is the username for the SMTP service</p>
<h4 id="b249" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">emailpassword</h4>
<p id="9baf" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >This is the email password for the SMTP service</p>
<h4 id="a667" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">walletpassphrase</h4>
<p id="7667" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The wallet passphrase for bitcoin core</p>
<h4 id="fe24" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">walletaccount</h4>
<p id="70e5" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >the wallet account we are using for bitcoin core</p>
<h4 id="1852" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">blockiokey</h4>
<p id="c75e" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The key that was supplied to us by “<a href="https://block.io/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer"><strong class="lf mm">block.io</strong></a>” when we signed up</p>
<h4 id="082f" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">blockiosecret</h4>
<p id="5dd3" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The API secret that was supplied to us by “<a href="https://block.io/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer"><strong class="lf mm">block.io</strong></a>” when we signed up</p>
<h4 id="e247" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">toaddress</h4>
<p id="8572" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The cold storage address we were sweeping funds to. Note this was replaced as of part 11 and is no longer required.</p>
<h3 id="1613" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Port</h3>
<p id="a8e9" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The port you want to run the server on.</p>
<h3 id="d709" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Mock</h3>
<p id="3ed6" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >Whenever we are using mock API calls or not (beta)</p>
<h3 id="adea" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Confirmations</h3>
<p id="cf86" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >How many confirmations we wait for</p>
<h3 id="8684" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Strikeendpoint</h3>
<p id="f0d1" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The endpoint for strike <a href="https://strike.acinq.co/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">https://strike.acinq.co/</a></p>
<h3 id="16cc" class="ma kr bf av au el mb mc md me mf mg mh mi mj mk ml">Strikepaikey</h3>
<p id="fe52" class="ld le bf av lf b lg lh li lj lk ll lm ln lo lp lq" >The API key for strike <a href="https://strike.acinq.co/" class="cb bx lw lx ly lz" target="_blank" rel="noopener noreferrer">https://strike.acinq.co/</a></p>
<h2 id="mcetoc_1dk42endh2" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc">Run it youself.</h2>
<p id="mcetoc_1dkdkr1vk0" class="kq kr bf av au el ks kt ku kv kw kx ky kz la lb lc">We have recently released ECS as a SAAS (software as a service) product, it is free and takes a few minutes to step up read more about it "<a href="https://ecs-2.gitbook.io/ecs/" target="_blank" rel="noopener noreferrer">here</a>".</p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
</feed>
